<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>琥珀丶川</title>
  
  <subtitle>下雨和撸码更配~</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://yechuanjie.github.io/blog/"/>
  <updated>2024-06-28T10:05:01.730Z</updated>
  <id>https://yechuanjie.github.io/blog/</id>
  
  <author>
    <name>Ye ChuanJie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react-cli</title>
    <link href="https://yechuanjie.github.io/blog//react-cli/"/>
    <id>https://yechuanjie.github.io/blog//react-cli/</id>
    <published>2020-07-13T09:44:03.000Z</published>
    <updated>2024-06-28T10:05:01.730Z</updated>
    
    <content type="html"><![CDATA[<p>🎉 <code>react</code> 移动端开发脚手架，技术栈 <code>react</code> + <code>antd-moblie</code> + <code>typescript</code> + <code>react-router</code> + <code>redux</code></p><a id="more"></a><p>该脚手架基于 <a href="https://www.html.cn/create-react-app/" target="_blank" rel="noopener">Create React App</a> 创建，方便快速搭建 react 移动端项目。<a href="https://github.com/Yechuanjie/react-cli" target="_blank" rel="noopener">仓库地址</a> &amp;&amp; <a href="https://yechuanjie.github.io/react-cli/index">项目地址（请在移动端查看）</a></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a><span id="top">目录</span></h3><p><a href="#ts">✅ TypeScript 开发语言</a></p><p><a href="#redux">✅ redux 状态管理</a></p><p><a href="#router">✅ react-router 路由管理</a></p><p><a href="#axios">✅ axios 封装及接口管理</a></p><p><a href="#mock">✅ 本地 mock server 支持</a></p><p><a href="#proxy">✅ 本地跨域配置</a></p><p><a href="#eslint">✅ esint + prettier 统一开发规范</a></p><p><a href="#webpack">✅ 支持自定义 webpack 配置</a></p><p><a href="#rem">✅ rem 适配方案 </a></p><p><a href="#antd">✅ antd-moblie 组件按需加载</a></p><p><a href="#alias">✅ 配置 alias 别名</a></p><p><a href="#analyze">✅ 配置打包分析</a></p><p><a href="#env">✅ 配置多环境变量</a></p><h4 id="✅-TypeScript-开发语言"><a href="#✅-TypeScript-开发语言" class="headerlink" title="✅ TypeScript 开发语言"></a><span id="ts">✅ TypeScript 开发语言</span></h4><p><code>TypeScript</code> 是 <code>JavaScript</code> 类型的超集，它可以编译成纯 <code>JavaScript</code>。它的最大特点就是支持强类型和 <a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">ES6 Class</a></p><p><a href="#top">▲  回顶部</a></p><h4 id="✅-redux-状态管理"><a href="#✅-redux-状态管理" class="headerlink" title="✅ redux  状态管理"></a><span id="redux">✅ redux  状态管理</span></h4><p>目录结构</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├─store</span><br><span class="line">│  │ index.ts</span><br><span class="line">│  │</span><br><span class="line">│  ├─actions</span><br><span class="line">│  │   user.ts</span><br><span class="line">│  │</span><br><span class="line">│  └─reducers</span><br><span class="line">│      index.ts</span><br><span class="line">│      user.ts</span><br></pre></td></tr></table></figure><p>拆分 reducer</p><p><code>store/index</code> 中 <code>combineReducers()</code> 方法将多个小的 reducer 组合成一个 rootReducer，而每个小的 reducer 只关心自己负责的 <code>action.type</code></p><p><code>src/index.tsx</code> 中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>React.StrictMode&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; setAppUserInfo &#125; <span class="keyword">from</span> <span class="string">'@/store/actions/user'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> userInfo = useSelector(<span class="function">(<span class="params">state: PageStateProps</span>) =&gt;</span> state.user)</span><br><span class="line">  <span class="keyword">const</span> dispath = useDispatch()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> updateInfo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    dispath(</span><br><span class="line">      setAppUserInfo(&#123;</span><br><span class="line">        userId: <span class="string">'413'</span>,</span><br><span class="line">        nickName: <span class="string">'developer'</span>,</span><br><span class="line">        sex: <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"page"</span>&gt;</span><br><span class="line">      &lt;div onClick=&#123;updateInfo&#125;&gt;</span><br><span class="line">        &lt;Logo&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Logo</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="welcome"&gt;hello &#123;userInfo.nickName&#125;!&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="#top">▲  回顶部</a></p><h4 id="✅-react-router-路由管理"><a href="#✅-react-router-路由管理" class="headerlink" title=" ✅ react-router 路由管理"></a><span id="router"> ✅ react-router 路由管理</span></h4><p>本项目采用 <code>history</code> 模式，如需使用 <code>hash</code> 模式，请使用 <code>HashRouter</code> 替换 <code>BrowserRouter</code></p><p><code>basename</code> 属性可以根据项目路径来修改，例如本项目地址为：<a href="http://yechuanjie.github.io/react-cli">http://yechuanjie.github.io/react-cli</a>，则 <code>basename=&quot;/react-cli&quot;</code>，若不需要子路径，则默认<code>basename = &#39;/&#39;</code></p><p><code>src/router/routes.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lazy &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> Index = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/pages/index'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes: RouteConfig[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/index'</span>,</span><br><span class="line">    component: Index,</span><br><span class="line">    exact: <span class="literal">true</span>,</span><br><span class="line">    routes: []</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>src/router/index.tsx</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Suspense &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Route, Redirect, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; routes &#125; <span class="keyword">from</span> <span class="string">'./routes'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RouterView = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;BrowserRouter basename=<span class="string">"/react-cli"</span>&gt;</span><br><span class="line">    &lt;Suspense fallback=&#123;&lt;div&gt;加载中&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &#123;routes.map(route =&gt; (</span></span><br><span class="line"><span class="regexp">          &lt;Route key=&#123;route.path&#125; path=&#123;route.path&#125; component=&#123;route.component&#125; exact=&#123;route.exact&#125;&gt;&lt;/</span>Route&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">        &lt;Redirect to=<span class="string">"/index"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Suspense&gt;</span><br><span class="line">  &lt;<span class="regexp">/BrowserRouter&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">export default RouterView</span></span><br></pre></td></tr></table></figure><p>使用 <code>lazy</code> + <code>Suspense</code> 的方式实现路由懒加载以及组件异步加载</p><p><a href="#top">▲  回顶部</a></p><h4 id="✅-axios-封装及接口管理"><a href="#✅-axios-封装及接口管理" class="headerlink" title="✅ axios 封装及接口管理"></a><span id="axios">✅ axios 封装及接口管理</span></h4><p>将 <code>axios</code> 请求进行二次封装，统一请求方式、实现公共参数配置、实现统一的错误拦截处理，并返回与后端统一的 <code>Promise&lt;ResponseType&gt;</code> 对象</p><p><code>request</code> 封装 ，<code>src/api/request.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123; AxiosRequestConfig, Method &#125; <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> envConfig <span class="keyword">from</span> <span class="string">'@/config'</span></span><br><span class="line"><span class="comment">// 接口返回类型 (根据后端返回的格式定义)</span></span><br><span class="line"><span class="keyword">interface</span> ResponseType &#123;</span><br><span class="line">  data: <span class="built_in">any</span></span><br><span class="line">  msg: <span class="built_in">string</span></span><br><span class="line">  code: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url: <span class="built_in">string</span>, method: Method, data?: &#123;&#125;, loading?: <span class="built_in">boolean</span></span>): <span class="title">Promise</span>&lt;<span class="title">ResponseType</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 请求公共参数配置</span></span><br><span class="line">  <span class="keyword">const</span> publicParams = &#123;</span><br><span class="line">    env: envConfig.ENV_TYPE,</span><br><span class="line">    mockType: <span class="number">1</span>,</span><br><span class="line">    source: <span class="string">'h5'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 合并公共参数</span></span><br><span class="line">  data = <span class="built_in">Object</span>.assign(&#123;&#125;, data, publicParams)</span><br><span class="line">  <span class="keyword">const</span> options: AxiosRequestConfig = &#123;</span><br><span class="line">    url,</span><br><span class="line">    method,</span><br><span class="line">    params: method.toUpperCase() === <span class="string">'GET'</span> || method.toUpperCase() === <span class="string">'DELETE'</span> ? data : <span class="literal">null</span>,</span><br><span class="line">    data: method.toUpperCase() === <span class="string">'POST'</span> || method.toUpperCase() === <span class="string">'PUT'</span> ? data : <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> AxiosInstance = initAxios(loading)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    AxiosInstance(options)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = res.data <span class="keyword">as</span> ResponseType</span><br><span class="line">        <span class="comment">// 这里可以添加和后台的 status 约定</span></span><br><span class="line">        <span class="comment">// if (data.code !== 200) &#123;</span></span><br><span class="line">        <span class="comment">//   Toast.info(data.msg)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口管理 <code>src/api/index.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'./request'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getList = <span class="function">(<span class="params">params: &#123; <span class="keyword">type</span>: <span class="built_in">number</span> &#125;</span>) =&gt;</span> request(<span class="string">'/api/getInfo'</span>, <span class="string">'GET'</span>, &#123; ...params &#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>使用封装的<code>request</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> API <span class="keyword">from</span> <span class="string">'@/api/index'</span></span><br><span class="line"><span class="keyword">const</span> updateInfo = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// get 请求</span></span><br><span class="line">  <span class="keyword">const</span> list = <span class="keyword">await</span> API.getList(&#123; <span class="keyword">type</span>: <span class="number">1</span> &#125;)</span><br><span class="line">  <span class="built_in">console</span>.info(list) <span class="comment">// 请求结果就是封装后的 Promise&lt;ResponseType&gt; 类型</span></span><br><span class="line">  <span class="comment">// 对于接口返回的数据格式，可以统一在global.d.ts里定义interface，假设你已经定义了 interface ListDetail, 然后如下使用</span></span><br><span class="line">  <span class="keyword">const</span> data = list.data <span class="keyword">as</span> ListDetail <span class="comment">// 断言data类型，后续就可以直接使用定义好的数据结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#top">▲  回顶部</a></p><h4 id="✅-本地-mock-server-支持"><a href="#✅-本地-mock-server-支持" class="headerlink" title="✅ 本地 mock server 支持"></a><span id="mock">✅ 本地 mock server 支持</span></h4><p><code>src/mock</code> 实现了本地 <code>mock server</code> 开发。</p><p>注意： <code>nodejs</code> 环境下默认不支持 <code>esModules</code>，将<code>src/mock</code>下的文件，修改为<code>.mjs</code>后缀，同时在<code>package.json</code> 的<code>scripts</code>中新增<code>experimental-modules</code>命令使其可以使用<code>esModules</code></p><p><code>package.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scripts: &#123;</span><br><span class="line">  "mock": "node --experimental-modules src/mock/server.mjs"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本项目使用 <code>express</code> 作为服务器开发</p><p><code>src/mock/server.mjs</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">import</span> mockData <span class="keyword">from</span> <span class="string">'./mock.mjs'</span></span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'body-parser'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// body-parser 解析json格式数据</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.use(<span class="string">'/'</span>, mockData)</span><br><span class="line">app.use(<span class="string">'/api'</span>, router)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3001</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3001!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>mock 数据根据需求在<code>src/mock/mock.mjs</code>中自定义修改，更多 mock 使用方式可以查看<a href="%5Bhttp://mockjs.com/examples.html%5D(http://mockjs.com/examples.html">mock 官方示例</a>&gt;)。</p><p><code>src/mock/mock.mjs</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="comment">// get类型接口  /api/getInfo 获取列表</span></span><br><span class="line">router.get(<span class="string">'/getInfo'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(req.query.type)</span><br><span class="line">  <span class="keyword">const</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|1-8'</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">'name|1'</span>: [<span class="string">'John'</span>, <span class="string">'Jessen'</span>, <span class="string">'Mark'</span>],</span><br><span class="line">        <span class="string">'desc|1'</span>: [<span class="string">'Hello'</span>, <span class="string">'React-cli'</span>, <span class="string">'Try it!'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">    data,</span><br><span class="line">    code: <span class="number">200</span>,</span><br><span class="line">    msg: <span class="string">''</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>开启本地 <code>mock</code> 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn mock</span><br></pre></td></tr></table></figure><p>本地开启 <code>mock</code> 服务后，所有本地 <code>api</code> 请求都会导致<strong>跨域问题</strong>，请参考<a href="#proxy">✅ 本地跨域配置</a></p><p><a href="#top">▲  回顶部</a></p><h4 id="✅-本地跨域配置"><a href="#✅-本地跨域配置" class="headerlink" title="✅ 本地跨域配置"></a><span id="proxy">✅ 本地跨域配置</span></h4><p>为解决本地接口请求跨域，需要使用到 <code>http-proxy-middleware</code> 中间件。在 src 根目录下创建<code>setupProxy.js</code>文件，注意这里只能使用 <code>.js</code> 后缀，因为该中间件默认读取的是 <code>js</code> 文件</p><p><code>src/setupProxy.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(</span><br><span class="line">    createProxyMiddleware(<span class="string">'/api'</span>, &#123;</span><br><span class="line">      <span class="comment">// 代理服务器地址</span></span><br><span class="line">      target: <span class="string">'http://localhost:3001'</span>,</span><br><span class="line">      secure: <span class="literal">false</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/api'</span>: <span class="string">'/api'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，就可以愉快的在本地请求自己的<code>mock</code>数据啦！</p><p><a href="#top">▲  回顶部</a></p><h4 id="✅-eslint-prettier-统一开发规范"><a href="#✅-eslint-prettier-统一开发规范" class="headerlink" title="✅ eslint + prettier 统一开发规范"></a><span id="eslint">✅ eslint + prettier 统一开发规范</span></h4><p>在<code>package.json</code>文件中编写自定义<code>eslint</code>规则</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"eslintConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"react-app"</span>,</span><br><span class="line">    <span class="attr">"rules"</span>: &#123;</span><br><span class="line">      <span class="attr">"import/no-commonjs"</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写统一的<code>prettier</code>规范文件 <code>.prettierrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"printWidth"</span>: <span class="number">120</span>,</span><br><span class="line">  <span class="attr">"arrowParens"</span>: <span class="string">"avoid"</span>,</span><br><span class="line">  <span class="attr">"bracketSpacing"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"jsxBracketSameLine"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"trailingComma"</span>: <span class="string">"none"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#top">▲  回顶部</a></p><h4 id="✅-支持自定义-webpack-配置"><a href="#✅-支持自定义-webpack-配置" class="headerlink" title="✅ 支持自定义 webpack 配置"></a><span id="webpack">✅ 支持自定义 webpack 配置</span></h4><p>通过 <code>customize-cra</code> 暴露 <code>webpack</code> 配置的<code>config-overrides.js</code>文件，使我们可以不用 <code>eject</code> 的方式就能在这里覆盖重写 <code>webpack</code> 配置，目前已支持几十种相关配置自定义，具体可查看<a href="[https://github.com/arackaf/customize-cra/blob/HEAD/api.md](https://github.com/arackaf/customize-cra/blob/HEAD/api.md">customize-cra api docs</a>&gt;)。</p><p><a href="#top">▲  回顶部</a></p><h4 id="✅-rem-适配方案"><a href="#✅-rem-适配方案" class="headerlink" title="✅ rem 适配方案 "></a><span id="rem">✅ rem 适配方案 </span></h4><p>项目已经配置好 <code>rem</code> 适配，下面仅做介绍：</p><p><code>antd-mobile</code> 中的样式默认使用<code>px</code>作为单位，如果需要使用<code>rem</code>单位，推荐使用<code>postcss-px2rem</code> 搭配 <code>src/utils/rem.ts</code>一起使用。其中 <code>src/utils/rem.ts</code> 实现了一个极简的 rem 库。</p><p><code>postcss-px2rem</code> 插件使用</p><ul><li><p>假如设计图给的宽度是 750，remUnit 设置为 75，这样我们写样式时，可以直接按照设计图标注的宽高来 1:1 还原开发。</p></li><li><p>PS: 如果引用了某些没有兼容 px2rem 第三方 UI 框架，有的 1rem = 100px（antd-mobile）， 有的 1rem = 75px</p></li><li><p>需要将 remUnit 的值设置为像素对应的一半（antd-mobile 即 50），即可以 1:1 还原组件，否则会样式会有变化，例如按钮会变小。</p></li></ul><p><code>config-overrides.js</code>，使用<code>addPostcssPlugins</code>设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; override, addPostcssPlugins &#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = override(addPostcssPlugins([<span class="built_in">require</span>(<span class="string">'postcss-px2rem'</span>)(&#123; <span class="attr">remUnit</span>: <span class="number">50</span> &#125;)]))</span><br></pre></td></tr></table></figure><p><a href="#top">▲  回顶部</a></p><h4 id="✅-antd-moblie-组件按需加载"><a href="#✅-antd-moblie-组件按需加载" class="headerlink" title="✅ antd-moblie 组件按需加载"></a><span id="antd">✅ antd-moblie 组件按需加载</span></h4><p><a href="https://github.com/ant-design/babel-plugin-import" target="_blank" rel="noopener">babel-plugin-import</a> 是一款 <code>babel</code> 插件，它会在编译过程中将 <code>import</code> 的写法自动转换为按需引入的方式。</p><p>安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-plugin-import</span><br></pre></td></tr></table></figure><p><code>config-overrides.js</code>，使用<code>fixBabelImports</code>设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; override, fixBabelImports &#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>)</span><br><span class="line"><span class="comment">// 引用 antd 后设置按需引入后，在打包的时候会生成很多 .map 文件</span></span><br><span class="line">process.env.GENERATE_SOURCEMAP = <span class="string">'false'</span></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  <span class="comment">/* 按需引入antd-mobile */</span></span><br><span class="line">  fixBabelImports(<span class="string">'import'</span>, &#123;</span><br><span class="line">    libraryName: <span class="string">'antd-mobile'</span>,</span><br><span class="line">    style: <span class="string">'css'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="#top">▲  回顶部</a></p><h4 id="✅-配置-alias-别名"><a href="#✅-配置-alias-别名" class="headerlink" title="✅ 配置 alias 别名"></a><span id="alias">✅ 配置 alias 别名</span></h4><p><code>config-overrides.js</code>，使用<code>addWebpackAlias</code>设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; override, addWebpackAlias &#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">dir</span> =&gt;</span> path.join(__dirname, dir)</span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  addWebpackAlias(&#123;</span><br><span class="line">    <span class="string">'@/'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">    <span class="string">'@/pages'</span>: resolve(<span class="string">'./src/pages'</span>),</span><br><span class="line">    <span class="string">'@/api'</span>: resolve(<span class="string">'./src/api'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h4><p>根目录的 <code>tsconfig.json</code> 文件中也需要设置别名的支持，否则 ts 会提示无法识别别名</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"src"</span>,</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"@/*"</span>: [<span class="string">"*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Tips:</code> 推荐使用 <code>vscode</code> 开发，安装 <code>path-intellisense</code>插件, 并在 <code>setting.json</code> 中设置别名映射，就能在使用别名时提示文件路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"path-intellisense.mappings": &#123;</span><br><span class="line">  "@": "\$&#123;workspaceRoot&#125;/src"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#top">▲  回顶部</a></p><h4 id="✅-配置打包分析"><a href="#✅-配置打包分析" class="headerlink" title="✅ 配置打包分析"></a><span id="analyze">✅ 配置打包分析</span></h4><p>webpack-bundle-analyzer 是一款分析代码大小的插件</p><p>首先安装它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-bundle-analyzer</span><br></pre></td></tr></table></figure><p>在 <code>config-overrides.js</code> 中，使用 <code>addWebpackPlugin</code> 设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; BundleAnalyzerPlugin &#125; = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; override, addWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> analyze = process.env.REACT_APP_ENV === <span class="string">'development'</span> <span class="comment">//是否分析打包数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  analyze</span><br><span class="line">    ? addWebpackPlugin(</span><br><span class="line">        <span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">          analyzerMode: <span class="string">'static'</span> <span class="comment">//输出静态报告文件report.html，而不是启动一个web服务</span></span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    : <span class="literal">undefined</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="#top">▲  回顶部</a></p><h4 id="✅-配置多环境变量"><a href="#✅-配置多环境变量" class="headerlink" title="✅ 配置多环境变量 "></a><span id="env">✅ 配置多环境变量 </span></h4><p><code>package.json</code> 里的 <code>scripts</code> 配置 <code>build:dev</code> <code>build:sta</code> <code>build:pro</code>来执行不同环境</p><ul><li><code>yarn start</code> 启动本地 , 默认执行 <code>development</code></li><li><code>yarn build:dev</code> 打包测试环境 , 执行 <code>development</code></li><li><code>yarn build:sta</code> 打包预发布环境 , 执行 <code>staging</code></li><li><code>yarn build:pro</code> 打包正式环境 , 执行 <code>production</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "react-app-rewired start",</span><br><span class="line">  "build:dev": "dotenv -e .env.development react-app-rewired build",</span><br><span class="line">  "build:sta": "dotenv -e .env.staging react-app-rewired build",</span><br><span class="line">  "build:pro": "dotenv -e .env.production react-app-rewired build"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h5><p>在 <strong>根目录</strong> 下创建不同的环境变量文件，如 <code>.env.development</code> ，<code>.env.staging</code>， <code>.env.production</code>，就如你所看到的 <code>scripts</code> ，通过 <code>dotenv</code> 可以指定不同的环境变量文件。</p><p>在代码中可以通过 <code>process.env.REACT_APP_ENV</code> 访问所在的环境变量。除了 <code>REACT_APP_*</code> 变量之外，在你的应用代码中始终可用的还有两个特殊的变量<code>NODE_ENV</code> 和<code>BASE_URL</code></p><ul><li><strong>.env.development</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 测试环境</span><br><span class="line"># must start with REACT_APP_</span><br><span class="line">REACT_APP_ENV = <span class="string">'development'</span></span><br></pre></td></tr></table></figure><ul><li><strong>.env.staging</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 预发布环境</span><br><span class="line"># must start with REACT_APP_</span><br><span class="line">REACT_APP_ENV = <span class="string">'staging'</span></span><br></pre></td></tr></table></figure><ul><li><strong>.env.production</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 正式环境</span><br><span class="line"># must start with REACT_APP_</span><br><span class="line">REACT_APP_ENV = <span class="string">'production'</span></span><br></pre></td></tr></table></figure><p>这里我们并没有定义全部环境变量，只定义了基础的环境类型 REACT_APP_ENV <code>development</code>，<code>staging</code>， <code>production</code> 。变量我们统一在 <code>src/config/env.*.ts</code> 里进行管理</p><p><code>question:</code> 为什么要在 <code>config</code> 中新建三个文件，而不是直接写在环境变量文件里呢？</p><ul><li><p><strong>修改变量方便，无需重新启动项目</strong></p></li><li><p><strong>引入方式更符合模块化标准</strong></p></li></ul><p>config/index.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据build命令指定的环境，引入不同配置</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./env.'</span> + process.env.REACT_APP_ENV)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config.default</span><br></pre></td></tr></table></figure><p>每种环境单独去配置公共变量，以测试环境配置为例</p><p><code>config/.env.development.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试环境配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ENV_TYPE: <span class="string">'测试环境'</span>,</span><br><span class="line">  BASE_URL: <span class="string">'//test.xxx.com'</span> <span class="comment">// api请求地址</span></span><br><span class="line">  OTHER_GLOBAL_VAR: <span class="string">'xxx'</span> <span class="comment">// 可添加自定义的公共变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据环境变量不同，<code>config</code> 配置就会不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'@/config'</span></span><br><span class="line"><span class="built_in">console</span>.info(config)</span><br><span class="line"><span class="comment">// config</span></span><br><span class="line">&#123;</span><br><span class="line">  ENV_TYPE: <span class="string">'测试环境'</span>,</span><br><span class="line">  BASE_URL: <span class="string">'//test.xxx.com'</span></span><br><span class="line">  OTHER_GLOBAL_VAR: <span class="string">'xxx'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#top">▲  回顶部</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🎉 &lt;code&gt;react&lt;/code&gt; 移动端开发脚手架，技术栈 &lt;code&gt;react&lt;/code&gt; + &lt;code&gt;antd-moblie&lt;/code&gt; + &lt;code&gt;typescript&lt;/code&gt; + &lt;code&gt;react-router&lt;/code&gt; + &lt;code&gt;redux&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用lottie-web制作高性能动画</title>
    <link href="https://yechuanjie.github.io/blog//lottie/"/>
    <id>https://yechuanjie.github.io/blog//lottie/</id>
    <published>2019-07-31T12:35:32.000Z</published>
    <updated>2024-06-28T10:05:01.730Z</updated>
    
    <content type="html"><![CDATA[<p>🌾 <code>Lottie</code> 是一个库，用于解析使用 <a href="https://www.adobe.com/cn/products/aftereffects.html" target="_blank" rel="noopener">AE</a> 制作的动画（动画需要通过 AE 中的 bodymovin 插件将其导出为 json 数据格式），支持<code>web</code>、<code>ios</code>、<code>android</code> 和 <code>react native</code>。</p><a id="more"></a><p>想提前看下效果的小伙伴请看<a href="https://yechuanjie.github.io/lottie_demo">这里~</a></p><h3 id="Lottie-简介"><a href="#Lottie-简介" class="headerlink" title="Lottie 简介"></a>Lottie 简介</h3><p><a href="http://airbnb.io/lottie/" target="_blank" rel="noopener">Lottie 官网</a></p><blockquote><p> 这里主要介绍 Lottie 的 web 版本 <strong>lottie-web</strong> 库，它可以解析导出的动画 json 文件，并将其以 svg 或者 canvas 的方式将动画绘制到页面中。</p></blockquote><h3 id="为什么使用-Lottie"><a href="#为什么使用-Lottie" class="headerlink" title="为什么使用 Lottie"></a>为什么使用 Lottie</h3><p>目前多帧动画一般的实现方式是：</p><ul><li>前端实现<code>svg、canvas</code>动画（实现成本较高、维护成本高）</li><li>设计师切<code>gif</code>（文件较大、容易有锯齿）</li><li><code>png</code>序列帧（文件较大、容易有锯齿）</li></ul><blockquote><p>目前的动画实现方案有着各自的问题，所以我们需要寻找一种更加简单、高效、性能高的动画方案。airbnb 的 Lottie 是一套良好的动画解决方案。</p></blockquote><h3 id="Lottie-的优势"><a href="#Lottie-的优势" class="headerlink" title="Lottie 的优势"></a>Lottie 的优势</h3><p>Lottie 方法方案是由设计师出动画，导出为 json，给前端解析。所以，使用 Lottie 方案的好处在于：</p><ul><li>动画由设计使用专业的动画制作工具<code>Adobe After Effects</code>来实现，使动画实现更加方便，动画效果也更好；</li><li>前端可以方便的调用动画，并对动画进行控制，减少前端动画工作量；</li><li>设计制作动画，前端展现动画，专业人做专业事，分工合理；</li><li>还原程度百分之百；</li><li>使用 lottie 方案，json 文件大小会比 gif 文件小很多，性能也会更好。</li></ul><h3 id="Lottie-的不足"><a href="#Lottie-的不足" class="headerlink" title="Lottie 的不足"></a>Lottie 的不足</h3><ul><li>lottie-web 文件比较大，lottie.js 大小为 532k，轻量版压缩后也有 150k，经过 gzip 后，大小为 43k。</li><li>如果设计师建了很多的图层，可能仍然有 json 文件较大的问题，需要设计师遵循一定的设计规范。</li></ul><h3 id="lottie-web-使用方式"><a href="#lottie-web-使用方式" class="headerlink" title="lottie-web 使用方式"></a>lottie-web 使用方式</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p><code>npm install lottie-web</code> or <code>yarn add lottie-web</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lottie <span class="keyword">from</span> <span class="string">'lottie-web'</span>;</span><br><span class="line"><span class="keyword">import</span> animationData <span class="keyword">from</span> <span class="string">'animationData.json'</span>; <span class="comment">// 使用本地资源</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animation = lottie.loadAnimation(&#123;</span><br><span class="line">  container: element <span class="keyword">as</span> Element, <span class="comment">// the dom element that will contain the animation</span></span><br><span class="line">  renderer: <span class="string">'svg'</span>,</span><br><span class="line">  name: name,</span><br><span class="line">  loop: <span class="literal">true</span>,</span><br><span class="line">  autoplay: <span class="literal">true</span>,</span><br><span class="line">  animationData</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 添加事件</span></span><br><span class="line">animation.addEventListener(<span class="string">'enterFrame'</span>, <span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>loadAnimation</code>参数定义：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> AnimationConfig = &#123;</span><br><span class="line">  container: Element; <span class="comment">//动画容器</span></span><br><span class="line">  renderer?: <span class="string">'svg'</span> | <span class="string">'canvas'</span> | <span class="string">'html'</span>; <span class="comment">//渲染方式</span></span><br><span class="line">  loop?: <span class="built_in">boolean</span> | <span class="built_in">number</span>; <span class="comment">//循环</span></span><br><span class="line">  autoplay?: <span class="built_in">boolean</span>; <span class="comment">//自动播放</span></span><br><span class="line">  name?: <span class="built_in">string</span>; <span class="comment">//动画名字</span></span><br><span class="line">  rendererSettings?:</span><br><span class="line">    | SVGRendererConfig</span><br><span class="line">    | CanvasRendererConfig</span><br><span class="line">    | HTMLRendererConfig; <span class="comment">// 渲染设置</span></span><br><span class="line">  path?: <span class="built_in">string</span>; <span class="comment">// 动画json路径</span></span><br><span class="line">  animationData?: <span class="built_in">any</span>; <span class="comment">//本地动画json数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始化完成后，可以对<code>animation</code>对象添加事件以及对动画进行控制</p><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p><code>调用方式</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">animation.addEventeListener(<span class="string">'event'</span>, info =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(info);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>enterFrame</td><td>播放每一帧动画的时候触发</td></tr><tr><td>loopComplete</td><td>当前循环播放完成触发</td></tr><tr><td>complete</td><td>动画播放完成触发</td></tr><tr><td>segmentStart</td><td>开始播放一个动画片段的时候触发</td></tr><tr><td>destroy</td><td>动画销毁时触发</td></tr></tbody></table><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p><code>调用方式</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animation.play();</span><br><span class="line">animation.setSpeed(<span class="number">1.5</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法名</th><th>参数及返回类型</th><th>描述</th></tr></thead><tbody><tr><td>play</td><td>(): void</td><td>播放</td></tr><tr><td>stop</td><td>(): void</td><td>停止并回到第 0 帧</td></tr><tr><td>pause</td><td>(): void</td><td>暂停</td></tr><tr><td>setLocationHref</td><td>(href: string): void</td><td>设置本地资源路径</td></tr><tr><td>setSpeed</td><td>(speed: number): void</td><td>设置动画播放速速</td></tr><tr><td>goToAndPlay</td><td>(value: number, isFrame?: boolean): void</td><td>前进到传入帧并继续播放</td></tr><tr><td>goToAndStop</td><td>(value: number, isFrame?: boolean): void</td><td>前进到传入帧并停止播放</td></tr><tr><td>setDirection</td><td>(direction: AnimationDirection): void</td><td>设置动画方向</td></tr><tr><td>playSegments</td><td>(segments: [], forceFlag?: boolean): void</td><td>播放指定帧数组的动画;</td></tr><tr><td>destroy</td><td>(): void</td><td>主动销毁动画</td></tr><tr><td>getDuration</td><td>(inFrames?: boolean): number</td><td>获取动画时长，可按帧或按秒返回</td></tr></tbody></table><h3 id="使用全球设计师分享的动画"><a href="#使用全球设计师分享的动画" class="headerlink" title="使用全球设计师分享的动画"></a>使用全球设计师分享的动画</h3><blockquote><p>我们可以在 <a href="https://lottiefiles.com/" target="_blank" rel="noopener">lottiefiles</a> 上看到来自全球优秀设计师们分享的动画，并十分简单的使用它。</p></blockquote><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><h4 id="加载远程-json-文件"><a href="#加载远程-json-文件" class="headerlink" title="加载远程 json 文件"></a>加载远程 json 文件</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source =</span><br><span class="line">  <span class="string">'https://assets1.lottiefiles.com/datafiles/AembVTvov5PkTSJ/data.json'</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载远程json文件</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; sourceurl</span></span><br><span class="line"><span class="comment"> * @returns 返回json对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> loadResource = <span class="keyword">async</span> (sourceurl: <span class="built_in">string</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(sourceurl);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;;</span><br><span class="line">loadResource(<span class="built_in">String</span>(source)).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 加载完成后初始化</span></span><br><span class="line">  <span class="keyword">const</span> animation = lottie.loadAnimation(&#123;</span><br><span class="line">    container: element <span class="keyword">as</span> Element, <span class="comment">// the dom element that will contain the animation</span></span><br><span class="line">    renderer: <span class="string">'svg'</span>,</span><br><span class="line">    name: name,</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    autoplay: <span class="literal">true</span>,</span><br><span class="line">    animationData: json,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>###<a href="https://yechuanjie.github.io/lottie_demo">点击查看demo</a></p><p>###<a href="https://github.com/Yechuanjie/lottie_demo" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🌾 &lt;code&gt;Lottie&lt;/code&gt; 是一个库，用于解析使用 &lt;a href=&quot;https://www.adobe.com/cn/products/aftereffects.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AE&lt;/a&gt; 制作的动画（动画需要通过 AE 中的 bodymovin 插件将其导出为 json 数据格式），支持&lt;code&gt;web&lt;/code&gt;、&lt;code&gt;ios&lt;/code&gt;、&lt;code&gt;android&lt;/code&gt; 和 &lt;code&gt;react native&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://yechuanjie.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://yechuanjie.github.io/blog/tags/JavaScript/"/>
    
      <category term="动画" scheme="https://yechuanjie.github.io/blog/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Taro初探</title>
    <link href="https://yechuanjie.github.io/blog//Taro/"/>
    <id>https://yechuanjie.github.io/blog//Taro/</id>
    <published>2019-02-21T13:18:11.000Z</published>
    <updated>2024-06-28T10:05:01.730Z</updated>
    
    <content type="html"><![CDATA[<p>👽 <code>Taro</code> [‘tɑ:roʊ]，泰罗·奥特曼，宇宙警备队总教官，实力最强的奥特曼。多端统一开发框架，支持用 React 的开发方式编写一次代码，生成能运行在 <code>小程序端</code>、<code>H5</code>、<code>React Native</code> 等各平台的应用。</p><a id="more"></a><h3 id="JSX-篇"><a href="#JSX-篇" class="headerlink" title="JSX 篇"></a>JSX 篇</h3><h4 id="jsx-支持情况"><a href="#jsx-支持情况" class="headerlink" title="jsx 支持情况"></a>jsx 支持情况</h4><ul><li>不能使用 <strong>Array#map</strong> 之外的方法操作 JSX 数组</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">numbers</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Taro中这里必须用map</span></span><br><span class="line">  <span class="keyword">if</span> (someCase) &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;View /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>不能在 JSX 参数中使用<strong>匿名函数</strong></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;View</span><br><span class="line">  onClick=&#123;() =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.openPic;</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;&lt;/View&gt;</span><br></pre></td></tr></table></figure><ul><li>暂不支持在 render() 之外的方法定义 JSX<br>假设现在页面中有一个音乐组件，不能这样使用</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> music = <span class="built_in">require</span>(<span class="string">'../assets/music.mp3'</span>);</span><br><span class="line"><span class="keyword">const</span> loop = <span class="literal">true</span>;</span><br><span class="line">musicComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Audio src=&#123;music&#125; loop=&#123;loop&#125; /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &#123;<span class="keyword">this</span>.musicComponent()&#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不能在 JSX 参数中使用对象展开符</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;View &#123;...this.props&#125; /&gt;</span><br></pre></td></tr></table></figure><ul><li><p>不支持无状态组件</p><p>由于微信的 template 能力有限，不支持动态传值和函数，Taro 暂时只支持一个文件只定义一个组件。为了避免开发者疑惑，暂时不支持定义<strong>无状态组件</strong>。</p></li></ul><h4 id="所有元素组件化"><a href="#所有元素组件化" class="headerlink" title="所有元素组件化"></a>所有元素组件化</h4><ul><li><p>不能使用 html 标签，所有标签以<strong>组件</strong>形式书写。Taro 实现了以微信小程序组件库为标准，结合 jsx 语法规范，定制了一套<a href="https://nervjs.github.io/taro/docs/components-desc.html" target="_blank" rel="noopener">组件库</a>，在不同的端上，会使用不同端的对应组件。</p></li><li><p>组件名不能和页面名相同。</p></li></ul><hr><h3 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h3><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><p>项目初始后会默认自带微信小程序的配置文件<strong>project.config.js</strong>。<br>打包成其他平台小程序前，需要对应在根目录添加对应配置文件，否则运行报错。</p><ul><li>微信小程序，<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html?search-key=%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">project.config.json</a></li><li>百度智能小程序，<a href="https://smartprogram.baidu.com/docs/develop/devtools/projectconfig/" target="_blank" rel="noopener">project.swan.json</a></li><li>头条小程序，project.tt.json，文档暂无，大部分字段与微信小程序一致</li><li>支付宝小程序，无</li></ul><hr><h3 id="样式篇"><a href="#样式篇" class="headerlink" title="样式篇"></a>样式篇</h3><h4 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h4><p>如果只需要兼容<strong>小程序</strong>以及<strong>h5 端</strong>，基本上所有 css 属性都能使用。</p><p>如果要支持 <strong>React Native</strong> 端，必须采用 <strong>Flex</strong> 布局，并且样式选择器仅支持<strong>类选择器</strong>，且不支持 <strong>组合选择器</strong>。以下写法都是不支持的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span><span class="selector-class">.button_theme_islands</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> ~ <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React Native 端支持的 css 属性较少，比如不支持<strong>background-image</strong>，只能使用<strong>Image</strong>组件，配合 Flex 布局来实现。<strong>box-shadow</strong>不支持，position 只支持<strong>absolute</strong>和<strong>relative</strong>。 更多属性，见详细的<a href="https://reactnative.cn/docs/layout-props/" target="_blank" rel="noopener">css 属性列表</a>。</p><h4 id="编译成-React-Native"><a href="#编译成-React-Native" class="headerlink" title="编译成 React-Native"></a>编译成 React-Native</h4><p>一个简单的按钮，css 样式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.back</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back_btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">background</span>: cadetblue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">color</span>: aliceblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译之后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; StyleSheet &#125; <span class="keyword">from</span> <span class="string">"react-native"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> StyleSheet.create(&#123;</span><br><span class="line">  back: &#123;</span><br><span class="line">    width: <span class="string">"100%"</span>,</span><br><span class="line">    marginTop: <span class="number">250</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  back_btn: &#123;</span><br><span class="line">    width: <span class="number">150</span>,</span><br><span class="line">    height: <span class="number">50</span>,</span><br><span class="line">    textAlign: <span class="string">"center"</span>,</span><br><span class="line">    lineHeight: <span class="number">50</span>,</span><br><span class="line">    fontSize: <span class="number">25</span>,</span><br><span class="line">    marginTop: <span class="number">0</span>,</span><br><span class="line">    marginRight: <span class="string">"auto"</span>,</span><br><span class="line">    marginBottom: <span class="number">0</span>,</span><br><span class="line">    marginLeft: <span class="string">"auto"</span>,</span><br><span class="line">    backgroundColor: <span class="string">"cadetblue"</span>,</span><br><span class="line">    borderRadius: <span class="number">35</span>,</span><br><span class="line">    color: <span class="string">"aliceblue"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>React Native 中，会使用 StyleSheet.create 来集中定义组件的样式。<a href="https://reactnative.cn/docs/style/" target="_blank" rel="noopener">了解更多</a></p><h4 id="CSS-单位"><a href="#CSS-单位" class="headerlink" title="CSS 单位"></a>CSS 单位</h4><p>以 750px 设计稿为基准，css 样式以 px 为单位，如 750px 设计稿，一个按钮 200*100。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>设计稿尺寸可以在 config 文件中配置<strong>designWidth</strong>和<strong>deviceRatio</strong>字段。</p><blockquote><p>Taro 会根据不同平台来编译 px，小程序中 px 转换成 rpx，h5 中则转换成 rem，react-native 中转换成 pt。如果不希望单位被转换，可以通过写成 Px 或 PX 来避免。</p></blockquote><h4 id="默认样式"><a href="#默认样式" class="headerlink" title="默认样式"></a>默认样式</h4><p>一些默认组件如<strong>button</strong>、<strong>image</strong>的默认样式在各个平台上不一致，开发前需要重置样式。</p><h3 id="实际项目中遇到的问题"><a href="#实际项目中遇到的问题" class="headerlink" title="实际项目中遇到的问题"></a>实际项目中遇到的问题</h3><ul><li><p>h5 中使用第三方 js<br>h5 端可能会使用到三方 js 库，如果在小程序环境中，遇到 window，document 之类的变量，则会导致错误，解决方案是通过<strong>Taro.getEnv()</strong>判断环境后，按需引入三方库</p></li><li><p>audio 问题<br>微信小程序中，音频会以<strong>createAudioContext</strong>来处理，相关音频的操作，也只能使用<strong>playVoice</strong>，<strong>pauseVoice</strong>等方法。这些方法在 h5，react native 及其他部分小程序中都是不支持的。因此只能通过不同的环境做不同的处理。</p></li></ul><p>以下是点击音乐图标后，控制音乐暂停/播放的方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">toggleMusic = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    musicStatus: !<span class="keyword">this</span>.state.musicStatus,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> audio;</span><br><span class="line">  <span class="keyword">if</span> (Taro.getEnv() === <span class="string">'WEAPP'</span>) &#123;</span><br><span class="line">      audio = Taro.createAudioContext(<span class="string">'audio'</span>);</span><br><span class="line">      <span class="keyword">this</span>.state.musicStatus ? Taro.pauseVoice() : Taro.playVoice();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Taro.getEnv() === <span class="string">'WEB'</span>)&#123;</span><br><span class="line">      audio = <span class="built_in">document</span>.querySelector(<span class="string">'audio'</span>);</span><br><span class="line">      <span class="keyword">this</span>.state.musicStatus ? audio.pause() : audio.play();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      audio = ... <span class="comment">//对应平台获取audio对象的方法</span></span><br><span class="line">      <span class="keyword">this</span>.state.musicStatus ? audio.pause() : audio.play();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="React-Native-平台调试"><a href="#React-Native-平台调试" class="headerlink" title="React Native 平台调试"></a>React Native 平台调试</h3><p><img src="https://qiniu.image.cq-wnl.com/content/20190228f9a18bfcb9784471ac1e862b71b6cde7.png" alt="chrome"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总体来说，Taro 的开发体验还是不错的。在编译不同平台的时候，可以通过配置 config/index.js 中的 outputRoot，来达到同时编译多个平台的代码的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  outputRoot: <span class="string">`dist/<span class="subst">$&#123;process.env.TARO_ENV&#125;</span>`</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Taro 对小程序端的兼容性基本一致，按照 Taro 规范的语法和组件来书写项目，基本能实现各端小程序以及 h5 端的统一开发。react native 端由于环境特殊，存在许多特殊的 api 无法通用的情况，只能通过获取当前环境来做兼容处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;👽 &lt;code&gt;Taro&lt;/code&gt; [‘tɑ:roʊ]，泰罗·奥特曼，宇宙警备队总教官，实力最强的奥特曼。多端统一开发框架，支持用 React 的开发方式编写一次代码，生成能运行在 &lt;code&gt;小程序端&lt;/code&gt;、&lt;code&gt;H5&lt;/code&gt;、&lt;code&gt;React Native&lt;/code&gt; 等各平台的应用。&lt;/p&gt;
    
    </summary>
    
      <category term="多端统一" scheme="https://yechuanjie.github.io/blog/categories/%E5%A4%9A%E7%AB%AF%E7%BB%9F%E4%B8%80/"/>
    
    
      <category term="Taro" scheme="https://yechuanjie.github.io/blog/tags/Taro/"/>
    
      <category term="React" scheme="https://yechuanjie.github.io/blog/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>写一个简单的vue双向数据绑定</title>
    <link href="https://yechuanjie.github.io/blog//vue_data_binding/"/>
    <id>https://yechuanjie.github.io/blog//vue_data_binding/</id>
    <published>2018-07-24T11:19:30.000Z</published>
    <updated>2024-06-28T10:05:01.730Z</updated>
    
    <content type="html"><![CDATA[<p>🌱 <code>vue</code> 双向数据绑定原理：<code>监听器</code>、<code>解析器</code>、<code>观察者</code>。</p><a id="more"></a><h3 id="MVVM双向数据绑定流程"><a href="#MVVM双向数据绑定流程" class="headerlink" title="MVVM双向数据绑定流程"></a>MVVM双向数据绑定流程</h3><p><img src="https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/64201803.jpg" alt="MVVM双向数据绑定流程"></p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-click</span>=<span class="string">"decrease"</span>&gt;</span> - <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"number"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-click</span>=<span class="string">"increment"</span>&gt;</span> + <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-bind</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/92465283.jpg" alt="html"></p><h3 id="初始化mvvm"><a href="#初始化mvvm" class="headerlink" title="初始化mvvm"></a>初始化mvvm</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyVue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._init(options);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化, 继承所有options</span></span><br><span class="line">MyVue.prototype._init = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(options);</span><br><span class="line">  <span class="keyword">this</span>.$options = options;</span><br><span class="line">  <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</span><br><span class="line">  <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">  <span class="keyword">this</span>.$methods = options.methods;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._binding = &#123;&#125;; <span class="comment">// _binding保存着model与view的映射关系，也就是Watcher的实例。当model改变时，会触发其中的指令类更新，保证view也能实时更新</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听器</span></span><br><span class="line">  <span class="keyword">this</span>._observe(<span class="keyword">this</span>.$data);</span><br><span class="line">  <span class="comment">// 解析器</span></span><br><span class="line">  <span class="keyword">this</span>._compile(<span class="keyword">this</span>.$el);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实现监听器-Observe"><a href="#实现监听器-Observe" class="headerlink" title="实现监听器 Observe"></a>实现监听器 Observe</h3><blockquote><p>Observer 遍历数据对象。<br>如果对某个数据赋值，会触发setter，就能监听数据变化<br>如果获取某个数据，会触发getter</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">MyVue.prototype._observe = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">let</span> value;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="keyword">this</span>._binding[key] = &#123;</span><br><span class="line">          _directives: []</span><br><span class="line">      &#125;</span><br><span class="line">      value = data[key];</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._observe(value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> binding = <span class="keyword">this</span>._binding[key];</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">        configurable: <span class="literal">true</span>, <span class="comment">// 是否可以再定义</span></span><br><span class="line">        get: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">`获取<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">          <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="params">newValue</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">`更新<span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">          <span class="keyword">if</span> (value !== newValue) &#123;</span><br><span class="line">            value = newValue;</span><br><span class="line">            binding._directives.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item.update();</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实现解析器-Compile"><a href="#实现解析器-Compile" class="headerlink" title="实现解析器 Compile"></a>实现解析器 Compile</h3><blockquote><p>compile方法主要做以下事情：</p><ol><li>解析模板指令</li><li>将模板中的变量替换成数据</li><li>初始化渲染视图并且给每个指令对应的dom绑定update函数</li><li>数据变化，通知视图更新</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// root为根元素</span></span><br><span class="line">MyVue.prototype._compile = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line"> <span class="keyword">let</span> nodes = root.children;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; ++i) &#123;</span><br><span class="line">     <span class="keyword">let</span> node = nodes[i];</span><br><span class="line">     <span class="keyword">if</span> (node.children.length) &#123;</span><br><span class="line">        _this._compile(node);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//解析模板指令&amp;将模板中的变量替换成数据</span></span><br><span class="line">     <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-click'</span>)) &#123;</span><br><span class="line">        node.onclick = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> attrVal = node.getAttribute(<span class="string">'v-click'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(attrVal);</span><br><span class="line">            <span class="keyword">return</span> _this.$methods[attrVal].bind(_this.$data);</span><br><span class="line">        &#125;)();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 绑定数据模型</span></span><br><span class="line">     <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-model'</span>) &amp;&amp; (node.tagName === <span class="string">'INPUT'</span> || node.tagName === <span class="string">'TEXTAREA'</span>)) &#123;</span><br><span class="line">         node.addEventListener(<span class="string">'input'</span>, (<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> attrVal = node.getAttribute(<span class="string">'v-model'</span>);</span><br><span class="line">            _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span><br><span class="line">                <span class="string">'input'</span>,</span><br><span class="line">                node,</span><br><span class="line">                _this,</span><br><span class="line">                attrVal,</span><br><span class="line">                <span class="string">'value'</span></span><br><span class="line">            ))</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                _this.$data[attrVal] = nodes[key].value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(i));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-bind'</span>)) &#123;</span><br><span class="line">         <span class="keyword">let</span> attrVal = node.getAttribute(<span class="string">'v-bind'</span>);</span><br><span class="line">         _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span><br><span class="line">            <span class="string">'text'</span>,</span><br><span class="line">            node,</span><br><span class="line">            _this,</span><br><span class="line">            attrVal,</span><br><span class="line">            <span class="string">'innerHTML'</span></span><br><span class="line">         ))</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现观察者-Watcher"><a href="#实现观察者-Watcher" class="headerlink" title="实现观察者 Watcher"></a>实现观察者 Watcher</h3><blockquote><p>每次数据发生变化 都会触发Watcher去更新视图</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现Watcher监听</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; name 指令名称</span></span><br><span class="line"><span class="comment"> * @param &#123;Element&#125; el 指令对应的dom元素</span></span><br><span class="line"><span class="comment"> * @param &#123;Instance&#125; vm 指令所属的myVue实例</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; exp 指令对应的值</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; attr 绑定的属性值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">name, el, vm, exp, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.el = el;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="keyword">this</span>.exp = exp;</span><br><span class="line">    <span class="keyword">this</span>.attr = attr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Watcher.prototype.update = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.el[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.vm.$data[<span class="keyword">this</span>.exp]; <span class="comment">// 当data对应的值(exp)改变时，修改当前元素的属性，以保证dom更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用MyVue"><a href="#调用MyVue" class="headerlink" title="调用MyVue"></a>调用MyVue</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 MyVue</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> app = <span class="keyword">new</span> MyVue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      number: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      increment: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.number++;</span><br><span class="line">      &#125;,</span><br><span class="line">      decrease: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.number--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/47264916.jpg" alt="最终效果"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。</li><li>Vue2.x版本双向数据绑定的核心是<strong>Object.defineProperty</strong>方法，劫持对象的访问器，在属性值发生变化时我们可以获取变化,从而进行进一步操作。</li><li>通过监听器和解析器的协作，触发Watcher更新视图</li></ol><blockquote><p>在即将到来的Vue3.x中，将会使用ES6的<a href="http://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noopener">Proxy</a>代替<strong>Object.defineProperty</strong>，它可以直接劫持整个对象，并返回一个新对象，不管是操作便利程度还是底层功能上都远强于Object.defineProperty。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🌱 &lt;code&gt;vue&lt;/code&gt; 双向数据绑定原理：&lt;code&gt;监听器&lt;/code&gt;、&lt;code&gt;解析器&lt;/code&gt;、&lt;code&gt;观察者&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://yechuanjie.github.io/blog/categories/Vue/"/>
    
    
      <category term="JavaScript" scheme="https://yechuanjie.github.io/blog/tags/JavaScript/"/>
    
      <category term="Vue" scheme="https://yechuanjie.github.io/blog/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>试着不使用if语句？</title>
    <link href="https://yechuanjie.github.io/blog//not_if/"/>
    <id>https://yechuanjie.github.io/blog//not_if/</id>
    <published>2018-04-17T17:09:19.000Z</published>
    <updated>2024-06-28T10:05:01.730Z</updated>
    
    <content type="html"><![CDATA[<p>🍒 你有尝试过不用 <code>if</code> 语句写代码吗？</p><a id="more"></a><p>用if会存在什么问题吗？不会。相反，<code>if</code> 语句能十分高效的判断条件是否满足。<br>那这篇文章还有必要看吗？别急。还有一个概念，叫做<strong>代码即数据</strong>。</p><h3 id="试着不使用if"><a href="#试着不使用if" class="headerlink" title="试着不使用if"></a>试着不使用if</h3><blockquote><p><strong>if</strong>是我们平时编程最常用的语句之一。if语句的替代品还有<strong>switch</strong>语句、<strong>三目运算</strong>等语句。它们的实质都是判断条件为真时执行代码。那么当我们不使用这些语句去解决问题时的意义何在呢？</p></blockquote><p>如果写代码的时候不能使用if，我们就会去寻找其他的办法来解决，首先，这对于自己的思维转换有很大的提升，其次，当你用另外的方法解决之后，你又get到了新的技能。</p><!-- ### 不使用if应该怎么做 --><h3 id="示例1：统计数组中偶数的数量"><a href="#示例1：统计数组中偶数的数量" class="headerlink" title="示例1：统计数组中偶数的数量"></a>示例1：统计数组中偶数的数量</h3><blockquote><p>假设有一个数组，我们需要统计里面的偶数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">-6</span>]</span><br></pre></td></tr></table></figure><h4 id="使用if"><a href="#使用if" class="headerlink" title="使用if"></a>使用if</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(item % <span class="number">2</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(count) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="不使用if（方法一）"><a href="#不使用if（方法一）" class="headerlink" title="不使用if（方法一）"></a>不使用if（方法一）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArr = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Math</span>.abs(item % <span class="number">2</span>) === <span class="number">0</span> )</span><br><span class="line"><span class="built_in">console</span>.log(newArr.length) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><blockquote><p>使用filter过滤满足条件的数据，返回新数组的长度即可。</p></blockquote><h4 id="不使用if（方法二）"><a href="#不使用if（方法二）" class="headerlink" title="不使用if（方法二）"></a>不使用if（方法二）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> count += <span class="built_in">Math</span>.abs(item % <span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr.length - count) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><blockquote><p>利用了偶数算法的返回值始终为0或1，得到不是偶数的count，使用数组长度减去count即可。</p></blockquote><hr><h3 id="示例二：判断是否是夏季"><a href="#示例二：判断是否是夏季" class="headerlink" title="示例二：判断是否是夏季"></a>示例二：判断是否是夏季</h3><blockquote><p>指定一个月份（如：5），判断是否属于夏季（7，8，9月），是则返回’summer’, 否则返回’other_season’</p></blockquote><h4 id="使用if-1"><a href="#使用if-1" class="headerlink" title="使用if"></a>使用if</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> summerOrOther = <span class="function">(<span class="params">month</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (month &lt;= <span class="number">9</span> &amp;&amp; month &gt;= <span class="number">7</span>) <span class="keyword">return</span> <span class="string">'summer'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'other_season'</span>;</span><br><span class="line">&#125;</span><br><span class="line">summerOrOther(<span class="number">7</span>); <span class="comment">//summer</span></span><br><span class="line">summerOrOther(<span class="number">10</span>); <span class="comment">//other_season</span></span><br></pre></td></tr></table></figure><h4 id="不使用if"><a href="#不使用if" class="headerlink" title="不使用if"></a>不使用if</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> condition = &#123;</span><br><span class="line">    <span class="number">7</span>: <span class="string">'summer'</span>,</span><br><span class="line">    <span class="number">8</span>: <span class="string">'summer'</span>,</span><br><span class="line">    <span class="number">9</span>: <span class="string">'summer'</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'other_season'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> summerOrOther = <span class="function"><span class="params">month</span> =&gt;</span> condition[month] || condition[<span class="string">'default'</span>]</span><br><span class="line">summerOrOther(<span class="number">9</span>); <span class="comment">//summer</span></span><br><span class="line">summerOrOther(<span class="number">10</span>); <span class="comment">//other_season</span></span><br></pre></td></tr></table></figure><blockquote><p>该方法并没有什么简单之处。但这样实现更能体现“代码即数据”的理念。一切操作都是对数据的处理，最后输出数据。</p></blockquote><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>这两个简单示例只是说明if(switch, 三目运算符)语句可以用其他方式实现，仅供参考和学习。但if语句仍然是代码中高使用率的语句，建议根据实际需求来合理使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🍒 你有尝试过不用 &lt;code&gt;if&lt;/code&gt; 语句写代码吗？&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://yechuanjie.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://yechuanjie.github.io/blog/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://yechuanjie.github.io/blog/tags/ES6/"/>
    
  </entry>
  
</feed>
