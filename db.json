{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/projects/index.md","path":"projects/index.md","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/crash_cheat.js","path":"js/src/crash_cheat.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/runtime.js","path":"js/src/runtime.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/寿司.png","path":"images/cute_icon/寿司.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/塔可.png","path":"images/cute_icon/塔可.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/布丁.png","path":"images/cute_icon/布丁.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/开心果.png","path":"images/cute_icon/开心果.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/披萨.png","path":"images/cute_icon/披萨.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/棒冰.png","path":"images/cute_icon/棒冰.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/热狗.png","path":"images/cute_icon/热狗.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/爆米花.png","path":"images/cute_icon/爆米花.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/碧根果.png","path":"images/cute_icon/碧根果.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/牛油果.png","path":"images/cute_icon/牛油果.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/甜甜圈.png","path":"images/cute_icon/甜甜圈.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/腰果.png","path":"images/cute_icon/腰果.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/草莓.png","path":"images/cute_icon/草莓.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/蛋黄酥.png","path":"images/cute_icon/蛋黄酥.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/蛋糕.png","path":"images/cute_icon/蛋糕.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/饼干.png","path":"images/cute_icon/饼干.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/薯片.png","path":"images/cute_icon/薯片.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/马卡龙.png","path":"images/cute_icon/马卡龙.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/麻薯.png","path":"images/cute_icon/麻薯.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cute_icon/面包.png","path":"images/cute_icon/面包.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"78641a2bd6e5ea339298f304b9d482061c3e5c30","modified":1594355892319},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1594355892528},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1594355892528},{"_id":"themes/next/.gitignore","hash":"1a798e82ea3b7d12766b2e739884b594eeb54a60","modified":1594355892529},{"_id":"themes/next/.gitattributes","hash":"e79f250a572bd0a7e711de8c5d69a05cbe384ec8","modified":1594355892528},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1594355892530},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1594355892530},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1594355892530},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1594355892531},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1594355892532},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1594355892531},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1594355892533},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1594355892531},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1594355892533},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1594355892532},{"_id":"themes/next/_config.yml","hash":"55ad0482ebff75a0dd27c4f702c940649ef7b1cf","modified":1594607605742},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1594355892568},{"_id":"source/_data/gallery.yml","hash":"f1760a57bc217a22c622b02d98e7135768f3ac1b","modified":1594355892321},{"_id":"source/_posts/Taro.md","hash":"1b6fe0c11eb348add39f34fe93d17039e5d35201","modified":1594779235926},{"_id":"source/_posts/lottie.md","hash":"d9617193f4900e01ae3b6735f680d9a0e6e8a567","modified":1594778850863},{"_id":"source/_posts/react-cli.md","hash":"255f40737a53e249ca9fb11c8f42404cdd394430","modified":1594778606062},{"_id":"source/about/index.md","hash":"00bb1a55308134c475fa3d246c5d630a2886c24d","modified":1594723414175},{"_id":"source/_posts/not_if.md","hash":"aca9735b203c04db27bd06d2f9730bd20f04243a","modified":1594779172778},{"_id":"source/friends/index.md","hash":"7983d0c01e443a31454c8d09196b1f15a51de2bd","modified":1594360255025},{"_id":"source/_posts/vue_data_binding.md","hash":"4c9ee3bc9f5ae3073e6577a55c942eb34acf6e9a","modified":1594779051294},{"_id":"source/gallery/index.md","hash":"1b8e3f4e7bc490f85888aa5795e0510ed1fd0757","modified":1594355892332},{"_id":"source/projects/index.md","hash":"3c5fbd02317b425c6fde81a844ffbb9f0673edd0","modified":1594355892333},{"_id":"source/tags/index.md","hash":"c7fe0d50d774060a7f61e5bed23313e1b0766705","modified":1594355892334},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1594355892528},{"_id":"source/categories/index.md","hash":"b0cd325fdd3033f4ecdfd29eafcd5dbd3acf34e2","modified":1594355892329},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1594355892529},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1594355892529},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1594355892529},{"_id":"themes/next/layout/_layout.swig","hash":"1286416410371c574cbeab4e4755dd5efc04d6d1","modified":1594355892540},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1594355892566},{"_id":"themes/next/layout/page.swig","hash":"61ff55cab263cf02d7dcac348d71702570987cac","modified":1594355892567},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1594355892567},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1594355892568},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1594355892568},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1594355892569},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1594355892570},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1594355892566},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1594355892567},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1594355892695},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1594355892696},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1594355892696},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1594355892534},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1594355892534},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1594355892535},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1594355892535},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1594355892534},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1594355892536},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1594355892536},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1594355892535},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1594355892536},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1594355892537},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1594355892538},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0a15fb5d9aea38b4e851db499bda5ece158d28c4","modified":1594355892538},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1594355892537},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1594355892538},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1594355892537},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1594355892539},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594355892613},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1594355892539},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1594355892539},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1594355892546},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d35226c43335d1fedbc02ae91f1fbb18182a5949","modified":1594355892543},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1594355892543},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1594355892543},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1594355892546},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1594355892546},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1594355892545},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1594355892560},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1594355892560},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1594355892562},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1594355892562},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1594355892562},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1594355892561},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1594355892561},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1594355892550},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1594355892550},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1594355892552},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"dc75b957c25157cb3eed20f9e4fe775dc6747a77","modified":1594355892540},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"98ad414529fd3fe916b8b3cef146bf28cb524f92","modified":1594355892541},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1594355892540},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1594355892542},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1594355892541},{"_id":"themes/next/layout/_macro/post.swig","hash":"d23f3ea144127f16ba7207e52233c801a079cdbc","modified":1594355892541},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"7c55d1e16e2ce5a2df1cf234c4bae8349fd6eb07","modified":1594355892542},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1594355892570},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1594355892570},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1594355892571},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1594355892571},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1594355892571},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1594355892572},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1594355892572},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1594355892573},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1594355892573},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1594355892612},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1594355892613},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1594355892614},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1594355892614},{"_id":"themes/next/source/images/avatar.png","hash":"24489fd316360b681f2e59349d382fd974964f5e","modified":1594355892614},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1594355892615},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1594355892616},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1594355892616},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1594355892618},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1594355892619},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1594355892620},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1594355892621},{"_id":"themes/next/source/images/favicon.ico","hash":"f10ccbc914c2dd048f4b12bc797e91c7bfaf3cc6","modified":1594355892628},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1594355892629},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1594355892628},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1594355892629},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1594355892629},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1594355892628},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1594355892629},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594355892551},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594355892551},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594355892602},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594355892603},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594355892611},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594355892612},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594355892602},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1594355892544},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1594355892547},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1594355892548},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1594355892545},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1594355892548},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1594355892548},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1594355892549},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1594355892557},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1594355892549},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1594355892549},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1594355892557},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1594355892558},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1594355892558},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1594355892559},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1594355892558},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1594355892560},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1594355892560},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1594355892559},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1594355892564},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1594355892564},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1594355892563},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1594355892565},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1594355892552},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1594355892554},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1594355892553},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1594355892554},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1594355892555},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"5e8c750db751fd346f7d4a22909da82ede7d800e","modified":1594355892554},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1594355892555},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1594355892556},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1594355892556},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1594355892555},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1594355892556},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1594355892556},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1594355892551},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1594355892551},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1594355892557},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1594355892552},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"d2fac407457307417dd3b0960737fd39ac5f9484","modified":1594355892602},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1594355892602},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1594355892603},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1594355892603},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1594355892611},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1594355892611},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d671ee6d1fe07e0859cda873904b445ddf2484d8","modified":1594355892612},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1594355892630},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1594355892630},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1594355892612},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1594355892631},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1594355892631},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1594355892632},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1594355892633},{"_id":"themes/next/source/js/src/crash_cheat.js","hash":"d74c569b96063ae7179cb5673b3855e1b43017c2","modified":1594355892631},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1594355892632},{"_id":"themes/next/source/js/src/runtime.js","hash":"ef6151219751ec4814a6941d5113635c15e00c58","modified":1594355892633},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1594355892634},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1594355892632},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1594355892634},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1594355892634},{"_id":"themes/next/source/images/cute_icon/寿司.png","hash":"24489fd316360b681f2e59349d382fd974964f5e","modified":1594355892621},{"_id":"themes/next/source/images/cute_icon/塔可.png","hash":"4353c941ff4e07015f1fa14eca3236013f97a5a2","modified":1594355892621},{"_id":"themes/next/source/images/cute_icon/布丁.png","hash":"8cf430dcafc82be86e71d121ed5ecd2cbd815de0","modified":1594355892622},{"_id":"themes/next/source/images/cute_icon/开心果.png","hash":"ecb2a8e78c29b2c3d1314f3dcfe0c3f1b98bda5d","modified":1594355892622},{"_id":"themes/next/source/images/cute_icon/披萨.png","hash":"7d7abf5ab2420a72888193204f11b41d87849480","modified":1594355892622},{"_id":"themes/next/source/images/cute_icon/棒冰.png","hash":"3f3f454da1a5f1d85212bb37532d0425b3737176","modified":1594355892623},{"_id":"themes/next/source/images/cute_icon/热狗.png","hash":"18868916394b6e716f2e0c7f4d5edd61b963cfc0","modified":1594355892623},{"_id":"themes/next/source/images/cute_icon/爆米花.png","hash":"828f7200cc5e0e6b6b44994d2cc251f2f8710329","modified":1594355892623},{"_id":"themes/next/source/images/cute_icon/碧根果.png","hash":"8092b8fae7565261a7d06a5efcda672b3b59d7e5","modified":1594355892624},{"_id":"themes/next/source/images/cute_icon/牛油果.png","hash":"a677213f5ac1a5cd33972cdaf9562b590e19b783","modified":1594355892624},{"_id":"themes/next/source/images/cute_icon/甜甜圈.png","hash":"337ee69c75c0e6e00af4488d6de7bf5bc0bf8663","modified":1594355892624},{"_id":"themes/next/source/images/cute_icon/腰果.png","hash":"aa1091dfa909ee29e4cf5490caee9d950bd87826","modified":1594355892625},{"_id":"themes/next/source/images/cute_icon/草莓.png","hash":"c99480967a7ea5095c0ba95b525193d6fd3dc078","modified":1594355892625},{"_id":"themes/next/source/images/cute_icon/蛋黄酥.png","hash":"dc3480e2d043b8471d9eb4ce67013af7ff686fef","modified":1594355892626},{"_id":"themes/next/source/images/cute_icon/蛋糕.png","hash":"4e624f387e917b8c22e34e354a49ec2f4f8c3e75","modified":1594355892626},{"_id":"themes/next/source/images/cute_icon/饼干.png","hash":"395aa1e7d0cae7477deb88b36c2bad80bc3b768e","modified":1594355892626},{"_id":"themes/next/source/images/cute_icon/薯片.png","hash":"4b3cab10a78d8f1baeafcb93768239e5f7ceb317","modified":1594355892625},{"_id":"themes/next/source/images/cute_icon/马卡龙.png","hash":"6d74a61c6e47e20f97c617023db2051248ed248d","modified":1594355892627},{"_id":"themes/next/source/images/cute_icon/麻薯.png","hash":"c2d950b43671b2e38f7a738abc4b97e61a89f5de","modified":1594355892628},{"_id":"themes/next/source/images/cute_icon/面包.png","hash":"a863c8ceda07bbea91dbfa7ee6e78b1b2f4e7e11","modified":1594355892626},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1594355892644},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1594355892645},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1594355892645},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1594355892653},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1594355892640},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1594355892644},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1594355892653},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1594355892654},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1594355892653},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1594355892656},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1594355892656},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1594355892656},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1594355892655},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1594355892656},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1594355892673},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1594355892678},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1594355892677},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1594355892674},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1594355892675},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1594355892676},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1594355892678},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1594355892675},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1594355892675},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1594355892679},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1594355892676},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1594355892679},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1594355892680},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1594355892680},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1594355892679},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1594355892680},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1594355892681},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1594355892681},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1594355892682},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1594355892681},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1594355892682},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1594355892683},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1594355892682},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1594355892683},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1594355892684},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1594355892685},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1594355892691},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1594355892694},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1594355892691},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1594355892695},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1594355892694},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1594355892684},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1594355892674},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1594355892563},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1594355892563},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1594355892574},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1594355892575},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1594355892575},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1594355892575},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1594355892580},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1594355892574},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1594355892592},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"17947ff4e819ea1e285c09ff237df714ccae9aaa","modified":1594355892600},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1594355892601},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1594355892601},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1594355892599},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1594355892600},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1594355892600},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1594355892601},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1594355892605},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1594355892605},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1594355892605},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1594355892605},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1594355892604},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1594355892606},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1594355892606},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1594355892606},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1594355892607},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1594355892608},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1594355892608},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1594355892608},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1594355892608},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1594355892609},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1594355892610},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1594355892610},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1594355892610},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1594355892609},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1594355892610},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1594355892633},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1594355892639},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1594355892637},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1594355892640},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1594355892655},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1594355892646},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1594355892646},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1594355892646},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1594355892647},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1594355892647},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1594355892651},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1594355892648},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1594355892654},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1594355892652},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1594355892652},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1594355892657},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1594355892658},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1594355892658},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1594355892690},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1594355892690},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1594355892639},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1594355892671},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1594355892672},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1594355892693},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1594355892576},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1594355892576},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1594355892577},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1594355892578},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1594355892578},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1594355892579},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1594355892578},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1594355892579},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1594355892577},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1594355892580},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"14a64dc78b1d76912243daf3f78d38c05812a178","modified":1594355892577},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1594355892581},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1594355892580},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1594355892582},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"440a1b1bf269a9bfd01a069203a6663220d87e07","modified":1594355892584},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1594355892580},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1594355892579},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1594355892581},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1594355892586},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1594355892582},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1594355892587},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1594355892587},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1594355892587},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1594355892588},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1594355892588},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1594355892588},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1594355892581},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1594355892587},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ac0bfaeac54df586936fe833e96c4182de04e5cb","modified":1594355892589},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1594355892585},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1594355892590},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1594355892589},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1594355892584},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1594355892591},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1594355892591},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1594355892593},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1594355892593},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1594355892592},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1594355892593},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1594355892591},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1594355892593},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1594355892589},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1594355892594},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1594355892595},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1594355892596},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1594355892591},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1594355892595},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1594355892595},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1594355892595},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1594355892597},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1594355892597},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1594355892594},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1594355892599},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1594355892599},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1594355892596},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1594355892590},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1594355892607},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1594355892607},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1594355892609},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1594355892636},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1594355892596},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1594355892636},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1594355892598},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1594355892636},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1594355892636},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1594355892636},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1594355892649},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1594355892651},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1594355892648},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1594355892649},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1594355892648},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1594355892649},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1594355892663},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1594355892670},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1594355892661},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1594355892643},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1594355892689},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1594355892667}],"Category":[{"name":"多端统一","_id":"ckclo9v7i00040wu544an64um"},{"name":"JavaScript","_id":"ckclo9v8o000b0wu5frp05oi4"},{"name":"Vue","_id":"ckclo9v9r000j0wu52e0io10e"}],"Data":[{"_id":"gallery","data":{"source":[{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/61933480.jpg","desc":"涂鸦"},{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/86403488.jpg","desc":"云南石林"}]}}],"Page":[{"title":"","date":"2017-12-01T11:50:57.000Z","comments":0,"notag":true,"_content":"\n<div>\n<h4 align=\"center\">🌴 一只喝可乐的猫</h4>\n</div>\n","source":"about/index.md","raw":"---\ntitle: \ndate: 2017-12-01 11:50:57\n\ncomments: false\nnotag: true\n---\n\n<div>\n<h4 align=\"center\">🌴 一只喝可乐的猫</h4>\n</div>\n","updated":"2020-07-14T10:43:34.175Z","path":"about/index.html","_id":"ckclo9v6500010wu5n3xfno9j","layout":"page","content":"<div><br><h4 align=\"center\">🌴 一只喝可乐的猫</h4><br></div>\n","site":{"data":{"gallery":{"source":[{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/61933480.jpg","desc":"涂鸦"},{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/86403488.jpg","desc":"云南石林"}]}}},"excerpt":"","more":"<div><br><h4 align=\"center\">🌴 一只喝可乐的猫</h4><br></div>\n"},{"date":"2019-01-31T11:15:14.000Z","layout":"true","type":"friends","_content":"\n\n>在**评论区**留下你的链接","source":"friends/index.md","raw":"---\ndate: 2019-01-31 11:15:14\nlayout : true\ntype: friends\n---\n\n\n>在**评论区**留下你的链接","updated":"2020-07-10T05:50:55.025Z","path":"friends/index.html","title":"","comments":1,"_id":"ckclo9v6d00030wu5cdl44d5s","content":"<blockquote>\n<p>在<strong>评论区</strong>留下你的链接</p>\n</blockquote>\n","site":{"data":{"gallery":{"source":[{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/61933480.jpg","desc":"涂鸦"},{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/86403488.jpg","desc":"云南石林"}]}}},"excerpt":"","more":"<blockquote>\n<p>在<strong>评论区</strong>留下你的链接</p>\n</blockquote>\n"},{"title":"标签","date":"2019-01-19T17:38:58.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-01-19 17:38:58\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-07-10T04:38:12.334Z","path":"tags/index.html","layout":"page","_id":"ckclo9v8800070wu5qasdyml2","content":"","site":{"data":{"gallery":{"source":[{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/61933480.jpg","desc":"涂鸦"},{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/86403488.jpg","desc":"云南石林"}]}}},"excerpt":"","more":""},{"date":"2020-07-10T04:38:12.332Z","layout":"true","type":"gallery","_content":"","source":"gallery/index.md","raw":"---\ndate: \nlayout: true\ntype: gallery\n---\n","updated":"2020-07-10T04:38:12.332Z","path":"gallery/index.html","title":"","comments":1,"_id":"ckclo9v8g00090wu5adnsqhsg","content":"","site":{"data":{"gallery":{"source":[{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/61933480.jpg","desc":"涂鸦"},{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/86403488.jpg","desc":"云南石林"}]}}},"excerpt":"","more":""},{"title":"分类","date":"2019-01-19T17:40:58.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-01-19 17:40:58\ntype: categories\ncomments: false\n---\n","updated":"2020-07-10T04:38:12.329Z","path":"categories/index.html","layout":"page","_id":"ckclo9v8r000d0wu5332dx6ri","content":"","site":{"data":{"gallery":{"source":[{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/61933480.jpg","desc":"涂鸦"},{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/86403488.jpg","desc":"云南石林"}]}}},"excerpt":"","more":""}],"Post":[{"title":"Taro初探","date":"2019-02-21T13:18:11.000Z","_content":"\n👽 `Taro` ['tɑ:roʊ]，泰罗·奥特曼，宇宙警备队总教官，实力最强的奥特曼。多端统一开发框架，支持用 React 的开发方式编写一次代码，生成能运行在 `小程序端`、`H5`、`React Native` 等各平台的应用。\n\n<!-- more -->\n\n### JSX 篇\n\n#### jsx 支持情况\n\n- 不能使用 **Array#map** 之外的方法操作 JSX 数组\n\n```jsx\nconst numbers = [1, 2, 3, 4, 5];\nnumbers.forEach((numbers) => {\n  // Taro中这里必须用map\n  if (someCase) {\n    return <View />;\n  }\n});\n```\n\n- 不能在 JSX 参数中使用**匿名函数**\n\n```jsx\n<View\n  onClick={() => {\n    this.openPic;\n  }}\n></View>\n```\n\n- 暂不支持在 render() 之外的方法定义 JSX\n  假设现在页面中有一个音乐组件，不能这样使用\n\n```jsx\nconst music = require('../assets/music.mp3');\nconst loop = true;\nmusicComponent = () => {\n  return (\n    <Audio src={music} loop={loop} />\n  )\n}\nrender() {\n  return (\n    {this.musicComponent()}\n  )\n}\n```\n\n- 不能在 JSX 参数中使用对象展开符\n\n```jsx\n<View {...this.props} />\n```\n\n- 不支持无状态组件\n\n  由于微信的 template 能力有限，不支持动态传值和函数，Taro 暂时只支持一个文件只定义一个组件。为了避免开发者疑惑，暂时不支持定义**无状态组件**。\n\n#### 所有元素组件化\n\n- 不能使用 html 标签，所有标签以**组件**形式书写。Taro 实现了以微信小程序组件库为标准，结合 jsx 语法规范，定制了一套[组件库](https://nervjs.github.io/taro/docs/components-desc.html)，在不同的端上，会使用不同端的对应组件。\n\n- 组件名不能和页面名相同。\n\n---\n\n### 配置篇\n\n#### 项目配置\n\n项目初始后会默认自带微信小程序的配置文件**project.config.js**。\n打包成其他平台小程序前，需要对应在根目录添加对应配置文件，否则运行报错。\n\n- 微信小程序，[project.config.json](https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html?search-key=%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE)\n- 百度智能小程序，[project.swan.json](https://smartprogram.baidu.com/docs/develop/devtools/projectconfig/)\n- 头条小程序，project.tt.json，文档暂无，大部分字段与微信小程序一致\n- 支付宝小程序，无\n\n---\n\n### 样式篇\n\n#### 兼容问题\n\n如果只需要兼容**小程序**以及**h5 端**，基本上所有 css 属性都能使用。\n\n如果要支持 **React Native** 端，必须采用 **Flex** 布局，并且样式选择器仅支持**类选择器**，且不支持 **组合选择器**。以下写法都是不支持的\n\n```css\n.button.button_theme_islands {\n  font-style: bold;\n}\nimg + p {\n  font-style: bold;\n}\n\np ~ span {\n  color: red;\n}\n\ndiv > span {\n  background-color: DodgerBlue;\n}\ndiv span {\n  background-color: DodgerBlue;\n}\n```\n\nReact Native 端支持的 css 属性较少，比如不支持**background-image**，只能使用**Image**组件，配合 Flex 布局来实现。**box-shadow**不支持，position 只支持**absolute**和**relative**。 更多属性，见详细的[css 属性列表](https://reactnative.cn/docs/layout-props/)。\n\n#### 编译成 React-Native\n\n一个简单的按钮，css 样式如下：\n\n```css\n.back {\n  width: 100%;\n  margin-top: 500px;\n}\n.back_btn {\n  width: 300px;\n  height: 100px;\n  text-align: center;\n  line-height: 100px;\n  font-size: 50px;\n  margin: 0 auto;\n  background: cadetblue;\n  border-radius: 70px;\n  color: aliceblue;\n}\n```\n\n编译之后\n\n```javascript\nimport { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  back: {\n    width: \"100%\",\n    marginTop: 250,\n  },\n  back_btn: {\n    width: 150,\n    height: 50,\n    textAlign: \"center\",\n    lineHeight: 50,\n    fontSize: 25,\n    marginTop: 0,\n    marginRight: \"auto\",\n    marginBottom: 0,\n    marginLeft: \"auto\",\n    backgroundColor: \"cadetblue\",\n    borderRadius: 35,\n    color: \"aliceblue\",\n  },\n});\n```\n\nReact Native 中，会使用 StyleSheet.create 来集中定义组件的样式。[了解更多](https://reactnative.cn/docs/style/)\n\n#### CSS 单位\n\n以 750px 设计稿为基准，css 样式以 px 为单位，如 750px 设计稿，一个按钮 200\\*100。\n\n```css\nwidth: 200px;\nheight: 100px;\n```\n\n设计稿尺寸可以在 config 文件中配置**designWidth**和**deviceRatio**字段。\n\n> Taro 会根据不同平台来编译 px，小程序中 px 转换成 rpx，h5 中则转换成 rem，react-native 中转换成 pt。如果不希望单位被转换，可以通过写成 Px 或 PX 来避免。\n\n#### 默认样式\n\n一些默认组件如**button**、**image**的默认样式在各个平台上不一致，开发前需要重置样式。\n\n### 实际项目中遇到的问题\n\n- h5 中使用第三方 js\n  h5 端可能会使用到三方 js 库，如果在小程序环境中，遇到 window，document 之类的变量，则会导致错误，解决方案是通过**Taro.getEnv()**判断环境后，按需引入三方库\n\n- audio 问题\n  微信小程序中，音频会以**createAudioContext**来处理，相关音频的操作，也只能使用**playVoice**，**pauseVoice**等方法。这些方法在 h5，react native 及其他部分小程序中都是不支持的。因此只能通过不同的环境做不同的处理。\n\n以下是点击音乐图标后，控制音乐暂停/播放的方法\n\n```jsx\ntoggleMusic = () => {\n  this.setState({\n    musicStatus: !this.state.musicStatus,\n  });\n  let audio;\n  if (Taro.getEnv() === 'WEAPP') {\n      audio = Taro.createAudioContext('audio');\n      this.state.musicStatus ? Taro.pauseVoice() : Taro.playVoice();\n  } else if (Taro.getEnv() === 'WEB'){\n      audio = document.querySelector('audio');\n      this.state.musicStatus ? audio.pause() : audio.play();\n  } else {\n      audio = ... //对应平台获取audio对象的方法\n      this.state.musicStatus ? audio.pause() : audio.play();\n  }\n};\n```\n\n### React Native 平台调试\n\n![chrome](https://qiniu.image.cq-wnl.com/content/20190228f9a18bfcb9784471ac1e862b71b6cde7.png)\n\n### 总结\n\n总体来说，Taro 的开发体验还是不错的。在编译不同平台的时候，可以通过配置 config/index.js 中的 outputRoot，来达到同时编译多个平台的代码的效果。\n\n```javascript\nconst config = {\n  outputRoot: `dist/${process.env.TARO_ENV}`,\n};\n```\n\nTaro 对小程序端的兼容性基本一致，按照 Taro 规范的语法和组件来书写项目，基本能实现各端小程序以及 h5 端的统一开发。react native 端由于环境特殊，存在许多特殊的 api 无法通用的情况，只能通过获取当前环境来做兼容处理。\n","source":"_posts/Taro.md","raw":"---\ntitle: Taro初探\ndate: 2019-02-21 13:18:11\ntags:\n  - Taro\n  - React\ncategories: 多端统一\n---\n\n👽 `Taro` ['tɑ:roʊ]，泰罗·奥特曼，宇宙警备队总教官，实力最强的奥特曼。多端统一开发框架，支持用 React 的开发方式编写一次代码，生成能运行在 `小程序端`、`H5`、`React Native` 等各平台的应用。\n\n<!-- more -->\n\n### JSX 篇\n\n#### jsx 支持情况\n\n- 不能使用 **Array#map** 之外的方法操作 JSX 数组\n\n```jsx\nconst numbers = [1, 2, 3, 4, 5];\nnumbers.forEach((numbers) => {\n  // Taro中这里必须用map\n  if (someCase) {\n    return <View />;\n  }\n});\n```\n\n- 不能在 JSX 参数中使用**匿名函数**\n\n```jsx\n<View\n  onClick={() => {\n    this.openPic;\n  }}\n></View>\n```\n\n- 暂不支持在 render() 之外的方法定义 JSX\n  假设现在页面中有一个音乐组件，不能这样使用\n\n```jsx\nconst music = require('../assets/music.mp3');\nconst loop = true;\nmusicComponent = () => {\n  return (\n    <Audio src={music} loop={loop} />\n  )\n}\nrender() {\n  return (\n    {this.musicComponent()}\n  )\n}\n```\n\n- 不能在 JSX 参数中使用对象展开符\n\n```jsx\n<View {...this.props} />\n```\n\n- 不支持无状态组件\n\n  由于微信的 template 能力有限，不支持动态传值和函数，Taro 暂时只支持一个文件只定义一个组件。为了避免开发者疑惑，暂时不支持定义**无状态组件**。\n\n#### 所有元素组件化\n\n- 不能使用 html 标签，所有标签以**组件**形式书写。Taro 实现了以微信小程序组件库为标准，结合 jsx 语法规范，定制了一套[组件库](https://nervjs.github.io/taro/docs/components-desc.html)，在不同的端上，会使用不同端的对应组件。\n\n- 组件名不能和页面名相同。\n\n---\n\n### 配置篇\n\n#### 项目配置\n\n项目初始后会默认自带微信小程序的配置文件**project.config.js**。\n打包成其他平台小程序前，需要对应在根目录添加对应配置文件，否则运行报错。\n\n- 微信小程序，[project.config.json](https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html?search-key=%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE)\n- 百度智能小程序，[project.swan.json](https://smartprogram.baidu.com/docs/develop/devtools/projectconfig/)\n- 头条小程序，project.tt.json，文档暂无，大部分字段与微信小程序一致\n- 支付宝小程序，无\n\n---\n\n### 样式篇\n\n#### 兼容问题\n\n如果只需要兼容**小程序**以及**h5 端**，基本上所有 css 属性都能使用。\n\n如果要支持 **React Native** 端，必须采用 **Flex** 布局，并且样式选择器仅支持**类选择器**，且不支持 **组合选择器**。以下写法都是不支持的\n\n```css\n.button.button_theme_islands {\n  font-style: bold;\n}\nimg + p {\n  font-style: bold;\n}\n\np ~ span {\n  color: red;\n}\n\ndiv > span {\n  background-color: DodgerBlue;\n}\ndiv span {\n  background-color: DodgerBlue;\n}\n```\n\nReact Native 端支持的 css 属性较少，比如不支持**background-image**，只能使用**Image**组件，配合 Flex 布局来实现。**box-shadow**不支持，position 只支持**absolute**和**relative**。 更多属性，见详细的[css 属性列表](https://reactnative.cn/docs/layout-props/)。\n\n#### 编译成 React-Native\n\n一个简单的按钮，css 样式如下：\n\n```css\n.back {\n  width: 100%;\n  margin-top: 500px;\n}\n.back_btn {\n  width: 300px;\n  height: 100px;\n  text-align: center;\n  line-height: 100px;\n  font-size: 50px;\n  margin: 0 auto;\n  background: cadetblue;\n  border-radius: 70px;\n  color: aliceblue;\n}\n```\n\n编译之后\n\n```javascript\nimport { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  back: {\n    width: \"100%\",\n    marginTop: 250,\n  },\n  back_btn: {\n    width: 150,\n    height: 50,\n    textAlign: \"center\",\n    lineHeight: 50,\n    fontSize: 25,\n    marginTop: 0,\n    marginRight: \"auto\",\n    marginBottom: 0,\n    marginLeft: \"auto\",\n    backgroundColor: \"cadetblue\",\n    borderRadius: 35,\n    color: \"aliceblue\",\n  },\n});\n```\n\nReact Native 中，会使用 StyleSheet.create 来集中定义组件的样式。[了解更多](https://reactnative.cn/docs/style/)\n\n#### CSS 单位\n\n以 750px 设计稿为基准，css 样式以 px 为单位，如 750px 设计稿，一个按钮 200\\*100。\n\n```css\nwidth: 200px;\nheight: 100px;\n```\n\n设计稿尺寸可以在 config 文件中配置**designWidth**和**deviceRatio**字段。\n\n> Taro 会根据不同平台来编译 px，小程序中 px 转换成 rpx，h5 中则转换成 rem，react-native 中转换成 pt。如果不希望单位被转换，可以通过写成 Px 或 PX 来避免。\n\n#### 默认样式\n\n一些默认组件如**button**、**image**的默认样式在各个平台上不一致，开发前需要重置样式。\n\n### 实际项目中遇到的问题\n\n- h5 中使用第三方 js\n  h5 端可能会使用到三方 js 库，如果在小程序环境中，遇到 window，document 之类的变量，则会导致错误，解决方案是通过**Taro.getEnv()**判断环境后，按需引入三方库\n\n- audio 问题\n  微信小程序中，音频会以**createAudioContext**来处理，相关音频的操作，也只能使用**playVoice**，**pauseVoice**等方法。这些方法在 h5，react native 及其他部分小程序中都是不支持的。因此只能通过不同的环境做不同的处理。\n\n以下是点击音乐图标后，控制音乐暂停/播放的方法\n\n```jsx\ntoggleMusic = () => {\n  this.setState({\n    musicStatus: !this.state.musicStatus,\n  });\n  let audio;\n  if (Taro.getEnv() === 'WEAPP') {\n      audio = Taro.createAudioContext('audio');\n      this.state.musicStatus ? Taro.pauseVoice() : Taro.playVoice();\n  } else if (Taro.getEnv() === 'WEB'){\n      audio = document.querySelector('audio');\n      this.state.musicStatus ? audio.pause() : audio.play();\n  } else {\n      audio = ... //对应平台获取audio对象的方法\n      this.state.musicStatus ? audio.pause() : audio.play();\n  }\n};\n```\n\n### React Native 平台调试\n\n![chrome](https://qiniu.image.cq-wnl.com/content/20190228f9a18bfcb9784471ac1e862b71b6cde7.png)\n\n### 总结\n\n总体来说，Taro 的开发体验还是不错的。在编译不同平台的时候，可以通过配置 config/index.js 中的 outputRoot，来达到同时编译多个平台的代码的效果。\n\n```javascript\nconst config = {\n  outputRoot: `dist/${process.env.TARO_ENV}`,\n};\n```\n\nTaro 对小程序端的兼容性基本一致，按照 Taro 规范的语法和组件来书写项目，基本能实现各端小程序以及 h5 端的统一开发。react native 端由于环境特殊，存在许多特殊的 api 无法通用的情况，只能通过获取当前环境来做兼容处理。\n","slug":"Taro","published":1,"updated":"2020-07-15T02:13:55.926Z","_id":"ckclo9v5v00000wu55m607u34","comments":1,"layout":"post","photos":[],"link":"","content":"<p>👽 <code>Taro</code> [‘tɑ:roʊ]，泰罗·奥特曼，宇宙警备队总教官，实力最强的奥特曼。多端统一开发框架，支持用 React 的开发方式编写一次代码，生成能运行在 <code>小程序端</code>、<code>H5</code>、<code>React Native</code> 等各平台的应用。</p>\n<a id=\"more\"></a>\n<h3 id=\"JSX-篇\"><a href=\"#JSX-篇\" class=\"headerlink\" title=\"JSX 篇\"></a>JSX 篇</h3><h4 id=\"jsx-支持情况\"><a href=\"#jsx-支持情况\" class=\"headerlink\" title=\"jsx 支持情况\"></a>jsx 支持情况</h4><ul>\n<li>不能使用 <strong>Array#map</strong> 之外的方法操作 JSX 数组</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">numbers.forEach(<span class=\"function\">(<span class=\"params\">numbers</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Taro中这里必须用map</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (someCase) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;View /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不能在 JSX 参数中使用<strong>匿名函数</strong></li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;View</span><br><span class=\"line\">  onClick=&#123;() =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.openPic;</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">&gt;&lt;/View&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>暂不支持在 render() 之外的方法定义 JSX<br>假设现在页面中有一个音乐组件，不能这样使用</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> music = <span class=\"built_in\">require</span>(<span class=\"string\">'../assets/music.mp3'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> loop = <span class=\"literal\">true</span>;</span><br><span class=\"line\">musicComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Audio src=&#123;music&#125; loop=&#123;loop&#125; /&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &#123;<span class=\"keyword\">this</span>.musicComponent()&#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不能在 JSX 参数中使用对象展开符</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;View &#123;...this.props&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>不支持无状态组件</p>\n<p>由于微信的 template 能力有限，不支持动态传值和函数，Taro 暂时只支持一个文件只定义一个组件。为了避免开发者疑惑，暂时不支持定义<strong>无状态组件</strong>。</p>\n</li>\n</ul>\n<h4 id=\"所有元素组件化\"><a href=\"#所有元素组件化\" class=\"headerlink\" title=\"所有元素组件化\"></a>所有元素组件化</h4><ul>\n<li><p>不能使用 html 标签，所有标签以<strong>组件</strong>形式书写。Taro 实现了以微信小程序组件库为标准，结合 jsx 语法规范，定制了一套<a href=\"https://nervjs.github.io/taro/docs/components-desc.html\" target=\"_blank\" rel=\"noopener\">组件库</a>，在不同的端上，会使用不同端的对应组件。</p>\n</li>\n<li><p>组件名不能和页面名相同。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"配置篇\"><a href=\"#配置篇\" class=\"headerlink\" title=\"配置篇\"></a>配置篇</h3><h4 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h4><p>项目初始后会默认自带微信小程序的配置文件<strong>project.config.js</strong>。<br>打包成其他平台小程序前，需要对应在根目录添加对应配置文件，否则运行报错。</p>\n<ul>\n<li>微信小程序，<a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html?search-key=%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">project.config.json</a></li>\n<li>百度智能小程序，<a href=\"https://smartprogram.baidu.com/docs/develop/devtools/projectconfig/\" target=\"_blank\" rel=\"noopener\">project.swan.json</a></li>\n<li>头条小程序，project.tt.json，文档暂无，大部分字段与微信小程序一致</li>\n<li>支付宝小程序，无</li>\n</ul>\n<hr>\n<h3 id=\"样式篇\"><a href=\"#样式篇\" class=\"headerlink\" title=\"样式篇\"></a>样式篇</h3><h4 id=\"兼容问题\"><a href=\"#兼容问题\" class=\"headerlink\" title=\"兼容问题\"></a>兼容问题</h4><p>如果只需要兼容<strong>小程序</strong>以及<strong>h5 端</strong>，基本上所有 css 属性都能使用。</p>\n<p>如果要支持 <strong>React Native</strong> 端，必须采用 <strong>Flex</strong> 布局，并且样式选择器仅支持<strong>类选择器</strong>，且不支持 <strong>组合选择器</strong>。以下写法都是不支持的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-class\">.button_theme_islands</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> + <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> ~ <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &gt; <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: DodgerBlue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: DodgerBlue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>React Native 端支持的 css 属性较少，比如不支持<strong>background-image</strong>，只能使用<strong>Image</strong>组件，配合 Flex 布局来实现。<strong>box-shadow</strong>不支持，position 只支持<strong>absolute</strong>和<strong>relative</strong>。 更多属性，见详细的<a href=\"https://reactnative.cn/docs/layout-props/\" target=\"_blank\" rel=\"noopener\">css 属性列表</a>。</p>\n<h4 id=\"编译成-React-Native\"><a href=\"#编译成-React-Native\" class=\"headerlink\" title=\"编译成 React-Native\"></a>编译成 React-Native</h4><p>一个简单的按钮，css 样式如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.back</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.back_btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: cadetblue;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">70px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: aliceblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译之后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; StyleSheet &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-native\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> StyleSheet.create(&#123;</span><br><span class=\"line\">  back: &#123;</span><br><span class=\"line\">    width: <span class=\"string\">\"100%\"</span>,</span><br><span class=\"line\">    marginTop: <span class=\"number\">250</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  back_btn: &#123;</span><br><span class=\"line\">    width: <span class=\"number\">150</span>,</span><br><span class=\"line\">    height: <span class=\"number\">50</span>,</span><br><span class=\"line\">    textAlign: <span class=\"string\">\"center\"</span>,</span><br><span class=\"line\">    lineHeight: <span class=\"number\">50</span>,</span><br><span class=\"line\">    fontSize: <span class=\"number\">25</span>,</span><br><span class=\"line\">    marginTop: <span class=\"number\">0</span>,</span><br><span class=\"line\">    marginRight: <span class=\"string\">\"auto\"</span>,</span><br><span class=\"line\">    marginBottom: <span class=\"number\">0</span>,</span><br><span class=\"line\">    marginLeft: <span class=\"string\">\"auto\"</span>,</span><br><span class=\"line\">    backgroundColor: <span class=\"string\">\"cadetblue\"</span>,</span><br><span class=\"line\">    borderRadius: <span class=\"number\">35</span>,</span><br><span class=\"line\">    color: <span class=\"string\">\"aliceblue\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>React Native 中，会使用 StyleSheet.create 来集中定义组件的样式。<a href=\"https://reactnative.cn/docs/style/\" target=\"_blank\" rel=\"noopener\">了解更多</a></p>\n<h4 id=\"CSS-单位\"><a href=\"#CSS-单位\" class=\"headerlink\" title=\"CSS 单位\"></a>CSS 单位</h4><p>以 750px 设计稿为基准，css 样式以 px 为单位，如 750px 设计稿，一个按钮 200*100。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">width</span>: 200<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: 100<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<p>设计稿尺寸可以在 config 文件中配置<strong>designWidth</strong>和<strong>deviceRatio</strong>字段。</p>\n<blockquote>\n<p>Taro 会根据不同平台来编译 px，小程序中 px 转换成 rpx，h5 中则转换成 rem，react-native 中转换成 pt。如果不希望单位被转换，可以通过写成 Px 或 PX 来避免。</p>\n</blockquote>\n<h4 id=\"默认样式\"><a href=\"#默认样式\" class=\"headerlink\" title=\"默认样式\"></a>默认样式</h4><p>一些默认组件如<strong>button</strong>、<strong>image</strong>的默认样式在各个平台上不一致，开发前需要重置样式。</p>\n<h3 id=\"实际项目中遇到的问题\"><a href=\"#实际项目中遇到的问题\" class=\"headerlink\" title=\"实际项目中遇到的问题\"></a>实际项目中遇到的问题</h3><ul>\n<li><p>h5 中使用第三方 js<br>h5 端可能会使用到三方 js 库，如果在小程序环境中，遇到 window，document 之类的变量，则会导致错误，解决方案是通过<strong>Taro.getEnv()</strong>判断环境后，按需引入三方库</p>\n</li>\n<li><p>audio 问题<br>微信小程序中，音频会以<strong>createAudioContext</strong>来处理，相关音频的操作，也只能使用<strong>playVoice</strong>，<strong>pauseVoice</strong>等方法。这些方法在 h5，react native 及其他部分小程序中都是不支持的。因此只能通过不同的环境做不同的处理。</p>\n</li>\n</ul>\n<p>以下是点击音乐图标后，控制音乐暂停/播放的方法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toggleMusic = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">    musicStatus: !<span class=\"keyword\">this</span>.state.musicStatus,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> audio;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Taro.getEnv() === <span class=\"string\">'WEAPP'</span>) &#123;</span><br><span class=\"line\">      audio = Taro.createAudioContext(<span class=\"string\">'audio'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state.musicStatus ? Taro.pauseVoice() : Taro.playVoice();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Taro.getEnv() === <span class=\"string\">'WEB'</span>)&#123;</span><br><span class=\"line\">      audio = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'audio'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state.musicStatus ? audio.pause() : audio.play();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      audio = ... <span class=\"comment\">//对应平台获取audio对象的方法</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state.musicStatus ? audio.pause() : audio.play();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"React-Native-平台调试\"><a href=\"#React-Native-平台调试\" class=\"headerlink\" title=\"React Native 平台调试\"></a>React Native 平台调试</h3><p><img src=\"https://qiniu.image.cq-wnl.com/content/20190228f9a18bfcb9784471ac1e862b71b6cde7.png\" alt=\"chrome\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>总体来说，Taro 的开发体验还是不错的。在编译不同平台的时候，可以通过配置 config/index.js 中的 outputRoot，来达到同时编译多个平台的代码的效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  outputRoot: <span class=\"string\">`dist/<span class=\"subst\">$&#123;process.env.TARO_ENV&#125;</span>`</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Taro 对小程序端的兼容性基本一致，按照 Taro 规范的语法和组件来书写项目，基本能实现各端小程序以及 h5 端的统一开发。react native 端由于环境特殊，存在许多特殊的 api 无法通用的情况，只能通过获取当前环境来做兼容处理。</p>\n","site":{"data":{"gallery":{"source":[{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/61933480.jpg","desc":"涂鸦"},{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/86403488.jpg","desc":"云南石林"}]}}},"excerpt":"<p>👽 <code>Taro</code> [‘tɑ:roʊ]，泰罗·奥特曼，宇宙警备队总教官，实力最强的奥特曼。多端统一开发框架，支持用 React 的开发方式编写一次代码，生成能运行在 <code>小程序端</code>、<code>H5</code>、<code>React Native</code> 等各平台的应用。</p>","more":"<h3 id=\"JSX-篇\"><a href=\"#JSX-篇\" class=\"headerlink\" title=\"JSX 篇\"></a>JSX 篇</h3><h4 id=\"jsx-支持情况\"><a href=\"#jsx-支持情况\" class=\"headerlink\" title=\"jsx 支持情况\"></a>jsx 支持情况</h4><ul>\n<li>不能使用 <strong>Array#map</strong> 之外的方法操作 JSX 数组</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">numbers.forEach(<span class=\"function\">(<span class=\"params\">numbers</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Taro中这里必须用map</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (someCase) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;View /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不能在 JSX 参数中使用<strong>匿名函数</strong></li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;View</span><br><span class=\"line\">  onClick=&#123;() =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.openPic;</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">&gt;&lt;/View&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>暂不支持在 render() 之外的方法定义 JSX<br>假设现在页面中有一个音乐组件，不能这样使用</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> music = <span class=\"built_in\">require</span>(<span class=\"string\">'../assets/music.mp3'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> loop = <span class=\"literal\">true</span>;</span><br><span class=\"line\">musicComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Audio src=&#123;music&#125; loop=&#123;loop&#125; /&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &#123;<span class=\"keyword\">this</span>.musicComponent()&#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不能在 JSX 参数中使用对象展开符</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;View &#123;...this.props&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>不支持无状态组件</p>\n<p>由于微信的 template 能力有限，不支持动态传值和函数，Taro 暂时只支持一个文件只定义一个组件。为了避免开发者疑惑，暂时不支持定义<strong>无状态组件</strong>。</p>\n</li>\n</ul>\n<h4 id=\"所有元素组件化\"><a href=\"#所有元素组件化\" class=\"headerlink\" title=\"所有元素组件化\"></a>所有元素组件化</h4><ul>\n<li><p>不能使用 html 标签，所有标签以<strong>组件</strong>形式书写。Taro 实现了以微信小程序组件库为标准，结合 jsx 语法规范，定制了一套<a href=\"https://nervjs.github.io/taro/docs/components-desc.html\" target=\"_blank\" rel=\"noopener\">组件库</a>，在不同的端上，会使用不同端的对应组件。</p>\n</li>\n<li><p>组件名不能和页面名相同。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"配置篇\"><a href=\"#配置篇\" class=\"headerlink\" title=\"配置篇\"></a>配置篇</h3><h4 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h4><p>项目初始后会默认自带微信小程序的配置文件<strong>project.config.js</strong>。<br>打包成其他平台小程序前，需要对应在根目录添加对应配置文件，否则运行报错。</p>\n<ul>\n<li>微信小程序，<a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html?search-key=%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">project.config.json</a></li>\n<li>百度智能小程序，<a href=\"https://smartprogram.baidu.com/docs/develop/devtools/projectconfig/\" target=\"_blank\" rel=\"noopener\">project.swan.json</a></li>\n<li>头条小程序，project.tt.json，文档暂无，大部分字段与微信小程序一致</li>\n<li>支付宝小程序，无</li>\n</ul>\n<hr>\n<h3 id=\"样式篇\"><a href=\"#样式篇\" class=\"headerlink\" title=\"样式篇\"></a>样式篇</h3><h4 id=\"兼容问题\"><a href=\"#兼容问题\" class=\"headerlink\" title=\"兼容问题\"></a>兼容问题</h4><p>如果只需要兼容<strong>小程序</strong>以及<strong>h5 端</strong>，基本上所有 css 属性都能使用。</p>\n<p>如果要支持 <strong>React Native</strong> 端，必须采用 <strong>Flex</strong> 布局，并且样式选择器仅支持<strong>类选择器</strong>，且不支持 <strong>组合选择器</strong>。以下写法都是不支持的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-class\">.button_theme_islands</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> + <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> ~ <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &gt; <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: DodgerBlue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: DodgerBlue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>React Native 端支持的 css 属性较少，比如不支持<strong>background-image</strong>，只能使用<strong>Image</strong>组件，配合 Flex 布局来实现。<strong>box-shadow</strong>不支持，position 只支持<strong>absolute</strong>和<strong>relative</strong>。 更多属性，见详细的<a href=\"https://reactnative.cn/docs/layout-props/\" target=\"_blank\" rel=\"noopener\">css 属性列表</a>。</p>\n<h4 id=\"编译成-React-Native\"><a href=\"#编译成-React-Native\" class=\"headerlink\" title=\"编译成 React-Native\"></a>编译成 React-Native</h4><p>一个简单的按钮，css 样式如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.back</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.back_btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: cadetblue;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">70px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: aliceblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译之后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; StyleSheet &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-native\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> StyleSheet.create(&#123;</span><br><span class=\"line\">  back: &#123;</span><br><span class=\"line\">    width: <span class=\"string\">\"100%\"</span>,</span><br><span class=\"line\">    marginTop: <span class=\"number\">250</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  back_btn: &#123;</span><br><span class=\"line\">    width: <span class=\"number\">150</span>,</span><br><span class=\"line\">    height: <span class=\"number\">50</span>,</span><br><span class=\"line\">    textAlign: <span class=\"string\">\"center\"</span>,</span><br><span class=\"line\">    lineHeight: <span class=\"number\">50</span>,</span><br><span class=\"line\">    fontSize: <span class=\"number\">25</span>,</span><br><span class=\"line\">    marginTop: <span class=\"number\">0</span>,</span><br><span class=\"line\">    marginRight: <span class=\"string\">\"auto\"</span>,</span><br><span class=\"line\">    marginBottom: <span class=\"number\">0</span>,</span><br><span class=\"line\">    marginLeft: <span class=\"string\">\"auto\"</span>,</span><br><span class=\"line\">    backgroundColor: <span class=\"string\">\"cadetblue\"</span>,</span><br><span class=\"line\">    borderRadius: <span class=\"number\">35</span>,</span><br><span class=\"line\">    color: <span class=\"string\">\"aliceblue\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>React Native 中，会使用 StyleSheet.create 来集中定义组件的样式。<a href=\"https://reactnative.cn/docs/style/\" target=\"_blank\" rel=\"noopener\">了解更多</a></p>\n<h4 id=\"CSS-单位\"><a href=\"#CSS-单位\" class=\"headerlink\" title=\"CSS 单位\"></a>CSS 单位</h4><p>以 750px 设计稿为基准，css 样式以 px 为单位，如 750px 设计稿，一个按钮 200*100。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">width</span>: 200<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: 100<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<p>设计稿尺寸可以在 config 文件中配置<strong>designWidth</strong>和<strong>deviceRatio</strong>字段。</p>\n<blockquote>\n<p>Taro 会根据不同平台来编译 px，小程序中 px 转换成 rpx，h5 中则转换成 rem，react-native 中转换成 pt。如果不希望单位被转换，可以通过写成 Px 或 PX 来避免。</p>\n</blockquote>\n<h4 id=\"默认样式\"><a href=\"#默认样式\" class=\"headerlink\" title=\"默认样式\"></a>默认样式</h4><p>一些默认组件如<strong>button</strong>、<strong>image</strong>的默认样式在各个平台上不一致，开发前需要重置样式。</p>\n<h3 id=\"实际项目中遇到的问题\"><a href=\"#实际项目中遇到的问题\" class=\"headerlink\" title=\"实际项目中遇到的问题\"></a>实际项目中遇到的问题</h3><ul>\n<li><p>h5 中使用第三方 js<br>h5 端可能会使用到三方 js 库，如果在小程序环境中，遇到 window，document 之类的变量，则会导致错误，解决方案是通过<strong>Taro.getEnv()</strong>判断环境后，按需引入三方库</p>\n</li>\n<li><p>audio 问题<br>微信小程序中，音频会以<strong>createAudioContext</strong>来处理，相关音频的操作，也只能使用<strong>playVoice</strong>，<strong>pauseVoice</strong>等方法。这些方法在 h5，react native 及其他部分小程序中都是不支持的。因此只能通过不同的环境做不同的处理。</p>\n</li>\n</ul>\n<p>以下是点击音乐图标后，控制音乐暂停/播放的方法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toggleMusic = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">    musicStatus: !<span class=\"keyword\">this</span>.state.musicStatus,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> audio;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Taro.getEnv() === <span class=\"string\">'WEAPP'</span>) &#123;</span><br><span class=\"line\">      audio = Taro.createAudioContext(<span class=\"string\">'audio'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state.musicStatus ? Taro.pauseVoice() : Taro.playVoice();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Taro.getEnv() === <span class=\"string\">'WEB'</span>)&#123;</span><br><span class=\"line\">      audio = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'audio'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state.musicStatus ? audio.pause() : audio.play();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      audio = ... <span class=\"comment\">//对应平台获取audio对象的方法</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state.musicStatus ? audio.pause() : audio.play();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"React-Native-平台调试\"><a href=\"#React-Native-平台调试\" class=\"headerlink\" title=\"React Native 平台调试\"></a>React Native 平台调试</h3><p><img src=\"https://qiniu.image.cq-wnl.com/content/20190228f9a18bfcb9784471ac1e862b71b6cde7.png\" alt=\"chrome\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>总体来说，Taro 的开发体验还是不错的。在编译不同平台的时候，可以通过配置 config/index.js 中的 outputRoot，来达到同时编译多个平台的代码的效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  outputRoot: <span class=\"string\">`dist/<span class=\"subst\">$&#123;process.env.TARO_ENV&#125;</span>`</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Taro 对小程序端的兼容性基本一致，按照 Taro 规范的语法和组件来书写项目，基本能实现各端小程序以及 h5 端的统一开发。react native 端由于环境特殊，存在许多特殊的 api 无法通用的情况，只能通过获取当前环境来做兼容处理。</p>"},{"title":"使用lottie-web制作高性能动画","date":"2019-07-31T12:35:32.000Z","_content":"\n🌾 `Lottie` 是一个库，用于解析使用 [AE](https://www.adobe.com/cn/products/aftereffects.html) 制作的动画（动画需要通过 AE 中的 bodymovin 插件将其导出为 json 数据格式），支持`web`、`ios`、`android` 和 `react native`。\n\n<!-- more -->\n\n想提前看下效果的小伙伴请看[这里~](https://blog.9cnext.com/lottie_demo)\n\n\n### Lottie 简介\n\n[Lottie 官网](http://airbnb.io/lottie/)\n\n>  这里主要介绍 Lottie 的 web 版本 **lottie-web** 库，它可以解析导出的动画 json 文件，并将其以 svg 或者 canvas 的方式将动画绘制到页面中。\n\n### 为什么使用 Lottie\n\n目前多帧动画一般的实现方式是：\n\n- 前端实现`svg、canvas`动画（实现成本较高、维护成本高）\n- 设计师切`gif`（文件较大、容易有锯齿）\n- `png`序列帧（文件较大、容易有锯齿）\n\n> 目前的动画实现方案有着各自的问题，所以我们需要寻找一种更加简单、高效、性能高的动画方案。airbnb 的 Lottie 是一套良好的动画解决方案。\n\n### Lottie 的优势\n\nLottie 方法方案是由设计师出动画，导出为 json，给前端解析。所以，使用 Lottie 方案的好处在于：\n\n- 动画由设计使用专业的动画制作工具`Adobe After Effects`来实现，使动画实现更加方便，动画效果也更好；\n- 前端可以方便的调用动画，并对动画进行控制，减少前端动画工作量；\n- 设计制作动画，前端展现动画，专业人做专业事，分工合理；\n- 还原程度百分之百；\n- 使用 lottie 方案，json 文件大小会比 gif 文件小很多，性能也会更好。\n\n### Lottie 的不足\n\n- lottie-web 文件比较大，lottie.js 大小为 532k，轻量版压缩后也有 150k，经过 gzip 后，大小为 43k。\n- 如果设计师建了很多的图层，可能仍然有 json 文件较大的问题，需要设计师遵循一定的设计规范。\n\n### lottie-web 使用方式\n\n#### 初始化\n\n`npm install lottie-web` or `yarn add lottie-web`\n\n```ts\nimport lottie from 'lottie-web';\nimport animationData from 'animationData.json'; // 使用本地资源\n\nconst animation = lottie.loadAnimation({\n  container: element as Element, // the dom element that will contain the animation\n  renderer: 'svg',\n  name: name,\n  loop: true,\n  autoplay: true,\n  animationData\n});\n// 添加事件\nanimation.addEventListener('enterFrame', i => {\n  ...\n});\n```\n\n`loadAnimation`参数定义：\n\n```ts\nexport type AnimationConfig = {\n  container: Element; //动画容器\n  renderer?: 'svg' | 'canvas' | 'html'; //渲染方式\n  loop?: boolean | number; //循环\n  autoplay?: boolean; //自动播放\n  name?: string; //动画名字\n  rendererSettings?:\n    | SVGRendererConfig\n    | CanvasRendererConfig\n    | HTMLRendererConfig; // 渲染设置\n  path?: string; // 动画json路径\n  animationData?: any; //本地动画json数据\n};\n```\n\n初始化完成后，可以对`animation`对象添加事件以及对动画进行控制\n\n#### 事件\n\n`调用方式`\n\n```javascript\nanimation.addEventeListener('event', info => {\n  console.log(info);\n});\n```\n\n| 事件名          | 描述              |\n| ------------ | --------------- |\n| enterFrame   | 播放每一帧动画的时候触发    |\n| loopComplete | 当前循环播放完成触发      |\n| complete     | 动画播放完成触发        |\n| segmentStart | 开始播放一个动画片段的时候触发 |\n| destroy      | 动画销毁时触发         |\n\n#### 方法\n\n`调用方式`\n\n```javascript\nanimation.play();\nanimation.setSpeed(1.5);\n```\n\n| 方法名             | 参数及返回类型                                   | 描述              |\n| --------------- | ----------------------------------------- | --------------- |\n| play            | (): void                                  | 播放              |\n| stop            | (): void                                  | 停止并回到第 0 帧      |\n| pause           | (): void                                  | 暂停              |\n| setLocationHref | (href: string): void                      | 设置本地资源路径        |\n| setSpeed        | (speed: number): void                     | 设置动画播放速速        |\n| goToAndPlay     | (value: number, isFrame?: boolean): void  | 前进到传入帧并继续播放     |\n| goToAndStop     | (value: number, isFrame?: boolean): void  | 前进到传入帧并停止播放     |\n| setDirection    | (direction: AnimationDirection): void     | 设置动画方向          |\n| playSegments    | (segments: [], forceFlag?: boolean): void | 播放指定帧数组的动画;     |\n| destroy         | (): void                                  | 主动销毁动画          |\n| getDuration     | (inFrames?: boolean): number              | 获取动画时长，可按帧或按秒返回 |\n\n### 使用全球设计师分享的动画\n\n> 我们可以在 [lottiefiles](https://lottiefiles.com/) 上看到来自全球优秀设计师们分享的动画，并十分简单的使用它。\n\n### 使用案例\n\n#### 加载远程 json 文件\n\n```typescript\nconst source =\n  'https://assets1.lottiefiles.com/datafiles/AembVTvov5PkTSJ/data.json';\n/**\n * 加载远程json文件\n * @param {string} sourceurl\n * @returns 返回json对象\n */\nconst loadResource = async (sourceurl: string) => {\n  const response = await fetch(sourceurl);\n  const data = await response.json();\n  return data;\n};\nloadResource(String(source)).then(json => {\n  // 加载完成后初始化\n  const animation = lottie.loadAnimation({\n    container: element as Element, // the dom element that will contain the animation\n    renderer: 'svg',\n    name: name,\n    loop: true,\n    autoplay: true,\n    animationData: json,\n  });\n});\n```\n\n###[点击查看demo](https://blog.9cnext.com/lottie_demo)\n\n###[github](https://github.com/Yechuanjie/lottie_demo)\n","source":"_posts/lottie.md","raw":"---\ntitle: 使用lottie-web制作高性能动画\ndate: 2019-07-31 12:35:32\ntags:\n  - JavaScript\n  - 动画\ncategories: JavaScript\n---\n\n🌾 `Lottie` 是一个库，用于解析使用 [AE](https://www.adobe.com/cn/products/aftereffects.html) 制作的动画（动画需要通过 AE 中的 bodymovin 插件将其导出为 json 数据格式），支持`web`、`ios`、`android` 和 `react native`。\n\n<!-- more -->\n\n想提前看下效果的小伙伴请看[这里~](https://blog.9cnext.com/lottie_demo)\n\n\n### Lottie 简介\n\n[Lottie 官网](http://airbnb.io/lottie/)\n\n>  这里主要介绍 Lottie 的 web 版本 **lottie-web** 库，它可以解析导出的动画 json 文件，并将其以 svg 或者 canvas 的方式将动画绘制到页面中。\n\n### 为什么使用 Lottie\n\n目前多帧动画一般的实现方式是：\n\n- 前端实现`svg、canvas`动画（实现成本较高、维护成本高）\n- 设计师切`gif`（文件较大、容易有锯齿）\n- `png`序列帧（文件较大、容易有锯齿）\n\n> 目前的动画实现方案有着各自的问题，所以我们需要寻找一种更加简单、高效、性能高的动画方案。airbnb 的 Lottie 是一套良好的动画解决方案。\n\n### Lottie 的优势\n\nLottie 方法方案是由设计师出动画，导出为 json，给前端解析。所以，使用 Lottie 方案的好处在于：\n\n- 动画由设计使用专业的动画制作工具`Adobe After Effects`来实现，使动画实现更加方便，动画效果也更好；\n- 前端可以方便的调用动画，并对动画进行控制，减少前端动画工作量；\n- 设计制作动画，前端展现动画，专业人做专业事，分工合理；\n- 还原程度百分之百；\n- 使用 lottie 方案，json 文件大小会比 gif 文件小很多，性能也会更好。\n\n### Lottie 的不足\n\n- lottie-web 文件比较大，lottie.js 大小为 532k，轻量版压缩后也有 150k，经过 gzip 后，大小为 43k。\n- 如果设计师建了很多的图层，可能仍然有 json 文件较大的问题，需要设计师遵循一定的设计规范。\n\n### lottie-web 使用方式\n\n#### 初始化\n\n`npm install lottie-web` or `yarn add lottie-web`\n\n```ts\nimport lottie from 'lottie-web';\nimport animationData from 'animationData.json'; // 使用本地资源\n\nconst animation = lottie.loadAnimation({\n  container: element as Element, // the dom element that will contain the animation\n  renderer: 'svg',\n  name: name,\n  loop: true,\n  autoplay: true,\n  animationData\n});\n// 添加事件\nanimation.addEventListener('enterFrame', i => {\n  ...\n});\n```\n\n`loadAnimation`参数定义：\n\n```ts\nexport type AnimationConfig = {\n  container: Element; //动画容器\n  renderer?: 'svg' | 'canvas' | 'html'; //渲染方式\n  loop?: boolean | number; //循环\n  autoplay?: boolean; //自动播放\n  name?: string; //动画名字\n  rendererSettings?:\n    | SVGRendererConfig\n    | CanvasRendererConfig\n    | HTMLRendererConfig; // 渲染设置\n  path?: string; // 动画json路径\n  animationData?: any; //本地动画json数据\n};\n```\n\n初始化完成后，可以对`animation`对象添加事件以及对动画进行控制\n\n#### 事件\n\n`调用方式`\n\n```javascript\nanimation.addEventeListener('event', info => {\n  console.log(info);\n});\n```\n\n| 事件名          | 描述              |\n| ------------ | --------------- |\n| enterFrame   | 播放每一帧动画的时候触发    |\n| loopComplete | 当前循环播放完成触发      |\n| complete     | 动画播放完成触发        |\n| segmentStart | 开始播放一个动画片段的时候触发 |\n| destroy      | 动画销毁时触发         |\n\n#### 方法\n\n`调用方式`\n\n```javascript\nanimation.play();\nanimation.setSpeed(1.5);\n```\n\n| 方法名             | 参数及返回类型                                   | 描述              |\n| --------------- | ----------------------------------------- | --------------- |\n| play            | (): void                                  | 播放              |\n| stop            | (): void                                  | 停止并回到第 0 帧      |\n| pause           | (): void                                  | 暂停              |\n| setLocationHref | (href: string): void                      | 设置本地资源路径        |\n| setSpeed        | (speed: number): void                     | 设置动画播放速速        |\n| goToAndPlay     | (value: number, isFrame?: boolean): void  | 前进到传入帧并继续播放     |\n| goToAndStop     | (value: number, isFrame?: boolean): void  | 前进到传入帧并停止播放     |\n| setDirection    | (direction: AnimationDirection): void     | 设置动画方向          |\n| playSegments    | (segments: [], forceFlag?: boolean): void | 播放指定帧数组的动画;     |\n| destroy         | (): void                                  | 主动销毁动画          |\n| getDuration     | (inFrames?: boolean): number              | 获取动画时长，可按帧或按秒返回 |\n\n### 使用全球设计师分享的动画\n\n> 我们可以在 [lottiefiles](https://lottiefiles.com/) 上看到来自全球优秀设计师们分享的动画，并十分简单的使用它。\n\n### 使用案例\n\n#### 加载远程 json 文件\n\n```typescript\nconst source =\n  'https://assets1.lottiefiles.com/datafiles/AembVTvov5PkTSJ/data.json';\n/**\n * 加载远程json文件\n * @param {string} sourceurl\n * @returns 返回json对象\n */\nconst loadResource = async (sourceurl: string) => {\n  const response = await fetch(sourceurl);\n  const data = await response.json();\n  return data;\n};\nloadResource(String(source)).then(json => {\n  // 加载完成后初始化\n  const animation = lottie.loadAnimation({\n    container: element as Element, // the dom element that will contain the animation\n    renderer: 'svg',\n    name: name,\n    loop: true,\n    autoplay: true,\n    animationData: json,\n  });\n});\n```\n\n###[点击查看demo](https://blog.9cnext.com/lottie_demo)\n\n###[github](https://github.com/Yechuanjie/lottie_demo)\n","slug":"lottie","published":1,"updated":"2020-07-15T02:07:30.863Z","_id":"ckclo9v6800020wu51669nf0s","comments":1,"layout":"post","photos":[],"link":"","content":"<p>🌾 <code>Lottie</code> 是一个库，用于解析使用 <a href=\"https://www.adobe.com/cn/products/aftereffects.html\" target=\"_blank\" rel=\"noopener\">AE</a> 制作的动画（动画需要通过 AE 中的 bodymovin 插件将其导出为 json 数据格式），支持<code>web</code>、<code>ios</code>、<code>android</code> 和 <code>react native</code>。</p>\n<a id=\"more\"></a>\n<p>想提前看下效果的小伙伴请看<a href=\"https://blog.9cnext.com/lottie_demo\">这里~</a></p>\n<h3 id=\"Lottie-简介\"><a href=\"#Lottie-简介\" class=\"headerlink\" title=\"Lottie 简介\"></a>Lottie 简介</h3><p><a href=\"http://airbnb.io/lottie/\" target=\"_blank\" rel=\"noopener\">Lottie 官网</a></p>\n<blockquote>\n<p> 这里主要介绍 Lottie 的 web 版本 <strong>lottie-web</strong> 库，它可以解析导出的动画 json 文件，并将其以 svg 或者 canvas 的方式将动画绘制到页面中。</p>\n</blockquote>\n<h3 id=\"为什么使用-Lottie\"><a href=\"#为什么使用-Lottie\" class=\"headerlink\" title=\"为什么使用 Lottie\"></a>为什么使用 Lottie</h3><p>目前多帧动画一般的实现方式是：</p>\n<ul>\n<li>前端实现<code>svg、canvas</code>动画（实现成本较高、维护成本高）</li>\n<li>设计师切<code>gif</code>（文件较大、容易有锯齿）</li>\n<li><code>png</code>序列帧（文件较大、容易有锯齿）</li>\n</ul>\n<blockquote>\n<p>目前的动画实现方案有着各自的问题，所以我们需要寻找一种更加简单、高效、性能高的动画方案。airbnb 的 Lottie 是一套良好的动画解决方案。</p>\n</blockquote>\n<h3 id=\"Lottie-的优势\"><a href=\"#Lottie-的优势\" class=\"headerlink\" title=\"Lottie 的优势\"></a>Lottie 的优势</h3><p>Lottie 方法方案是由设计师出动画，导出为 json，给前端解析。所以，使用 Lottie 方案的好处在于：</p>\n<ul>\n<li>动画由设计使用专业的动画制作工具<code>Adobe After Effects</code>来实现，使动画实现更加方便，动画效果也更好；</li>\n<li>前端可以方便的调用动画，并对动画进行控制，减少前端动画工作量；</li>\n<li>设计制作动画，前端展现动画，专业人做专业事，分工合理；</li>\n<li>还原程度百分之百；</li>\n<li>使用 lottie 方案，json 文件大小会比 gif 文件小很多，性能也会更好。</li>\n</ul>\n<h3 id=\"Lottie-的不足\"><a href=\"#Lottie-的不足\" class=\"headerlink\" title=\"Lottie 的不足\"></a>Lottie 的不足</h3><ul>\n<li>lottie-web 文件比较大，lottie.js 大小为 532k，轻量版压缩后也有 150k，经过 gzip 后，大小为 43k。</li>\n<li>如果设计师建了很多的图层，可能仍然有 json 文件较大的问题，需要设计师遵循一定的设计规范。</li>\n</ul>\n<h3 id=\"lottie-web-使用方式\"><a href=\"#lottie-web-使用方式\" class=\"headerlink\" title=\"lottie-web 使用方式\"></a>lottie-web 使用方式</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p><code>npm install lottie-web</code> or <code>yarn add lottie-web</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lottie <span class=\"keyword\">from</span> <span class=\"string\">'lottie-web'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> animationData <span class=\"keyword\">from</span> <span class=\"string\">'animationData.json'</span>; <span class=\"comment\">// 使用本地资源</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> animation = lottie.loadAnimation(&#123;</span><br><span class=\"line\">  container: element <span class=\"keyword\">as</span> Element, <span class=\"comment\">// the dom element that will contain the animation</span></span><br><span class=\"line\">  renderer: <span class=\"string\">'svg'</span>,</span><br><span class=\"line\">  name: name,</span><br><span class=\"line\">  loop: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  autoplay: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  animationData</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 添加事件</span></span><br><span class=\"line\">animation.addEventListener(<span class=\"string\">'enterFrame'</span>, <span class=\"function\"><span class=\"params\">i</span> =&gt;</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>loadAnimation</code>参数定义：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> AnimationConfig = &#123;</span><br><span class=\"line\">  container: Element; <span class=\"comment\">//动画容器</span></span><br><span class=\"line\">  renderer?: <span class=\"string\">'svg'</span> | <span class=\"string\">'canvas'</span> | <span class=\"string\">'html'</span>; <span class=\"comment\">//渲染方式</span></span><br><span class=\"line\">  loop?: <span class=\"built_in\">boolean</span> | <span class=\"built_in\">number</span>; <span class=\"comment\">//循环</span></span><br><span class=\"line\">  autoplay?: <span class=\"built_in\">boolean</span>; <span class=\"comment\">//自动播放</span></span><br><span class=\"line\">  name?: <span class=\"built_in\">string</span>; <span class=\"comment\">//动画名字</span></span><br><span class=\"line\">  rendererSettings?:</span><br><span class=\"line\">    | SVGRendererConfig</span><br><span class=\"line\">    | CanvasRendererConfig</span><br><span class=\"line\">    | HTMLRendererConfig; <span class=\"comment\">// 渲染设置</span></span><br><span class=\"line\">  path?: <span class=\"built_in\">string</span>; <span class=\"comment\">// 动画json路径</span></span><br><span class=\"line\">  animationData?: <span class=\"built_in\">any</span>; <span class=\"comment\">//本地动画json数据</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>初始化完成后，可以对<code>animation</code>对象添加事件以及对动画进行控制</p>\n<h4 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h4><p><code>调用方式</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation.addEventeListener(<span class=\"string\">'event'</span>, info =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(info);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>enterFrame</td>\n<td>播放每一帧动画的时候触发</td>\n</tr>\n<tr>\n<td>loopComplete</td>\n<td>当前循环播放完成触发</td>\n</tr>\n<tr>\n<td>complete</td>\n<td>动画播放完成触发</td>\n</tr>\n<tr>\n<td>segmentStart</td>\n<td>开始播放一个动画片段的时候触发</td>\n</tr>\n<tr>\n<td>destroy</td>\n<td>动画销毁时触发</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p><code>调用方式</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation.play();</span><br><span class=\"line\">animation.setSpeed(<span class=\"number\">1.5</span>);</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>参数及返回类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>play</td>\n<td>(): void</td>\n<td>播放</td>\n</tr>\n<tr>\n<td>stop</td>\n<td>(): void</td>\n<td>停止并回到第 0 帧</td>\n</tr>\n<tr>\n<td>pause</td>\n<td>(): void</td>\n<td>暂停</td>\n</tr>\n<tr>\n<td>setLocationHref</td>\n<td>(href: string): void</td>\n<td>设置本地资源路径</td>\n</tr>\n<tr>\n<td>setSpeed</td>\n<td>(speed: number): void</td>\n<td>设置动画播放速速</td>\n</tr>\n<tr>\n<td>goToAndPlay</td>\n<td>(value: number, isFrame?: boolean): void</td>\n<td>前进到传入帧并继续播放</td>\n</tr>\n<tr>\n<td>goToAndStop</td>\n<td>(value: number, isFrame?: boolean): void</td>\n<td>前进到传入帧并停止播放</td>\n</tr>\n<tr>\n<td>setDirection</td>\n<td>(direction: AnimationDirection): void</td>\n<td>设置动画方向</td>\n</tr>\n<tr>\n<td>playSegments</td>\n<td>(segments: [], forceFlag?: boolean): void</td>\n<td>播放指定帧数组的动画;</td>\n</tr>\n<tr>\n<td>destroy</td>\n<td>(): void</td>\n<td>主动销毁动画</td>\n</tr>\n<tr>\n<td>getDuration</td>\n<td>(inFrames?: boolean): number</td>\n<td>获取动画时长，可按帧或按秒返回</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用全球设计师分享的动画\"><a href=\"#使用全球设计师分享的动画\" class=\"headerlink\" title=\"使用全球设计师分享的动画\"></a>使用全球设计师分享的动画</h3><blockquote>\n<p>我们可以在 <a href=\"https://lottiefiles.com/\" target=\"_blank\" rel=\"noopener\">lottiefiles</a> 上看到来自全球优秀设计师们分享的动画，并十分简单的使用它。</p>\n</blockquote>\n<h3 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h3><h4 id=\"加载远程-json-文件\"><a href=\"#加载远程-json-文件\" class=\"headerlink\" title=\"加载远程 json 文件\"></a>加载远程 json 文件</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source =</span><br><span class=\"line\">  <span class=\"string\">'https://assets1.lottiefiles.com/datafiles/AembVTvov5PkTSJ/data.json'</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 加载远程json文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; sourceurl</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns 返回json对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> loadResource = <span class=\"keyword\">async</span> (sourceurl: <span class=\"built_in\">string</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(sourceurl);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">loadResource(<span class=\"built_in\">String</span>(source)).then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 加载完成后初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> animation = lottie.loadAnimation(&#123;</span><br><span class=\"line\">    container: element <span class=\"keyword\">as</span> Element, <span class=\"comment\">// the dom element that will contain the animation</span></span><br><span class=\"line\">    renderer: <span class=\"string\">'svg'</span>,</span><br><span class=\"line\">    name: name,</span><br><span class=\"line\">    loop: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    autoplay: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    animationData: json,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>###<a href=\"https://blog.9cnext.com/lottie_demo\">点击查看demo</a></p>\n<p>###<a href=\"https://github.com/Yechuanjie/lottie_demo\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","site":{"data":{"gallery":{"source":[{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/61933480.jpg","desc":"涂鸦"},{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/86403488.jpg","desc":"云南石林"}]}}},"excerpt":"<p>🌾 <code>Lottie</code> 是一个库，用于解析使用 <a href=\"https://www.adobe.com/cn/products/aftereffects.html\" target=\"_blank\" rel=\"noopener\">AE</a> 制作的动画（动画需要通过 AE 中的 bodymovin 插件将其导出为 json 数据格式），支持<code>web</code>、<code>ios</code>、<code>android</code> 和 <code>react native</code>。</p>","more":"<p>想提前看下效果的小伙伴请看<a href=\"https://blog.9cnext.com/lottie_demo\">这里~</a></p>\n<h3 id=\"Lottie-简介\"><a href=\"#Lottie-简介\" class=\"headerlink\" title=\"Lottie 简介\"></a>Lottie 简介</h3><p><a href=\"http://airbnb.io/lottie/\" target=\"_blank\" rel=\"noopener\">Lottie 官网</a></p>\n<blockquote>\n<p> 这里主要介绍 Lottie 的 web 版本 <strong>lottie-web</strong> 库，它可以解析导出的动画 json 文件，并将其以 svg 或者 canvas 的方式将动画绘制到页面中。</p>\n</blockquote>\n<h3 id=\"为什么使用-Lottie\"><a href=\"#为什么使用-Lottie\" class=\"headerlink\" title=\"为什么使用 Lottie\"></a>为什么使用 Lottie</h3><p>目前多帧动画一般的实现方式是：</p>\n<ul>\n<li>前端实现<code>svg、canvas</code>动画（实现成本较高、维护成本高）</li>\n<li>设计师切<code>gif</code>（文件较大、容易有锯齿）</li>\n<li><code>png</code>序列帧（文件较大、容易有锯齿）</li>\n</ul>\n<blockquote>\n<p>目前的动画实现方案有着各自的问题，所以我们需要寻找一种更加简单、高效、性能高的动画方案。airbnb 的 Lottie 是一套良好的动画解决方案。</p>\n</blockquote>\n<h3 id=\"Lottie-的优势\"><a href=\"#Lottie-的优势\" class=\"headerlink\" title=\"Lottie 的优势\"></a>Lottie 的优势</h3><p>Lottie 方法方案是由设计师出动画，导出为 json，给前端解析。所以，使用 Lottie 方案的好处在于：</p>\n<ul>\n<li>动画由设计使用专业的动画制作工具<code>Adobe After Effects</code>来实现，使动画实现更加方便，动画效果也更好；</li>\n<li>前端可以方便的调用动画，并对动画进行控制，减少前端动画工作量；</li>\n<li>设计制作动画，前端展现动画，专业人做专业事，分工合理；</li>\n<li>还原程度百分之百；</li>\n<li>使用 lottie 方案，json 文件大小会比 gif 文件小很多，性能也会更好。</li>\n</ul>\n<h3 id=\"Lottie-的不足\"><a href=\"#Lottie-的不足\" class=\"headerlink\" title=\"Lottie 的不足\"></a>Lottie 的不足</h3><ul>\n<li>lottie-web 文件比较大，lottie.js 大小为 532k，轻量版压缩后也有 150k，经过 gzip 后，大小为 43k。</li>\n<li>如果设计师建了很多的图层，可能仍然有 json 文件较大的问题，需要设计师遵循一定的设计规范。</li>\n</ul>\n<h3 id=\"lottie-web-使用方式\"><a href=\"#lottie-web-使用方式\" class=\"headerlink\" title=\"lottie-web 使用方式\"></a>lottie-web 使用方式</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p><code>npm install lottie-web</code> or <code>yarn add lottie-web</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lottie <span class=\"keyword\">from</span> <span class=\"string\">'lottie-web'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> animationData <span class=\"keyword\">from</span> <span class=\"string\">'animationData.json'</span>; <span class=\"comment\">// 使用本地资源</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> animation = lottie.loadAnimation(&#123;</span><br><span class=\"line\">  container: element <span class=\"keyword\">as</span> Element, <span class=\"comment\">// the dom element that will contain the animation</span></span><br><span class=\"line\">  renderer: <span class=\"string\">'svg'</span>,</span><br><span class=\"line\">  name: name,</span><br><span class=\"line\">  loop: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  autoplay: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  animationData</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 添加事件</span></span><br><span class=\"line\">animation.addEventListener(<span class=\"string\">'enterFrame'</span>, <span class=\"function\"><span class=\"params\">i</span> =&gt;</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>loadAnimation</code>参数定义：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> AnimationConfig = &#123;</span><br><span class=\"line\">  container: Element; <span class=\"comment\">//动画容器</span></span><br><span class=\"line\">  renderer?: <span class=\"string\">'svg'</span> | <span class=\"string\">'canvas'</span> | <span class=\"string\">'html'</span>; <span class=\"comment\">//渲染方式</span></span><br><span class=\"line\">  loop?: <span class=\"built_in\">boolean</span> | <span class=\"built_in\">number</span>; <span class=\"comment\">//循环</span></span><br><span class=\"line\">  autoplay?: <span class=\"built_in\">boolean</span>; <span class=\"comment\">//自动播放</span></span><br><span class=\"line\">  name?: <span class=\"built_in\">string</span>; <span class=\"comment\">//动画名字</span></span><br><span class=\"line\">  rendererSettings?:</span><br><span class=\"line\">    | SVGRendererConfig</span><br><span class=\"line\">    | CanvasRendererConfig</span><br><span class=\"line\">    | HTMLRendererConfig; <span class=\"comment\">// 渲染设置</span></span><br><span class=\"line\">  path?: <span class=\"built_in\">string</span>; <span class=\"comment\">// 动画json路径</span></span><br><span class=\"line\">  animationData?: <span class=\"built_in\">any</span>; <span class=\"comment\">//本地动画json数据</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>初始化完成后，可以对<code>animation</code>对象添加事件以及对动画进行控制</p>\n<h4 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h4><p><code>调用方式</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation.addEventeListener(<span class=\"string\">'event'</span>, info =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(info);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>enterFrame</td>\n<td>播放每一帧动画的时候触发</td>\n</tr>\n<tr>\n<td>loopComplete</td>\n<td>当前循环播放完成触发</td>\n</tr>\n<tr>\n<td>complete</td>\n<td>动画播放完成触发</td>\n</tr>\n<tr>\n<td>segmentStart</td>\n<td>开始播放一个动画片段的时候触发</td>\n</tr>\n<tr>\n<td>destroy</td>\n<td>动画销毁时触发</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p><code>调用方式</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation.play();</span><br><span class=\"line\">animation.setSpeed(<span class=\"number\">1.5</span>);</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>参数及返回类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>play</td>\n<td>(): void</td>\n<td>播放</td>\n</tr>\n<tr>\n<td>stop</td>\n<td>(): void</td>\n<td>停止并回到第 0 帧</td>\n</tr>\n<tr>\n<td>pause</td>\n<td>(): void</td>\n<td>暂停</td>\n</tr>\n<tr>\n<td>setLocationHref</td>\n<td>(href: string): void</td>\n<td>设置本地资源路径</td>\n</tr>\n<tr>\n<td>setSpeed</td>\n<td>(speed: number): void</td>\n<td>设置动画播放速速</td>\n</tr>\n<tr>\n<td>goToAndPlay</td>\n<td>(value: number, isFrame?: boolean): void</td>\n<td>前进到传入帧并继续播放</td>\n</tr>\n<tr>\n<td>goToAndStop</td>\n<td>(value: number, isFrame?: boolean): void</td>\n<td>前进到传入帧并停止播放</td>\n</tr>\n<tr>\n<td>setDirection</td>\n<td>(direction: AnimationDirection): void</td>\n<td>设置动画方向</td>\n</tr>\n<tr>\n<td>playSegments</td>\n<td>(segments: [], forceFlag?: boolean): void</td>\n<td>播放指定帧数组的动画;</td>\n</tr>\n<tr>\n<td>destroy</td>\n<td>(): void</td>\n<td>主动销毁动画</td>\n</tr>\n<tr>\n<td>getDuration</td>\n<td>(inFrames?: boolean): number</td>\n<td>获取动画时长，可按帧或按秒返回</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用全球设计师分享的动画\"><a href=\"#使用全球设计师分享的动画\" class=\"headerlink\" title=\"使用全球设计师分享的动画\"></a>使用全球设计师分享的动画</h3><blockquote>\n<p>我们可以在 <a href=\"https://lottiefiles.com/\" target=\"_blank\" rel=\"noopener\">lottiefiles</a> 上看到来自全球优秀设计师们分享的动画，并十分简单的使用它。</p>\n</blockquote>\n<h3 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h3><h4 id=\"加载远程-json-文件\"><a href=\"#加载远程-json-文件\" class=\"headerlink\" title=\"加载远程 json 文件\"></a>加载远程 json 文件</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source =</span><br><span class=\"line\">  <span class=\"string\">'https://assets1.lottiefiles.com/datafiles/AembVTvov5PkTSJ/data.json'</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 加载远程json文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; sourceurl</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns 返回json对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> loadResource = <span class=\"keyword\">async</span> (sourceurl: <span class=\"built_in\">string</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(sourceurl);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">loadResource(<span class=\"built_in\">String</span>(source)).then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 加载完成后初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> animation = lottie.loadAnimation(&#123;</span><br><span class=\"line\">    container: element <span class=\"keyword\">as</span> Element, <span class=\"comment\">// the dom element that will contain the animation</span></span><br><span class=\"line\">    renderer: <span class=\"string\">'svg'</span>,</span><br><span class=\"line\">    name: name,</span><br><span class=\"line\">    loop: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    autoplay: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    animationData: json,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>###<a href=\"https://blog.9cnext.com/lottie_demo\">点击查看demo</a></p>\n<p>###<a href=\"https://github.com/Yechuanjie/lottie_demo\" target=\"_blank\" rel=\"noopener\">github</a></p>"},{"title":"react-cli","date":"2020-07-13T09:44:03.000Z","_content":"\n🎉 `react` 移动端开发脚手架，技术栈 `react` + `antd-mobile` +`react-router` + `redux` + `typescript`\n\n<!-- more -->\n\n该脚手架基于 [Create React App](https://github.com/facebook/create-react-app) 创建，方便快速搭建 react 移动端项目。[项目地址](http://blog.9cnext.com/react-cli/index) && [仓库地址](https://github.com/Yechuanjie/react-cli)\n\n<span id=\"top\">目录：</span>\n\n[✔ TypeScript 开发语言](#ts)\n\n[✔ redux 状态管理](#redux)\n\n[✔ react-router 路由管理](#router)\n\n[✔ axios 封装及接口管理](#axios)\n\n[✔ 本地 mock server 支持](#mock)\n\n[✔ 本地跨域配置](#proxy)\n\n[✔ esint + prettier 统一开发规范](#eslint)\n\n[✔ 支持自定义 webpack 配置](#webpack)\n\n[✔ rem 适配方案 ](#rem)\n\n[✔ antd-moblie 组件按需加载](#antd)\n\n[✔ 配置 alias 别名](#alias)\n\n[✔ 配置打包分析](#analyze)\n\n[✔ 配置多环境变量](#env)\n\n#### <span id=\"ts\">✅ TypeScript 开发语言</span>\n\n`TypeScript` 是 `JavaScript` 类型的超集，它可以编译成纯 `JavaScript`。它的最大特点就是支持强类型和 [ES6 Class](http://es6.ruanyifeng.com/#docs/class)\n\n[▲  回顶部](#top)\n\n#### <span id=\"redux\">✅ redux  状态管理</span>\n\n目录结构\n\n```\n├─store\n│  │ index.ts\n│  │\n│  ├─actions\n│  │   user.ts\n│  │\n│  └─reducers\n│      index.ts\n│      user.ts\n```\n\n拆分 reducer\n\n`store/index` 中 `combineReducers()` 方法将多个小的 reducer 组合成一个 rootReducer，而每个小的 reducer 只关心自己负责的 `action.type`\n\n`src/index.tsx` 中引入\n\n```tsx\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n```\n\n使用\n\n```tsx\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setAppUserInfo } from '@/store/actions/user'\n\nfunction Index() {\n  const userInfo = useSelector((state: PageStateProps) => state.user)\n  const dispath = useDispatch()\n\n  const updateInfo = () => {\n    dispath(\n      setAppUserInfo({\n        userId: '413',\n        nickName: 'developer',\n        sex: 1\n      })\n    )\n  }\n  return (\n    <div className=\"page\">\n      <div onClick={updateInfo}>\n        <Logo></Logo>\n      </div>\n      <div className=\"welcome\">hello {userInfo.nickName}!</div>\n    </div>\n  )\n}\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"router\"> ✅ react-router 路由管理</span>\n\n本项目采用 `history` 模式，如需使用 `hash` 模式，请使用 `HashRouter` 替换 `BrowserRouter`\n\n`basename` 属性可以根据项目路径来修改，例如本项目地址为：[http://blog.9cnext.com/react-cli](http://blog.9cnext.com/react-cli)，则 `basename=\"/react-cli\"`，若不需要子路径，则默认`basename = '/'`\n\n`src/router/routes.ts`\n\n```ts\nimport { lazy } from 'react'\nconst Index = lazy(() => import('@/pages/index'))\n\nexport const routes: RouteConfig[] = [\n  {\n    path: '/index',\n    component: Index,\n    exact: true,\n    routes: []\n  }\n]\n```\n\n`src/router/index.tsx`\n\n```tsx\nimport React, { Suspense } from 'react'\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom'\nimport { routes } from './routes'\n\nconst RouterView = () => (\n  <BrowserRouter basename=\"/react-cli\">\n    <Suspense fallback={<div>加载中</div>}>\n      <Switch>\n        {routes.map(route => (\n          <Route key={route.path} path={route.path} component={route.component} exact={route.exact}></Route>\n        ))}\n        <Redirect to=\"/index\"></Redirect>\n      </Switch>\n    </Suspense>\n  </BrowserRouter>\n)\nexport default RouterView\n```\n\n使用 `lazy` + `Suspense` 的方式实现路由懒加载以及组件异步加载\n\n[▲  回顶部](#top)\n\n#### <span id=\"axios\">✅ axios 封装及接口管理</span>\n\n将 `axios` 请求进行二次封装，统一请求方式、实现公共参数配置、实现统一的错误拦截处理，并返回与后端统一的 `Promise<ResponseType>` 对象\n\n`request` 封装 ，`src/api/request.ts`\n\n```ts\nimport axios, { AxiosRequestConfig, Method } from 'axios'\nimport envConfig from '@/config'\n/**\n * 接口返回类型 (根据后端返回的格式定义)\n * @interface ResponseType\n */\ninterface ResponseType {\n  data: any\n  msg: string\n  code: number\n}\n/**\n * 封装request\n *\n * @param {string} url\n * @param {Method} method\n * @param {*} [data]\n * @param {boolean} [loading]\n * @returns {Promise<ResponseType>}\n */\nexport default function request(url: string, method: Method, data?: {}, loading?: boolean): Promise<ResponseType> {\n  /* 请求公共参数配置 */\n  const publicParams = {\n    env: envConfig.ENV_TYPE,\n    mockType: 1,\n    source: 'h5'\n  }\n  // 合并公共参数\n  data = Object.assign({}, data, publicParams)\n  const options: AxiosRequestConfig = {\n    url,\n    method,\n    params: method.toUpperCase() === 'GET' || method.toUpperCase() === 'DELETE' ? data : null,\n    data: method.toUpperCase() === 'POST' || method.toUpperCase() === 'PUT' ? data : null\n  }\n\n  const AxiosInstance = initAxios(loading)\n  return new Promise((resolve, reject) => {\n    AxiosInstance(options)\n      .then(res => {\n        const data = res.data as ResponseType\n        // 这里可以添加和后台的 status 约定\n        // if (data.code !== 200) {\n        //   Toast.info(data.msg)\n        // }\n        resolve(data)\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n```\n\n接口管理 `src/api/index.ts`\n\n```ts\nimport request from './request'\n\nexport const getList = (params: { type: number }) => request('/api/getInfo', 'GET', { ...params }, true)\n```\n\n使用封装的`request`\n\n```ts\nimport * as API from '@/api/index'\nconst updateInfo = async () => {\n  // get 请求\n  const list = await API.getList({ type: 1 })\n  console.info(list) // 请求结果就是封装后的 Promise<ResponseType> 类型\n  // 对于接口返回的数据格式，可以统一在global.d.ts里定义interface，假设你已经定义了 interface ListDetail, 然后如下使用\n  const data = list.data as ListDetail // 断言data类型，后续就可以直接使用定义好的数据结构\n}\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"mock\">✅ 本地 mock server 支持</span>\n\n`src/mock` 实现了本地 `mock server` 开发。\n\n注意： `nodejs` 环境下默认不支持 `esModules`，将`src/mock`下的文件，修改为`.mjs`后缀，同时在`package.json` 的`scripts`中新增`experimental-modules`命令使其可以使用`esModules`\n\n`package.json`\n\n```json\nscripts: {\n  \"mock\": \"node --experimental-modules src/mock/server.mjs\"\n}\n```\n\n本项目使用 `express` 作为服务器开发\n\n`src/mock/server.mjs`\n\n```javascript\nimport express from 'express'\nimport mockData from './mock.mjs'\nimport bodyParser from 'body-parser'\n\nconst app = express()\n// body-parser 解析json格式数据\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\n\nconst router = express.Router()\n\nrouter.use('/', mockData)\napp.use('/api', router)\n\napp.listen(3001, () => {\n  console.log('Example app listening on port 3001!')\n})\n```\n\nmock 数据根据需求在`src/mock/mock.mjs`中自定义修改，更多 mock 使用方式可以查看[mock 官方示例](<%5Bhttp://mockjs.com/examples.html%5D(http://mockjs.com/examples.html)>)。\n\n`src/mock/mock.mjs`\n\n```javascript\nimport Mock from 'mockjs'\nimport express from 'express'\nconst router = express.Router()\n/*\n * get类型接口\n * /api/getInfo 获取列表\n */\nrouter.get('/getInfo', (req, res) => {\n  console.info(req.query.type)\n  const data = Mock.mock({\n    'list|1-8': [\n      {\n        'name|1': ['John', 'Jessen', 'Mark'],\n        'desc|1': ['Hello', 'React-cli', 'Try it!']\n      }\n    ]\n  })\n  return res.json({\n    data,\n    code: 200,\n    msg: ''\n  })\n})\n```\n\n开启本地 `mock` 服务\n\n```shell\nyarn mock\n```\n\n本地开启 `mock` 服务后，所有本地 `api` 请求都会导致**跨域问题**，请参考[✅ 本地跨域配置](#proxy)\n\n[▲  回顶部](#top)\n\n#### <span id=\"proxy\">✅ 本地跨域配置</span>\n\n为解决本地接口请求跨域，需要使用到 `http-proxy-middleware` 中间件。在 src 根目录下创建`setupProxy.js`文件，注意这里只能使用 `.js` 后缀，因为该中间件默认读取的是 `js` 文件\n\n`src/setupProxy.js`\n\n```javascript\nconst { createProxyMiddleware } = require('http-proxy-middleware')\nmodule.exports = function (app) {\n  app.use(\n    createProxyMiddleware('/api', {\n      // 代理服务器地址\n      target: 'http://localhost:3001',\n      secure: false,\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    })\n  )\n}\n```\n\n这样一来，就可以愉快的在本地请求自己的`mock`数据啦！\n\n[▲  回顶部](#top)\n\n#### <span id=\"eslint\">✅ eslint + prettier 统一开发规范</span>\n\n在`package.json`文件中编写自定义`eslint`规则\n\n```json\n{\n  \"eslintConfig\": {\n    \"extends\": \"react-app\",\n    \"rules\": {\n      \"import/no-commonjs\": 0\n    }\n  }\n}\n```\n\n编写统一的`prettier`规范文件 `.prettierrc`\n\n```json\n{\n  \"singleQuote\": true,\n  \"semi\": false,\n  \"printWidth\": 120,\n  \"arrowParens\": \"avoid\",\n  \"bracketSpacing\": true,\n  \"jsxBracketSameLine\": true,\n  \"trailingComma\": \"none\"\n}\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"webpack\">✅ 支持自定义 webpack 配置</span>\n\n通过 `customize-cra` 暴露 `webpack` 配置的`config-overrides.js`文件，使我们可以不用 `eject` 的方式就能在这里覆盖重写 `webpack` 配置，目前已支持几十种相关配置自定义，具体可查看[customize-cra api docs](<[https://github.com/arackaf/customize-cra/blob/HEAD/api.md](https://github.com/arackaf/customize-cra/blob/HEAD/api.md)>)。\n\n[▲  回顶部](#top)\n\n#### <span id=\"rem\">✅ rem 适配方案 </span>\n\n项目已经配置好 `rem` 适配，下面仅做介绍：\n\n`antd-mobile` 中的样式默认使用`px`作为单位，如果需要使用`rem`单位，推荐使用`postcss-px2rem` 搭配 `src/utils/rem.ts`一起使用。其中 `src/utils/rem.ts` 实现了一个极简的 rem 库。\n\n`postcss-px2rem` 插件使用\n\n- 假如设计图给的宽度是 750，remUnit 设置为 75，这样我们写样式时，可以直接按照设计图标注的宽高来 1:1 还原开发。\n\n- PS: 如果引用了某些没有兼容 px2rem 第三方 UI 框架，有的 1rem = 100px（antd-mobile）， 有的 1rem = 75px\n\n- 需要将 remUnit 的值设置为像素对应的一半（antd-mobile 即 50），即可以 1:1 还原组件，否则会样式会有变化，例如按钮会变小。\n\n`config-overrides.js`，使用`addPostcssPlugins`设置\n\n```javascript\nconst { override, addPostcssPlugins } = require('customize-cra')\nmodule.exports = override(addPostcssPlugins([require('postcss-px2rem')({ remUnit: 50 })]))\n```\n\n[▲  回顶部](#top)\n\n#### <span id='antd'>✅ antd-moblie 组件按需加载</span>\n\n[babel-plugin-import](https://github.com/ant-design/babel-plugin-import) 是一款 `babel` 插件，它会在编译过程中将 `import` 的写法自动转换为按需引入的方式。\n\n安装插件\n\n```shell\nyarn add babel-plugin-import\n```\n\n`config-overrides.js`，使用`fixBabelImports`设置\n\n```javascript\nconst { override, fixBabelImports } = require('customize-cra')\n// 引用 antd 后设置按需引入后，在打包的时候会生成很多 .map 文件\nprocess.env.GENERATE_SOURCEMAP = 'false'\nmodule.exports = override(\n  /* 按需引入antd-mobile */\n  fixBabelImports('import', {\n    libraryName: 'antd-mobile',\n    style: 'css'\n  })\n)\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"alias\">✅ 配置 alias 别名</span>\n\n`config-overrides.js`，使用`addWebpackAlias`设置\n\n```javascript\nconst { override, addWebpackAlias } = require('customize-cra')\nconst path = require('path')\nconst resolve = dir => path.join(__dirname, dir)\nmodule.exports = override(\n  addWebpackAlias({\n    '@/': resolve('src'),\n    '@/pages': resolve('./src/pages'),\n    '@/api': resolve('./src/api')\n  })\n)\n```\n\n##### tsconfig.json\n\n根目录的 `tsconfig.json` 文件中也需要设置别名的支持，否则 ts 会提示无法识别别名\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\",\n    \"paths\": {\n      \"@/*\": [\"*\"]\n    }\n  }\n}\n```\n\n`Tips:` 推荐使用 `vscode` 开发，安装 `path-intellisense`插件, 并在 `setting.json` 中设置别名映射，就能在使用别名时提示文件路径\n\n```JSON\n\"path-intellisense.mappings\": {\n  \"@\": \"\\${workspaceRoot}/src\"\n}\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"analyze\">✅ 配置打包分析</span>\n\nwebpack-bundle-analyzer 是一款分析代码大小的插件\n\n首先安装它：\n\n```shell\nyarn add webpack-bundle-analyzer\n```\n\n在 `config-overrides.js` 中，使用 `addWebpackPlugin` 设置\n\n```javascript\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer')\nconst { override, addWebpackPlugin } = require('customize-cra')\n\nconst analyze = process.env.REACT_APP_ENV === 'development' //是否分析打包数据\n\nmodule.exports = override(\n  analyze\n    ? addWebpackPlugin(\n        new BundleAnalyzerPlugin({\n          analyzerMode: 'static' //输出静态报告文件report.html，而不是启动一个web服务\n        })\n      )\n    : undefined\n)\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"env\">✅ 配置多环境变量 </span>\n\n`package.json` 里的 `scripts` 配置 `build:dev` `build:sta` `build:pro`来执行不同环境\n\n- `yarn start` 启动本地 , 默认执行 `development`\n- `yarn build:dev` 打包测试环境 , 执行 `development`\n- `yarn build:sta` 打包预发布环境 , 执行 `staging`\n- `yarn build:pro` 打包正式环境 , 执行 `production`\n\n```json\n\"scripts\": {\n  \"start\": \"react-app-rewired start\",\n  \"build:dev\": \"dotenv -e .env.development react-app-rewired build\",\n  \"build:sta\": \"dotenv -e .env.staging react-app-rewired build\",\n  \"build:pro\": \"dotenv -e .env.production react-app-rewired build\"\n}\n```\n\n##### 配置详情\n\n在 **根目录** 下创建不同的环境变量文件，如 `.env.development` ，`.env.staging`， `.env.production`，就如你所看到的 `scripts` ，通过 `dotenv` 可以指定不同的环境变量文件。\n\n在代码中可以通过 `process.env.REACT_APP_ENV` 访问所在的环境变量。除了 `REACT_APP_*` 变量之外，在你的应用代码中始终可用的还有两个特殊的变量`NODE_ENV` 和`BASE_URL`\n\n- **.env.development**\n  \n  ```javascript\n  # 测试环境\n  # must start with REACT_APP_\n  REACT_APP_ENV = 'development'\n  ```\n\n- **.env.staging**\n  \n  ```javascript\n  # 预发布环境\n  # must start with REACT_APP_\n  REACT_APP_ENV = 'staging'\n  ```\n\n- **.env.production**\n  \n  ```javascript\n  # 正式环境\n  # must start with REACT_APP_\n  REACT_APP_ENV = 'production'\n  ```\n\n这里我们并没有定义全部环境变量，只定义了基础的环境类型 REACT_APP_ENV `development`，`staging`， `production` 。变量我们统一在 `src/config/env.*.ts` 里进行管理\n\n`question:` 为什么要在 `config` 中新建三个文件，而不是直接写在环境变量文件里呢？\n\n- **修改变量方便，无需重新启动项目**\n\n- **引入方式更符合模块化标准**\n\nconfig/index.ts\n\n```javascript\n// 根据build命令指定的环境，引入不同配置\nconst config = require('./env.' + process.env.REACT_APP_ENV)\nexport default config.default\n```\n\n每种环境单独去配置公共变量，以测试环境配置为例\n\n`config/.env.development.ts`\n\n```javascript\n// 测试环境配置\nexport default {\n  ENV_TYPE: '测试环境',\n  BASE_URL: '//test.xxx.com' // api请求地址\n  OTHER_GLOBAL_VAR: 'xxx' // 可添加自定义的公共变量\n}\n```\n\n根据环境变量不同，`config` 配置就会不同\n\n```javascript\nimport config from '@/config'\nconsole.info(config)\n// config\n{\n  ENV_TYPE: '测试环境',\n  BASE_URL: '//test.xxx.com'\n  OTHER_GLOBAL_VAR: 'xxx'\n}\n```\n\n[▲  回顶部](#top)","source":"_posts/react-cli.md","raw":"---\ntitle: react-cli\ndate: 2020-07-13 09:44:03\ntags:\n---\n\n🎉 `react` 移动端开发脚手架，技术栈 `react` + `antd-mobile` +`react-router` + `redux` + `typescript`\n\n<!-- more -->\n\n该脚手架基于 [Create React App](https://github.com/facebook/create-react-app) 创建，方便快速搭建 react 移动端项目。[项目地址](http://blog.9cnext.com/react-cli/index) && [仓库地址](https://github.com/Yechuanjie/react-cli)\n\n<span id=\"top\">目录：</span>\n\n[✔ TypeScript 开发语言](#ts)\n\n[✔ redux 状态管理](#redux)\n\n[✔ react-router 路由管理](#router)\n\n[✔ axios 封装及接口管理](#axios)\n\n[✔ 本地 mock server 支持](#mock)\n\n[✔ 本地跨域配置](#proxy)\n\n[✔ esint + prettier 统一开发规范](#eslint)\n\n[✔ 支持自定义 webpack 配置](#webpack)\n\n[✔ rem 适配方案 ](#rem)\n\n[✔ antd-moblie 组件按需加载](#antd)\n\n[✔ 配置 alias 别名](#alias)\n\n[✔ 配置打包分析](#analyze)\n\n[✔ 配置多环境变量](#env)\n\n#### <span id=\"ts\">✅ TypeScript 开发语言</span>\n\n`TypeScript` 是 `JavaScript` 类型的超集，它可以编译成纯 `JavaScript`。它的最大特点就是支持强类型和 [ES6 Class](http://es6.ruanyifeng.com/#docs/class)\n\n[▲  回顶部](#top)\n\n#### <span id=\"redux\">✅ redux  状态管理</span>\n\n目录结构\n\n```\n├─store\n│  │ index.ts\n│  │\n│  ├─actions\n│  │   user.ts\n│  │\n│  └─reducers\n│      index.ts\n│      user.ts\n```\n\n拆分 reducer\n\n`store/index` 中 `combineReducers()` 方法将多个小的 reducer 组合成一个 rootReducer，而每个小的 reducer 只关心自己负责的 `action.type`\n\n`src/index.tsx` 中引入\n\n```tsx\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n```\n\n使用\n\n```tsx\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setAppUserInfo } from '@/store/actions/user'\n\nfunction Index() {\n  const userInfo = useSelector((state: PageStateProps) => state.user)\n  const dispath = useDispatch()\n\n  const updateInfo = () => {\n    dispath(\n      setAppUserInfo({\n        userId: '413',\n        nickName: 'developer',\n        sex: 1\n      })\n    )\n  }\n  return (\n    <div className=\"page\">\n      <div onClick={updateInfo}>\n        <Logo></Logo>\n      </div>\n      <div className=\"welcome\">hello {userInfo.nickName}!</div>\n    </div>\n  )\n}\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"router\"> ✅ react-router 路由管理</span>\n\n本项目采用 `history` 模式，如需使用 `hash` 模式，请使用 `HashRouter` 替换 `BrowserRouter`\n\n`basename` 属性可以根据项目路径来修改，例如本项目地址为：[http://blog.9cnext.com/react-cli](http://blog.9cnext.com/react-cli)，则 `basename=\"/react-cli\"`，若不需要子路径，则默认`basename = '/'`\n\n`src/router/routes.ts`\n\n```ts\nimport { lazy } from 'react'\nconst Index = lazy(() => import('@/pages/index'))\n\nexport const routes: RouteConfig[] = [\n  {\n    path: '/index',\n    component: Index,\n    exact: true,\n    routes: []\n  }\n]\n```\n\n`src/router/index.tsx`\n\n```tsx\nimport React, { Suspense } from 'react'\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom'\nimport { routes } from './routes'\n\nconst RouterView = () => (\n  <BrowserRouter basename=\"/react-cli\">\n    <Suspense fallback={<div>加载中</div>}>\n      <Switch>\n        {routes.map(route => (\n          <Route key={route.path} path={route.path} component={route.component} exact={route.exact}></Route>\n        ))}\n        <Redirect to=\"/index\"></Redirect>\n      </Switch>\n    </Suspense>\n  </BrowserRouter>\n)\nexport default RouterView\n```\n\n使用 `lazy` + `Suspense` 的方式实现路由懒加载以及组件异步加载\n\n[▲  回顶部](#top)\n\n#### <span id=\"axios\">✅ axios 封装及接口管理</span>\n\n将 `axios` 请求进行二次封装，统一请求方式、实现公共参数配置、实现统一的错误拦截处理，并返回与后端统一的 `Promise<ResponseType>` 对象\n\n`request` 封装 ，`src/api/request.ts`\n\n```ts\nimport axios, { AxiosRequestConfig, Method } from 'axios'\nimport envConfig from '@/config'\n/**\n * 接口返回类型 (根据后端返回的格式定义)\n * @interface ResponseType\n */\ninterface ResponseType {\n  data: any\n  msg: string\n  code: number\n}\n/**\n * 封装request\n *\n * @param {string} url\n * @param {Method} method\n * @param {*} [data]\n * @param {boolean} [loading]\n * @returns {Promise<ResponseType>}\n */\nexport default function request(url: string, method: Method, data?: {}, loading?: boolean): Promise<ResponseType> {\n  /* 请求公共参数配置 */\n  const publicParams = {\n    env: envConfig.ENV_TYPE,\n    mockType: 1,\n    source: 'h5'\n  }\n  // 合并公共参数\n  data = Object.assign({}, data, publicParams)\n  const options: AxiosRequestConfig = {\n    url,\n    method,\n    params: method.toUpperCase() === 'GET' || method.toUpperCase() === 'DELETE' ? data : null,\n    data: method.toUpperCase() === 'POST' || method.toUpperCase() === 'PUT' ? data : null\n  }\n\n  const AxiosInstance = initAxios(loading)\n  return new Promise((resolve, reject) => {\n    AxiosInstance(options)\n      .then(res => {\n        const data = res.data as ResponseType\n        // 这里可以添加和后台的 status 约定\n        // if (data.code !== 200) {\n        //   Toast.info(data.msg)\n        // }\n        resolve(data)\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n```\n\n接口管理 `src/api/index.ts`\n\n```ts\nimport request from './request'\n\nexport const getList = (params: { type: number }) => request('/api/getInfo', 'GET', { ...params }, true)\n```\n\n使用封装的`request`\n\n```ts\nimport * as API from '@/api/index'\nconst updateInfo = async () => {\n  // get 请求\n  const list = await API.getList({ type: 1 })\n  console.info(list) // 请求结果就是封装后的 Promise<ResponseType> 类型\n  // 对于接口返回的数据格式，可以统一在global.d.ts里定义interface，假设你已经定义了 interface ListDetail, 然后如下使用\n  const data = list.data as ListDetail // 断言data类型，后续就可以直接使用定义好的数据结构\n}\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"mock\">✅ 本地 mock server 支持</span>\n\n`src/mock` 实现了本地 `mock server` 开发。\n\n注意： `nodejs` 环境下默认不支持 `esModules`，将`src/mock`下的文件，修改为`.mjs`后缀，同时在`package.json` 的`scripts`中新增`experimental-modules`命令使其可以使用`esModules`\n\n`package.json`\n\n```json\nscripts: {\n  \"mock\": \"node --experimental-modules src/mock/server.mjs\"\n}\n```\n\n本项目使用 `express` 作为服务器开发\n\n`src/mock/server.mjs`\n\n```javascript\nimport express from 'express'\nimport mockData from './mock.mjs'\nimport bodyParser from 'body-parser'\n\nconst app = express()\n// body-parser 解析json格式数据\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\n\nconst router = express.Router()\n\nrouter.use('/', mockData)\napp.use('/api', router)\n\napp.listen(3001, () => {\n  console.log('Example app listening on port 3001!')\n})\n```\n\nmock 数据根据需求在`src/mock/mock.mjs`中自定义修改，更多 mock 使用方式可以查看[mock 官方示例](<%5Bhttp://mockjs.com/examples.html%5D(http://mockjs.com/examples.html)>)。\n\n`src/mock/mock.mjs`\n\n```javascript\nimport Mock from 'mockjs'\nimport express from 'express'\nconst router = express.Router()\n/*\n * get类型接口\n * /api/getInfo 获取列表\n */\nrouter.get('/getInfo', (req, res) => {\n  console.info(req.query.type)\n  const data = Mock.mock({\n    'list|1-8': [\n      {\n        'name|1': ['John', 'Jessen', 'Mark'],\n        'desc|1': ['Hello', 'React-cli', 'Try it!']\n      }\n    ]\n  })\n  return res.json({\n    data,\n    code: 200,\n    msg: ''\n  })\n})\n```\n\n开启本地 `mock` 服务\n\n```shell\nyarn mock\n```\n\n本地开启 `mock` 服务后，所有本地 `api` 请求都会导致**跨域问题**，请参考[✅ 本地跨域配置](#proxy)\n\n[▲  回顶部](#top)\n\n#### <span id=\"proxy\">✅ 本地跨域配置</span>\n\n为解决本地接口请求跨域，需要使用到 `http-proxy-middleware` 中间件。在 src 根目录下创建`setupProxy.js`文件，注意这里只能使用 `.js` 后缀，因为该中间件默认读取的是 `js` 文件\n\n`src/setupProxy.js`\n\n```javascript\nconst { createProxyMiddleware } = require('http-proxy-middleware')\nmodule.exports = function (app) {\n  app.use(\n    createProxyMiddleware('/api', {\n      // 代理服务器地址\n      target: 'http://localhost:3001',\n      secure: false,\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    })\n  )\n}\n```\n\n这样一来，就可以愉快的在本地请求自己的`mock`数据啦！\n\n[▲  回顶部](#top)\n\n#### <span id=\"eslint\">✅ eslint + prettier 统一开发规范</span>\n\n在`package.json`文件中编写自定义`eslint`规则\n\n```json\n{\n  \"eslintConfig\": {\n    \"extends\": \"react-app\",\n    \"rules\": {\n      \"import/no-commonjs\": 0\n    }\n  }\n}\n```\n\n编写统一的`prettier`规范文件 `.prettierrc`\n\n```json\n{\n  \"singleQuote\": true,\n  \"semi\": false,\n  \"printWidth\": 120,\n  \"arrowParens\": \"avoid\",\n  \"bracketSpacing\": true,\n  \"jsxBracketSameLine\": true,\n  \"trailingComma\": \"none\"\n}\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"webpack\">✅ 支持自定义 webpack 配置</span>\n\n通过 `customize-cra` 暴露 `webpack` 配置的`config-overrides.js`文件，使我们可以不用 `eject` 的方式就能在这里覆盖重写 `webpack` 配置，目前已支持几十种相关配置自定义，具体可查看[customize-cra api docs](<[https://github.com/arackaf/customize-cra/blob/HEAD/api.md](https://github.com/arackaf/customize-cra/blob/HEAD/api.md)>)。\n\n[▲  回顶部](#top)\n\n#### <span id=\"rem\">✅ rem 适配方案 </span>\n\n项目已经配置好 `rem` 适配，下面仅做介绍：\n\n`antd-mobile` 中的样式默认使用`px`作为单位，如果需要使用`rem`单位，推荐使用`postcss-px2rem` 搭配 `src/utils/rem.ts`一起使用。其中 `src/utils/rem.ts` 实现了一个极简的 rem 库。\n\n`postcss-px2rem` 插件使用\n\n- 假如设计图给的宽度是 750，remUnit 设置为 75，这样我们写样式时，可以直接按照设计图标注的宽高来 1:1 还原开发。\n\n- PS: 如果引用了某些没有兼容 px2rem 第三方 UI 框架，有的 1rem = 100px（antd-mobile）， 有的 1rem = 75px\n\n- 需要将 remUnit 的值设置为像素对应的一半（antd-mobile 即 50），即可以 1:1 还原组件，否则会样式会有变化，例如按钮会变小。\n\n`config-overrides.js`，使用`addPostcssPlugins`设置\n\n```javascript\nconst { override, addPostcssPlugins } = require('customize-cra')\nmodule.exports = override(addPostcssPlugins([require('postcss-px2rem')({ remUnit: 50 })]))\n```\n\n[▲  回顶部](#top)\n\n#### <span id='antd'>✅ antd-moblie 组件按需加载</span>\n\n[babel-plugin-import](https://github.com/ant-design/babel-plugin-import) 是一款 `babel` 插件，它会在编译过程中将 `import` 的写法自动转换为按需引入的方式。\n\n安装插件\n\n```shell\nyarn add babel-plugin-import\n```\n\n`config-overrides.js`，使用`fixBabelImports`设置\n\n```javascript\nconst { override, fixBabelImports } = require('customize-cra')\n// 引用 antd 后设置按需引入后，在打包的时候会生成很多 .map 文件\nprocess.env.GENERATE_SOURCEMAP = 'false'\nmodule.exports = override(\n  /* 按需引入antd-mobile */\n  fixBabelImports('import', {\n    libraryName: 'antd-mobile',\n    style: 'css'\n  })\n)\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"alias\">✅ 配置 alias 别名</span>\n\n`config-overrides.js`，使用`addWebpackAlias`设置\n\n```javascript\nconst { override, addWebpackAlias } = require('customize-cra')\nconst path = require('path')\nconst resolve = dir => path.join(__dirname, dir)\nmodule.exports = override(\n  addWebpackAlias({\n    '@/': resolve('src'),\n    '@/pages': resolve('./src/pages'),\n    '@/api': resolve('./src/api')\n  })\n)\n```\n\n##### tsconfig.json\n\n根目录的 `tsconfig.json` 文件中也需要设置别名的支持，否则 ts 会提示无法识别别名\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\",\n    \"paths\": {\n      \"@/*\": [\"*\"]\n    }\n  }\n}\n```\n\n`Tips:` 推荐使用 `vscode` 开发，安装 `path-intellisense`插件, 并在 `setting.json` 中设置别名映射，就能在使用别名时提示文件路径\n\n```JSON\n\"path-intellisense.mappings\": {\n  \"@\": \"\\${workspaceRoot}/src\"\n}\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"analyze\">✅ 配置打包分析</span>\n\nwebpack-bundle-analyzer 是一款分析代码大小的插件\n\n首先安装它：\n\n```shell\nyarn add webpack-bundle-analyzer\n```\n\n在 `config-overrides.js` 中，使用 `addWebpackPlugin` 设置\n\n```javascript\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer')\nconst { override, addWebpackPlugin } = require('customize-cra')\n\nconst analyze = process.env.REACT_APP_ENV === 'development' //是否分析打包数据\n\nmodule.exports = override(\n  analyze\n    ? addWebpackPlugin(\n        new BundleAnalyzerPlugin({\n          analyzerMode: 'static' //输出静态报告文件report.html，而不是启动一个web服务\n        })\n      )\n    : undefined\n)\n```\n\n[▲  回顶部](#top)\n\n#### <span id=\"env\">✅ 配置多环境变量 </span>\n\n`package.json` 里的 `scripts` 配置 `build:dev` `build:sta` `build:pro`来执行不同环境\n\n- `yarn start` 启动本地 , 默认执行 `development`\n- `yarn build:dev` 打包测试环境 , 执行 `development`\n- `yarn build:sta` 打包预发布环境 , 执行 `staging`\n- `yarn build:pro` 打包正式环境 , 执行 `production`\n\n```json\n\"scripts\": {\n  \"start\": \"react-app-rewired start\",\n  \"build:dev\": \"dotenv -e .env.development react-app-rewired build\",\n  \"build:sta\": \"dotenv -e .env.staging react-app-rewired build\",\n  \"build:pro\": \"dotenv -e .env.production react-app-rewired build\"\n}\n```\n\n##### 配置详情\n\n在 **根目录** 下创建不同的环境变量文件，如 `.env.development` ，`.env.staging`， `.env.production`，就如你所看到的 `scripts` ，通过 `dotenv` 可以指定不同的环境变量文件。\n\n在代码中可以通过 `process.env.REACT_APP_ENV` 访问所在的环境变量。除了 `REACT_APP_*` 变量之外，在你的应用代码中始终可用的还有两个特殊的变量`NODE_ENV` 和`BASE_URL`\n\n- **.env.development**\n  \n  ```javascript\n  # 测试环境\n  # must start with REACT_APP_\n  REACT_APP_ENV = 'development'\n  ```\n\n- **.env.staging**\n  \n  ```javascript\n  # 预发布环境\n  # must start with REACT_APP_\n  REACT_APP_ENV = 'staging'\n  ```\n\n- **.env.production**\n  \n  ```javascript\n  # 正式环境\n  # must start with REACT_APP_\n  REACT_APP_ENV = 'production'\n  ```\n\n这里我们并没有定义全部环境变量，只定义了基础的环境类型 REACT_APP_ENV `development`，`staging`， `production` 。变量我们统一在 `src/config/env.*.ts` 里进行管理\n\n`question:` 为什么要在 `config` 中新建三个文件，而不是直接写在环境变量文件里呢？\n\n- **修改变量方便，无需重新启动项目**\n\n- **引入方式更符合模块化标准**\n\nconfig/index.ts\n\n```javascript\n// 根据build命令指定的环境，引入不同配置\nconst config = require('./env.' + process.env.REACT_APP_ENV)\nexport default config.default\n```\n\n每种环境单独去配置公共变量，以测试环境配置为例\n\n`config/.env.development.ts`\n\n```javascript\n// 测试环境配置\nexport default {\n  ENV_TYPE: '测试环境',\n  BASE_URL: '//test.xxx.com' // api请求地址\n  OTHER_GLOBAL_VAR: 'xxx' // 可添加自定义的公共变量\n}\n```\n\n根据环境变量不同，`config` 配置就会不同\n\n```javascript\nimport config from '@/config'\nconsole.info(config)\n// config\n{\n  ENV_TYPE: '测试环境',\n  BASE_URL: '//test.xxx.com'\n  OTHER_GLOBAL_VAR: 'xxx'\n}\n```\n\n[▲  回顶部](#top)","slug":"react-cli","published":1,"updated":"2020-07-15T02:03:26.062Z","_id":"ckclo9v8100060wu5qy1lzgc3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>🎉 <code>react</code> 移动端开发脚手架，技术栈 <code>react</code> + <code>antd-mobile</code> +<code>react-router</code> + <code>redux</code> + <code>typescript</code></p>\n<a id=\"more\"></a>\n<p>该脚手架基于 <a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">Create React App</a> 创建，方便快速搭建 react 移动端项目。<a href=\"http://blog.9cnext.com/react-cli/index\">项目地址</a> &amp;&amp; <a href=\"https://github.com/Yechuanjie/react-cli\" target=\"_blank\" rel=\"noopener\">仓库地址</a></p>\n<p><span id=\"top\">目录：</span></p>\n<p><a href=\"#ts\">✔ TypeScript 开发语言</a></p>\n<p><a href=\"#redux\">✔ redux 状态管理</a></p>\n<p><a href=\"#router\">✔ react-router 路由管理</a></p>\n<p><a href=\"#axios\">✔ axios 封装及接口管理</a></p>\n<p><a href=\"#mock\">✔ 本地 mock server 支持</a></p>\n<p><a href=\"#proxy\">✔ 本地跨域配置</a></p>\n<p><a href=\"#eslint\">✔ esint + prettier 统一开发规范</a></p>\n<p><a href=\"#webpack\">✔ 支持自定义 webpack 配置</a></p>\n<p><a href=\"#rem\">✔ rem 适配方案 </a></p>\n<p><a href=\"#antd\">✔ antd-moblie 组件按需加载</a></p>\n<p><a href=\"#alias\">✔ 配置 alias 别名</a></p>\n<p><a href=\"#analyze\">✔ 配置打包分析</a></p>\n<p><a href=\"#env\">✔ 配置多环境变量</a></p>\n<h4 id=\"✅-TypeScript-开发语言\"><a href=\"#✅-TypeScript-开发语言\" class=\"headerlink\" title=\"✅ TypeScript 开发语言\"></a><span id=\"ts\">✅ TypeScript 开发语言</span></h4><p><code>TypeScript</code> 是 <code>JavaScript</code> 类型的超集，它可以编译成纯 <code>JavaScript</code>。它的最大特点就是支持强类型和 <a href=\"http://es6.ruanyifeng.com/#docs/class\" target=\"_blank\" rel=\"noopener\">ES6 Class</a></p>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-redux-状态管理\"><a href=\"#✅-redux-状态管理\" class=\"headerlink\" title=\"✅ redux  状态管理\"></a><span id=\"redux\">✅ redux  状态管理</span></h4><p>目录结构</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─store</span><br><span class=\"line\">│  │ index.ts</span><br><span class=\"line\">│  │</span><br><span class=\"line\">│  ├─actions</span><br><span class=\"line\">│  │   user.ts</span><br><span class=\"line\">│  │</span><br><span class=\"line\">│  └─reducers</span><br><span class=\"line\">│      index.ts</span><br><span class=\"line\">│      user.ts</span><br></pre></td></tr></table></figure>\n<p>拆分 reducer</p>\n<p><code>store/index</code> 中 <code>combineReducers()</code> 方法将多个小的 reducer 组合成一个 rootReducer，而每个小的 reducer 只关心自己负责的 <code>action.type</code></p>\n<p><code>src/index.tsx</code> 中引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import store from &apos;./store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;React.StrictMode&gt;</span><br><span class=\"line\">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;/Provider&gt;</span><br><span class=\"line\">  &lt;/React.StrictMode&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;root&apos;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; useSelector, useDispatch &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import &#123; setAppUserInfo &#125; from &apos;@/store/actions/user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">function Index() &#123;</span><br><span class=\"line\">  const userInfo = useSelector((state: PageStateProps) =&gt; state.user)</span><br><span class=\"line\">  const dispath = useDispatch()</span><br><span class=\"line\"></span><br><span class=\"line\">  const updateInfo = () =&gt; &#123;</span><br><span class=\"line\">    dispath(</span><br><span class=\"line\">      setAppUserInfo(&#123;</span><br><span class=\"line\">        userId: &apos;413&apos;,</span><br><span class=\"line\">        nickName: &apos;developer&apos;,</span><br><span class=\"line\">        sex: 1</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className=&quot;page&quot;&gt;</span><br><span class=\"line\">      &lt;div onClick=&#123;updateInfo&#125;&gt;</span><br><span class=\"line\">        &lt;Logo&gt;&lt;/Logo&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div className=&quot;welcome&quot;&gt;hello &#123;userInfo.nickName&#125;!&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-react-router-路由管理\"><a href=\"#✅-react-router-路由管理\" class=\"headerlink\" title=\" ✅ react-router 路由管理\"></a><span id=\"router\"> ✅ react-router 路由管理</span></h4><p>本项目采用 <code>history</code> 模式，如需使用 <code>hash</code> 模式，请使用 <code>HashRouter</code> 替换 <code>BrowserRouter</code></p>\n<p><code>basename</code> 属性可以根据项目路径来修改，例如本项目地址为：<a href=\"http://blog.9cnext.com/react-cli\">http://blog.9cnext.com/react-cli</a>，则 <code>basename=&quot;/react-cli&quot;</code>，若不需要子路径，则默认<code>basename = &#39;/&#39;</code></p>\n<p><code>src/router/routes.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; lazy &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Index = lazy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/pages/index'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: RouteConfig[] = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/index'</span>,</span><br><span class=\"line\">    component: Index,</span><br><span class=\"line\">    exact: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    routes: []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>src/router/index.tsx</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Suspense &#125; from &apos;react&apos;</span><br><span class=\"line\">import &#123; BrowserRouter, Route, Redirect, Switch &#125; from &apos;react-router-dom&apos;</span><br><span class=\"line\">import &#123; routes &#125; from &apos;./routes&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const RouterView = () =&gt; (</span><br><span class=\"line\">  &lt;BrowserRouter basename=&quot;/react-cli&quot;&gt;</span><br><span class=\"line\">    &lt;Suspense fallback=&#123;&lt;div&gt;加载中&lt;/div&gt;&#125;&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &#123;routes.map(route =&gt; (</span><br><span class=\"line\">          &lt;Route key=&#123;route.path&#125; path=&#123;route.path&#125; component=&#123;route.component&#125; exact=&#123;route.exact&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">        ))&#125;</span><br><span class=\"line\">        &lt;Redirect to=&quot;/index&quot;&gt;&lt;/Redirect&gt;</span><br><span class=\"line\">      &lt;/Switch&gt;</span><br><span class=\"line\">    &lt;/Suspense&gt;</span><br><span class=\"line\">  &lt;/BrowserRouter&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\">export default RouterView</span><br></pre></td></tr></table></figure>\n<p>使用 <code>lazy</code> + <code>Suspense</code> 的方式实现路由懒加载以及组件异步加载</p>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-axios-封装及接口管理\"><a href=\"#✅-axios-封装及接口管理\" class=\"headerlink\" title=\"✅ axios 封装及接口管理\"></a><span id=\"axios\">✅ axios 封装及接口管理</span></h4><p>将 <code>axios</code> 请求进行二次封装，统一请求方式、实现公共参数配置、实现统一的错误拦截处理，并返回与后端统一的 <code>Promise&lt;ResponseType&gt;</code> 对象</p>\n<p><code>request</code> 封装 ，<code>src/api/request.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios, &#123; AxiosRequestConfig, Method &#125; <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> envConfig <span class=\"keyword\">from</span> <span class=\"string\">'@/config'</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接口返回类型 (根据后端返回的格式定义)</span></span><br><span class=\"line\"><span class=\"comment\"> * @interface ResponseType</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ResponseType &#123;</span><br><span class=\"line\">  data: <span class=\"built_in\">any</span></span><br><span class=\"line\">  msg: <span class=\"built_in\">string</span></span><br><span class=\"line\">  code: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 封装request</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Method&#125; method</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;*&#125; [data]</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;boolean&#125; [loading]</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns &#123;Promise&lt;ResponseType&gt;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url: <span class=\"built_in\">string</span>, method: Method, data?: &#123;&#125;, loading?: <span class=\"built_in\">boolean</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">ResponseType</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 请求公共参数配置 */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> publicParams = &#123;</span><br><span class=\"line\">    env: envConfig.ENV_TYPE,</span><br><span class=\"line\">    mockType: <span class=\"number\">1</span>,</span><br><span class=\"line\">    source: <span class=\"string\">'h5'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 合并公共参数</span></span><br><span class=\"line\">  data = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, data, publicParams)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options: AxiosRequestConfig = &#123;</span><br><span class=\"line\">    url,</span><br><span class=\"line\">    method,</span><br><span class=\"line\">    params: method.toUpperCase() === <span class=\"string\">'GET'</span> || method.toUpperCase() === <span class=\"string\">'DELETE'</span> ? data : <span class=\"literal\">null</span>,</span><br><span class=\"line\">    data: method.toUpperCase() === <span class=\"string\">'POST'</span> || method.toUpperCase() === <span class=\"string\">'PUT'</span> ? data : <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> AxiosInstance = initAxios(loading)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    AxiosInstance(options)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = res.data <span class=\"keyword\">as</span> ResponseType</span><br><span class=\"line\">        <span class=\"comment\">// 这里可以添加和后台的 status 约定</span></span><br><span class=\"line\">        <span class=\"comment\">// if (data.code !== 200) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//   Toast.info(data.msg)</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        resolve(data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口管理 <code>src/api/index.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">'./request'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getList = <span class=\"function\">(<span class=\"params\">params: &#123; <span class=\"keyword\">type</span>: <span class=\"built_in\">number</span> &#125;</span>) =&gt;</span> request(<span class=\"string\">'/api/getInfo'</span>, <span class=\"string\">'GET'</span>, &#123; ...params &#125;, <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<p>使用封装的<code>request</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> API <span class=\"keyword\">from</span> <span class=\"string\">'@/api/index'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> updateInfo = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// get 请求</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> list = <span class=\"keyword\">await</span> API.getList(&#123; <span class=\"keyword\">type</span>: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(list) <span class=\"comment\">// 请求结果就是封装后的 Promise&lt;ResponseType&gt; 类型</span></span><br><span class=\"line\">  <span class=\"comment\">// 对于接口返回的数据格式，可以统一在global.d.ts里定义interface，假设你已经定义了 interface ListDetail, 然后如下使用</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = list.data <span class=\"keyword\">as</span> ListDetail <span class=\"comment\">// 断言data类型，后续就可以直接使用定义好的数据结构</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-本地-mock-server-支持\"><a href=\"#✅-本地-mock-server-支持\" class=\"headerlink\" title=\"✅ 本地 mock server 支持\"></a><span id=\"mock\">✅ 本地 mock server 支持</span></h4><p><code>src/mock</code> 实现了本地 <code>mock server</code> 开发。</p>\n<p>注意： <code>nodejs</code> 环境下默认不支持 <code>esModules</code>，将<code>src/mock</code>下的文件，修改为<code>.mjs</code>后缀，同时在<code>package.json</code> 的<code>scripts</code>中新增<code>experimental-modules</code>命令使其可以使用<code>esModules</code></p>\n<p><code>package.json</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scripts: &#123;</span><br><span class=\"line\">  \"mock\": \"node --experimental-modules src/mock/server.mjs\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本项目使用 <code>express</code> 作为服务器开发</p>\n<p><code>src/mock/server.mjs</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> mockData <span class=\"keyword\">from</span> <span class=\"string\">'./mock.mjs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> bodyParser <span class=\"keyword\">from</span> <span class=\"string\">'body-parser'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"comment\">// body-parser 解析json格式数据</span></span><br><span class=\"line\">app.use(bodyParser.json())</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\">router.use(<span class=\"string\">'/'</span>, mockData)</span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>, router)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3001</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3001!'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>mock 数据根据需求在<code>src/mock/mock.mjs</code>中自定义修改，更多 mock 使用方式可以查看<a href=\"%5Bhttp://mockjs.com/examples.html%5D(http://mockjs.com/examples.html\">mock 官方示例</a>&gt;)。</p>\n<p><code>src/mock/mock.mjs</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Mock <span class=\"keyword\">from</span> <span class=\"string\">'mockjs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * get类型接口</span></span><br><span class=\"line\"><span class=\"comment\"> * /api/getInfo 获取列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/getInfo'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(req.query.type)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = Mock.mock(&#123;</span><br><span class=\"line\">    <span class=\"string\">'list|1-8'</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">'name|1'</span>: [<span class=\"string\">'John'</span>, <span class=\"string\">'Jessen'</span>, <span class=\"string\">'Mark'</span>],</span><br><span class=\"line\">        <span class=\"string\">'desc|1'</span>: [<span class=\"string\">'Hello'</span>, <span class=\"string\">'React-cli'</span>, <span class=\"string\">'Try it!'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">    data,</span><br><span class=\"line\">    code: <span class=\"number\">200</span>,</span><br><span class=\"line\">    msg: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>开启本地 <code>mock</code> 服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn mock</span><br></pre></td></tr></table></figure>\n<p>本地开启 <code>mock</code> 服务后，所有本地 <code>api</code> 请求都会导致<strong>跨域问题</strong>，请参考<a href=\"#proxy\">✅ 本地跨域配置</a></p>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-本地跨域配置\"><a href=\"#✅-本地跨域配置\" class=\"headerlink\" title=\"✅ 本地跨域配置\"></a><span id=\"proxy\">✅ 本地跨域配置</span></h4><p>为解决本地接口请求跨域，需要使用到 <code>http-proxy-middleware</code> 中间件。在 src 根目录下创建<code>setupProxy.js</code>文件，注意这里只能使用 <code>.js</code> 后缀，因为该中间件默认读取的是 <code>js</code> 文件</p>\n<p><code>src/setupProxy.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; createProxyMiddleware &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'http-proxy-middleware'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  app.use(</span><br><span class=\"line\">    createProxyMiddleware(<span class=\"string\">'/api'</span>, &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 代理服务器地址</span></span><br><span class=\"line\">      target: <span class=\"string\">'http://localhost:3001'</span>,</span><br><span class=\"line\">      secure: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      pathRewrite: &#123;</span><br><span class=\"line\">        <span class=\"string\">'^/api'</span>: <span class=\"string\">'/api'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样一来，就可以愉快的在本地请求自己的<code>mock</code>数据啦！</p>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-eslint-prettier-统一开发规范\"><a href=\"#✅-eslint-prettier-统一开发规范\" class=\"headerlink\" title=\"✅ eslint + prettier 统一开发规范\"></a><span id=\"eslint\">✅ eslint + prettier 统一开发规范</span></h4><p>在<code>package.json</code>文件中编写自定义<code>eslint</code>规则</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"eslintConfig\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"extends\"</span>: <span class=\"string\">\"react-app\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"rules\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"import/no-commonjs\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写统一的<code>prettier</code>规范文件 <code>.prettierrc</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"printWidth\"</span>: <span class=\"number\">120</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"arrowParens\"</span>: <span class=\"string\">\"avoid\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"bracketSpacing\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"jsxBracketSameLine\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"trailingComma\"</span>: <span class=\"string\">\"none\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-支持自定义-webpack-配置\"><a href=\"#✅-支持自定义-webpack-配置\" class=\"headerlink\" title=\"✅ 支持自定义 webpack 配置\"></a><span id=\"webpack\">✅ 支持自定义 webpack 配置</span></h4><p>通过 <code>customize-cra</code> 暴露 <code>webpack</code> 配置的<code>config-overrides.js</code>文件，使我们可以不用 <code>eject</code> 的方式就能在这里覆盖重写 <code>webpack</code> 配置，目前已支持几十种相关配置自定义，具体可查看<a href=\"[https://github.com/arackaf/customize-cra/blob/HEAD/api.md](https://github.com/arackaf/customize-cra/blob/HEAD/api.md\">customize-cra api docs</a>&gt;)。</p>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-rem-适配方案\"><a href=\"#✅-rem-适配方案\" class=\"headerlink\" title=\"✅ rem 适配方案 \"></a><span id=\"rem\">✅ rem 适配方案 </span></h4><p>项目已经配置好 <code>rem</code> 适配，下面仅做介绍：</p>\n<p><code>antd-mobile</code> 中的样式默认使用<code>px</code>作为单位，如果需要使用<code>rem</code>单位，推荐使用<code>postcss-px2rem</code> 搭配 <code>src/utils/rem.ts</code>一起使用。其中 <code>src/utils/rem.ts</code> 实现了一个极简的 rem 库。</p>\n<p><code>postcss-px2rem</code> 插件使用</p>\n<ul>\n<li><p>假如设计图给的宽度是 750，remUnit 设置为 75，这样我们写样式时，可以直接按照设计图标注的宽高来 1:1 还原开发。</p>\n</li>\n<li><p>PS: 如果引用了某些没有兼容 px2rem 第三方 UI 框架，有的 1rem = 100px（antd-mobile）， 有的 1rem = 75px</p>\n</li>\n<li><p>需要将 remUnit 的值设置为像素对应的一半（antd-mobile 即 50），即可以 1:1 还原组件，否则会样式会有变化，例如按钮会变小。</p>\n</li>\n</ul>\n<p><code>config-overrides.js</code>，使用<code>addPostcssPlugins</code>设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; override, addPostcssPlugins &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'customize-cra'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = override(addPostcssPlugins([<span class=\"built_in\">require</span>(<span class=\"string\">'postcss-px2rem'</span>)(&#123; <span class=\"attr\">remUnit</span>: <span class=\"number\">50</span> &#125;)]))</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-antd-moblie-组件按需加载\"><a href=\"#✅-antd-moblie-组件按需加载\" class=\"headerlink\" title=\"✅ antd-moblie 组件按需加载\"></a><span id=\"antd\">✅ antd-moblie 组件按需加载</span></h4><p><a href=\"https://github.com/ant-design/babel-plugin-import\" target=\"_blank\" rel=\"noopener\">babel-plugin-import</a> 是一款 <code>babel</code> 插件，它会在编译过程中将 <code>import</code> 的写法自动转换为按需引入的方式。</p>\n<p>安装插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add babel-plugin-import</span><br></pre></td></tr></table></figure>\n<p><code>config-overrides.js</code>，使用<code>fixBabelImports</code>设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; override, fixBabelImports &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'customize-cra'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 引用 antd 后设置按需引入后，在打包的时候会生成很多 .map 文件</span></span><br><span class=\"line\">process.env.GENERATE_SOURCEMAP = <span class=\"string\">'false'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = override(</span><br><span class=\"line\">  <span class=\"comment\">/* 按需引入antd-mobile */</span></span><br><span class=\"line\">  fixBabelImports(<span class=\"string\">'import'</span>, &#123;</span><br><span class=\"line\">    libraryName: <span class=\"string\">'antd-mobile'</span>,</span><br><span class=\"line\">    style: <span class=\"string\">'css'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-配置-alias-别名\"><a href=\"#✅-配置-alias-别名\" class=\"headerlink\" title=\"✅ 配置 alias 别名\"></a><span id=\"alias\">✅ 配置 alias 别名</span></h4><p><code>config-overrides.js</code>，使用<code>addWebpackAlias</code>设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; override, addWebpackAlias &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'customize-cra'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"function\"><span class=\"params\">dir</span> =&gt;</span> path.join(__dirname, dir)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = override(</span><br><span class=\"line\">  addWebpackAlias(&#123;</span><br><span class=\"line\">    <span class=\"string\">'@/'</span>: resolve(<span class=\"string\">'src'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@/pages'</span>: resolve(<span class=\"string\">'./src/pages'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@/api'</span>: resolve(<span class=\"string\">'./src/api'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h5 id=\"tsconfig-json\"><a href=\"#tsconfig-json\" class=\"headerlink\" title=\"tsconfig.json\"></a>tsconfig.json</h5><p>根目录的 <code>tsconfig.json</code> 文件中也需要设置别名的支持，否则 ts 会提示无法识别别名</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"baseUrl\"</span>: <span class=\"string\">\"src\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"paths\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"@/*\"</span>: [<span class=\"string\">\"*\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Tips:</code> 推荐使用 <code>vscode</code> 开发，安装 <code>path-intellisense</code>插件, 并在 <code>setting.json</code> 中设置别名映射，就能在使用别名时提示文件路径</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"path-intellisense.mappings\": &#123;</span><br><span class=\"line\">  \"@\": \"\\$&#123;workspaceRoot&#125;/src\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-配置打包分析\"><a href=\"#✅-配置打包分析\" class=\"headerlink\" title=\"✅ 配置打包分析\"></a><span id=\"analyze\">✅ 配置打包分析</span></h4><p>webpack-bundle-analyzer 是一款分析代码大小的插件</p>\n<p>首先安装它：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>\n<p>在 <code>config-overrides.js</code> 中，使用 <code>addWebpackPlugin</code> 设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; BundleAnalyzerPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-bundle-analyzer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; override, addWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'customize-cra'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> analyze = process.env.REACT_APP_ENV === <span class=\"string\">'development'</span> <span class=\"comment\">//是否分析打包数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = override(</span><br><span class=\"line\">  analyze</span><br><span class=\"line\">    ? addWebpackPlugin(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class=\"line\">          analyzerMode: <span class=\"string\">'static'</span> <span class=\"comment\">//输出静态报告文件report.html，而不是启动一个web服务</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    : <span class=\"literal\">undefined</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-配置多环境变量\"><a href=\"#✅-配置多环境变量\" class=\"headerlink\" title=\"✅ 配置多环境变量 \"></a><span id=\"env\">✅ 配置多环境变量 </span></h4><p><code>package.json</code> 里的 <code>scripts</code> 配置 <code>build:dev</code> <code>build:sta</code> <code>build:pro</code>来执行不同环境</p>\n<ul>\n<li><code>yarn start</code> 启动本地 , 默认执行 <code>development</code></li>\n<li><code>yarn build:dev</code> 打包测试环境 , 执行 <code>development</code></li>\n<li><code>yarn build:sta</code> 打包预发布环境 , 执行 <code>staging</code></li>\n<li><code>yarn build:pro</code> 打包正式环境 , 执行 <code>production</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"start\": \"react-app-rewired start\",</span><br><span class=\"line\">  \"build:dev\": \"dotenv -e .env.development react-app-rewired build\",</span><br><span class=\"line\">  \"build:sta\": \"dotenv -e .env.staging react-app-rewired build\",</span><br><span class=\"line\">  \"build:pro\": \"dotenv -e .env.production react-app-rewired build\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置详情\"><a href=\"#配置详情\" class=\"headerlink\" title=\"配置详情\"></a>配置详情</h5><p>在 <strong>根目录</strong> 下创建不同的环境变量文件，如 <code>.env.development</code> ，<code>.env.staging</code>， <code>.env.production</code>，就如你所看到的 <code>scripts</code> ，通过 <code>dotenv</code> 可以指定不同的环境变量文件。</p>\n<p>在代码中可以通过 <code>process.env.REACT_APP_ENV</code> 访问所在的环境变量。除了 <code>REACT_APP_*</code> 变量之外，在你的应用代码中始终可用的还有两个特殊的变量<code>NODE_ENV</code> 和<code>BASE_URL</code></p>\n<ul>\n<li><p><strong>.env.development</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 测试环境</span><br><span class=\"line\"># must start with REACT_APP_</span><br><span class=\"line\">REACT_APP_ENV = <span class=\"string\">'development'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>.env.staging</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 预发布环境</span><br><span class=\"line\"># must start with REACT_APP_</span><br><span class=\"line\">REACT_APP_ENV = <span class=\"string\">'staging'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>.env.production</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 正式环境</span><br><span class=\"line\"># must start with REACT_APP_</span><br><span class=\"line\">REACT_APP_ENV = <span class=\"string\">'production'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里我们并没有定义全部环境变量，只定义了基础的环境类型 REACT_APP_ENV <code>development</code>，<code>staging</code>， <code>production</code> 。变量我们统一在 <code>src/config/env.*.ts</code> 里进行管理</p>\n<p><code>question:</code> 为什么要在 <code>config</code> 中新建三个文件，而不是直接写在环境变量文件里呢？</p>\n<ul>\n<li><p><strong>修改变量方便，无需重新启动项目</strong></p>\n</li>\n<li><p><strong>引入方式更符合模块化标准</strong></p>\n</li>\n</ul>\n<p>config/index.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据build命令指定的环境，引入不同配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./env.'</span> + process.env.REACT_APP_ENV)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> config.default</span><br></pre></td></tr></table></figure>\n<p>每种环境单独去配置公共变量，以测试环境配置为例</p>\n<p><code>config/.env.development.ts</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试环境配置</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  ENV_TYPE: <span class=\"string\">'测试环境'</span>,</span><br><span class=\"line\">  BASE_URL: <span class=\"string\">'//test.xxx.com'</span> <span class=\"comment\">// api请求地址</span></span><br><span class=\"line\">  OTHER_GLOBAL_VAR: <span class=\"string\">'xxx'</span> <span class=\"comment\">// 可添加自定义的公共变量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据环境变量不同，<code>config</code> 配置就会不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'@/config'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.info(config)</span><br><span class=\"line\"><span class=\"comment\">// config</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ENV_TYPE: <span class=\"string\">'测试环境'</span>,</span><br><span class=\"line\">  BASE_URL: <span class=\"string\">'//test.xxx.com'</span></span><br><span class=\"line\">  OTHER_GLOBAL_VAR: <span class=\"string\">'xxx'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n","site":{"data":{"gallery":{"source":[{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/61933480.jpg","desc":"涂鸦"},{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/86403488.jpg","desc":"云南石林"}]}}},"excerpt":"<p>🎉 <code>react</code> 移动端开发脚手架，技术栈 <code>react</code> + <code>antd-mobile</code> +<code>react-router</code> + <code>redux</code> + <code>typescript</code></p>","more":"<p>该脚手架基于 <a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">Create React App</a> 创建，方便快速搭建 react 移动端项目。<a href=\"http://blog.9cnext.com/react-cli/index\">项目地址</a> &amp;&amp; <a href=\"https://github.com/Yechuanjie/react-cli\" target=\"_blank\" rel=\"noopener\">仓库地址</a></p>\n<p><span id=\"top\">目录：</span></p>\n<p><a href=\"#ts\">✔ TypeScript 开发语言</a></p>\n<p><a href=\"#redux\">✔ redux 状态管理</a></p>\n<p><a href=\"#router\">✔ react-router 路由管理</a></p>\n<p><a href=\"#axios\">✔ axios 封装及接口管理</a></p>\n<p><a href=\"#mock\">✔ 本地 mock server 支持</a></p>\n<p><a href=\"#proxy\">✔ 本地跨域配置</a></p>\n<p><a href=\"#eslint\">✔ esint + prettier 统一开发规范</a></p>\n<p><a href=\"#webpack\">✔ 支持自定义 webpack 配置</a></p>\n<p><a href=\"#rem\">✔ rem 适配方案 </a></p>\n<p><a href=\"#antd\">✔ antd-moblie 组件按需加载</a></p>\n<p><a href=\"#alias\">✔ 配置 alias 别名</a></p>\n<p><a href=\"#analyze\">✔ 配置打包分析</a></p>\n<p><a href=\"#env\">✔ 配置多环境变量</a></p>\n<h4 id=\"✅-TypeScript-开发语言\"><a href=\"#✅-TypeScript-开发语言\" class=\"headerlink\" title=\"✅ TypeScript 开发语言\"></a><span id=\"ts\">✅ TypeScript 开发语言</span></h4><p><code>TypeScript</code> 是 <code>JavaScript</code> 类型的超集，它可以编译成纯 <code>JavaScript</code>。它的最大特点就是支持强类型和 <a href=\"http://es6.ruanyifeng.com/#docs/class\" target=\"_blank\" rel=\"noopener\">ES6 Class</a></p>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-redux-状态管理\"><a href=\"#✅-redux-状态管理\" class=\"headerlink\" title=\"✅ redux  状态管理\"></a><span id=\"redux\">✅ redux  状态管理</span></h4><p>目录结构</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─store</span><br><span class=\"line\">│  │ index.ts</span><br><span class=\"line\">│  │</span><br><span class=\"line\">│  ├─actions</span><br><span class=\"line\">│  │   user.ts</span><br><span class=\"line\">│  │</span><br><span class=\"line\">│  └─reducers</span><br><span class=\"line\">│      index.ts</span><br><span class=\"line\">│      user.ts</span><br></pre></td></tr></table></figure>\n<p>拆分 reducer</p>\n<p><code>store/index</code> 中 <code>combineReducers()</code> 方法将多个小的 reducer 组合成一个 rootReducer，而每个小的 reducer 只关心自己负责的 <code>action.type</code></p>\n<p><code>src/index.tsx</code> 中引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import store from &apos;./store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;React.StrictMode&gt;</span><br><span class=\"line\">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;/Provider&gt;</span><br><span class=\"line\">  &lt;/React.StrictMode&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;root&apos;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; useSelector, useDispatch &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import &#123; setAppUserInfo &#125; from &apos;@/store/actions/user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">function Index() &#123;</span><br><span class=\"line\">  const userInfo = useSelector((state: PageStateProps) =&gt; state.user)</span><br><span class=\"line\">  const dispath = useDispatch()</span><br><span class=\"line\"></span><br><span class=\"line\">  const updateInfo = () =&gt; &#123;</span><br><span class=\"line\">    dispath(</span><br><span class=\"line\">      setAppUserInfo(&#123;</span><br><span class=\"line\">        userId: &apos;413&apos;,</span><br><span class=\"line\">        nickName: &apos;developer&apos;,</span><br><span class=\"line\">        sex: 1</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className=&quot;page&quot;&gt;</span><br><span class=\"line\">      &lt;div onClick=&#123;updateInfo&#125;&gt;</span><br><span class=\"line\">        &lt;Logo&gt;&lt;/Logo&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div className=&quot;welcome&quot;&gt;hello &#123;userInfo.nickName&#125;!&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-react-router-路由管理\"><a href=\"#✅-react-router-路由管理\" class=\"headerlink\" title=\" ✅ react-router 路由管理\"></a><span id=\"router\"> ✅ react-router 路由管理</span></h4><p>本项目采用 <code>history</code> 模式，如需使用 <code>hash</code> 模式，请使用 <code>HashRouter</code> 替换 <code>BrowserRouter</code></p>\n<p><code>basename</code> 属性可以根据项目路径来修改，例如本项目地址为：<a href=\"http://blog.9cnext.com/react-cli\">http://blog.9cnext.com/react-cli</a>，则 <code>basename=&quot;/react-cli&quot;</code>，若不需要子路径，则默认<code>basename = &#39;/&#39;</code></p>\n<p><code>src/router/routes.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; lazy &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Index = lazy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/pages/index'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: RouteConfig[] = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/index'</span>,</span><br><span class=\"line\">    component: Index,</span><br><span class=\"line\">    exact: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    routes: []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>src/router/index.tsx</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Suspense &#125; from &apos;react&apos;</span><br><span class=\"line\">import &#123; BrowserRouter, Route, Redirect, Switch &#125; from &apos;react-router-dom&apos;</span><br><span class=\"line\">import &#123; routes &#125; from &apos;./routes&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const RouterView = () =&gt; (</span><br><span class=\"line\">  &lt;BrowserRouter basename=&quot;/react-cli&quot;&gt;</span><br><span class=\"line\">    &lt;Suspense fallback=&#123;&lt;div&gt;加载中&lt;/div&gt;&#125;&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &#123;routes.map(route =&gt; (</span><br><span class=\"line\">          &lt;Route key=&#123;route.path&#125; path=&#123;route.path&#125; component=&#123;route.component&#125; exact=&#123;route.exact&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">        ))&#125;</span><br><span class=\"line\">        &lt;Redirect to=&quot;/index&quot;&gt;&lt;/Redirect&gt;</span><br><span class=\"line\">      &lt;/Switch&gt;</span><br><span class=\"line\">    &lt;/Suspense&gt;</span><br><span class=\"line\">  &lt;/BrowserRouter&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\">export default RouterView</span><br></pre></td></tr></table></figure>\n<p>使用 <code>lazy</code> + <code>Suspense</code> 的方式实现路由懒加载以及组件异步加载</p>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-axios-封装及接口管理\"><a href=\"#✅-axios-封装及接口管理\" class=\"headerlink\" title=\"✅ axios 封装及接口管理\"></a><span id=\"axios\">✅ axios 封装及接口管理</span></h4><p>将 <code>axios</code> 请求进行二次封装，统一请求方式、实现公共参数配置、实现统一的错误拦截处理，并返回与后端统一的 <code>Promise&lt;ResponseType&gt;</code> 对象</p>\n<p><code>request</code> 封装 ，<code>src/api/request.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios, &#123; AxiosRequestConfig, Method &#125; <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> envConfig <span class=\"keyword\">from</span> <span class=\"string\">'@/config'</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接口返回类型 (根据后端返回的格式定义)</span></span><br><span class=\"line\"><span class=\"comment\"> * @interface ResponseType</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ResponseType &#123;</span><br><span class=\"line\">  data: <span class=\"built_in\">any</span></span><br><span class=\"line\">  msg: <span class=\"built_in\">string</span></span><br><span class=\"line\">  code: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 封装request</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Method&#125; method</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;*&#125; [data]</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;boolean&#125; [loading]</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns &#123;Promise&lt;ResponseType&gt;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url: <span class=\"built_in\">string</span>, method: Method, data?: &#123;&#125;, loading?: <span class=\"built_in\">boolean</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">ResponseType</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 请求公共参数配置 */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> publicParams = &#123;</span><br><span class=\"line\">    env: envConfig.ENV_TYPE,</span><br><span class=\"line\">    mockType: <span class=\"number\">1</span>,</span><br><span class=\"line\">    source: <span class=\"string\">'h5'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 合并公共参数</span></span><br><span class=\"line\">  data = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, data, publicParams)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options: AxiosRequestConfig = &#123;</span><br><span class=\"line\">    url,</span><br><span class=\"line\">    method,</span><br><span class=\"line\">    params: method.toUpperCase() === <span class=\"string\">'GET'</span> || method.toUpperCase() === <span class=\"string\">'DELETE'</span> ? data : <span class=\"literal\">null</span>,</span><br><span class=\"line\">    data: method.toUpperCase() === <span class=\"string\">'POST'</span> || method.toUpperCase() === <span class=\"string\">'PUT'</span> ? data : <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> AxiosInstance = initAxios(loading)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    AxiosInstance(options)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = res.data <span class=\"keyword\">as</span> ResponseType</span><br><span class=\"line\">        <span class=\"comment\">// 这里可以添加和后台的 status 约定</span></span><br><span class=\"line\">        <span class=\"comment\">// if (data.code !== 200) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//   Toast.info(data.msg)</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        resolve(data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口管理 <code>src/api/index.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">'./request'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getList = <span class=\"function\">(<span class=\"params\">params: &#123; <span class=\"keyword\">type</span>: <span class=\"built_in\">number</span> &#125;</span>) =&gt;</span> request(<span class=\"string\">'/api/getInfo'</span>, <span class=\"string\">'GET'</span>, &#123; ...params &#125;, <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<p>使用封装的<code>request</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> API <span class=\"keyword\">from</span> <span class=\"string\">'@/api/index'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> updateInfo = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// get 请求</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> list = <span class=\"keyword\">await</span> API.getList(&#123; <span class=\"keyword\">type</span>: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(list) <span class=\"comment\">// 请求结果就是封装后的 Promise&lt;ResponseType&gt; 类型</span></span><br><span class=\"line\">  <span class=\"comment\">// 对于接口返回的数据格式，可以统一在global.d.ts里定义interface，假设你已经定义了 interface ListDetail, 然后如下使用</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = list.data <span class=\"keyword\">as</span> ListDetail <span class=\"comment\">// 断言data类型，后续就可以直接使用定义好的数据结构</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-本地-mock-server-支持\"><a href=\"#✅-本地-mock-server-支持\" class=\"headerlink\" title=\"✅ 本地 mock server 支持\"></a><span id=\"mock\">✅ 本地 mock server 支持</span></h4><p><code>src/mock</code> 实现了本地 <code>mock server</code> 开发。</p>\n<p>注意： <code>nodejs</code> 环境下默认不支持 <code>esModules</code>，将<code>src/mock</code>下的文件，修改为<code>.mjs</code>后缀，同时在<code>package.json</code> 的<code>scripts</code>中新增<code>experimental-modules</code>命令使其可以使用<code>esModules</code></p>\n<p><code>package.json</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scripts: &#123;</span><br><span class=\"line\">  \"mock\": \"node --experimental-modules src/mock/server.mjs\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本项目使用 <code>express</code> 作为服务器开发</p>\n<p><code>src/mock/server.mjs</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> mockData <span class=\"keyword\">from</span> <span class=\"string\">'./mock.mjs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> bodyParser <span class=\"keyword\">from</span> <span class=\"string\">'body-parser'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"comment\">// body-parser 解析json格式数据</span></span><br><span class=\"line\">app.use(bodyParser.json())</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\">router.use(<span class=\"string\">'/'</span>, mockData)</span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>, router)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3001</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3001!'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>mock 数据根据需求在<code>src/mock/mock.mjs</code>中自定义修改，更多 mock 使用方式可以查看<a href=\"%5Bhttp://mockjs.com/examples.html%5D(http://mockjs.com/examples.html\">mock 官方示例</a>&gt;)。</p>\n<p><code>src/mock/mock.mjs</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Mock <span class=\"keyword\">from</span> <span class=\"string\">'mockjs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * get类型接口</span></span><br><span class=\"line\"><span class=\"comment\"> * /api/getInfo 获取列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/getInfo'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(req.query.type)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = Mock.mock(&#123;</span><br><span class=\"line\">    <span class=\"string\">'list|1-8'</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">'name|1'</span>: [<span class=\"string\">'John'</span>, <span class=\"string\">'Jessen'</span>, <span class=\"string\">'Mark'</span>],</span><br><span class=\"line\">        <span class=\"string\">'desc|1'</span>: [<span class=\"string\">'Hello'</span>, <span class=\"string\">'React-cli'</span>, <span class=\"string\">'Try it!'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">    data,</span><br><span class=\"line\">    code: <span class=\"number\">200</span>,</span><br><span class=\"line\">    msg: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>开启本地 <code>mock</code> 服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn mock</span><br></pre></td></tr></table></figure>\n<p>本地开启 <code>mock</code> 服务后，所有本地 <code>api</code> 请求都会导致<strong>跨域问题</strong>，请参考<a href=\"#proxy\">✅ 本地跨域配置</a></p>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-本地跨域配置\"><a href=\"#✅-本地跨域配置\" class=\"headerlink\" title=\"✅ 本地跨域配置\"></a><span id=\"proxy\">✅ 本地跨域配置</span></h4><p>为解决本地接口请求跨域，需要使用到 <code>http-proxy-middleware</code> 中间件。在 src 根目录下创建<code>setupProxy.js</code>文件，注意这里只能使用 <code>.js</code> 后缀，因为该中间件默认读取的是 <code>js</code> 文件</p>\n<p><code>src/setupProxy.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; createProxyMiddleware &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'http-proxy-middleware'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  app.use(</span><br><span class=\"line\">    createProxyMiddleware(<span class=\"string\">'/api'</span>, &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 代理服务器地址</span></span><br><span class=\"line\">      target: <span class=\"string\">'http://localhost:3001'</span>,</span><br><span class=\"line\">      secure: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      pathRewrite: &#123;</span><br><span class=\"line\">        <span class=\"string\">'^/api'</span>: <span class=\"string\">'/api'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样一来，就可以愉快的在本地请求自己的<code>mock</code>数据啦！</p>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-eslint-prettier-统一开发规范\"><a href=\"#✅-eslint-prettier-统一开发规范\" class=\"headerlink\" title=\"✅ eslint + prettier 统一开发规范\"></a><span id=\"eslint\">✅ eslint + prettier 统一开发规范</span></h4><p>在<code>package.json</code>文件中编写自定义<code>eslint</code>规则</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"eslintConfig\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"extends\"</span>: <span class=\"string\">\"react-app\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"rules\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"import/no-commonjs\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写统一的<code>prettier</code>规范文件 <code>.prettierrc</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"printWidth\"</span>: <span class=\"number\">120</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"arrowParens\"</span>: <span class=\"string\">\"avoid\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"bracketSpacing\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"jsxBracketSameLine\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"trailingComma\"</span>: <span class=\"string\">\"none\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-支持自定义-webpack-配置\"><a href=\"#✅-支持自定义-webpack-配置\" class=\"headerlink\" title=\"✅ 支持自定义 webpack 配置\"></a><span id=\"webpack\">✅ 支持自定义 webpack 配置</span></h4><p>通过 <code>customize-cra</code> 暴露 <code>webpack</code> 配置的<code>config-overrides.js</code>文件，使我们可以不用 <code>eject</code> 的方式就能在这里覆盖重写 <code>webpack</code> 配置，目前已支持几十种相关配置自定义，具体可查看<a href=\"[https://github.com/arackaf/customize-cra/blob/HEAD/api.md](https://github.com/arackaf/customize-cra/blob/HEAD/api.md\">customize-cra api docs</a>&gt;)。</p>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-rem-适配方案\"><a href=\"#✅-rem-适配方案\" class=\"headerlink\" title=\"✅ rem 适配方案 \"></a><span id=\"rem\">✅ rem 适配方案 </span></h4><p>项目已经配置好 <code>rem</code> 适配，下面仅做介绍：</p>\n<p><code>antd-mobile</code> 中的样式默认使用<code>px</code>作为单位，如果需要使用<code>rem</code>单位，推荐使用<code>postcss-px2rem</code> 搭配 <code>src/utils/rem.ts</code>一起使用。其中 <code>src/utils/rem.ts</code> 实现了一个极简的 rem 库。</p>\n<p><code>postcss-px2rem</code> 插件使用</p>\n<ul>\n<li><p>假如设计图给的宽度是 750，remUnit 设置为 75，这样我们写样式时，可以直接按照设计图标注的宽高来 1:1 还原开发。</p>\n</li>\n<li><p>PS: 如果引用了某些没有兼容 px2rem 第三方 UI 框架，有的 1rem = 100px（antd-mobile）， 有的 1rem = 75px</p>\n</li>\n<li><p>需要将 remUnit 的值设置为像素对应的一半（antd-mobile 即 50），即可以 1:1 还原组件，否则会样式会有变化，例如按钮会变小。</p>\n</li>\n</ul>\n<p><code>config-overrides.js</code>，使用<code>addPostcssPlugins</code>设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; override, addPostcssPlugins &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'customize-cra'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = override(addPostcssPlugins([<span class=\"built_in\">require</span>(<span class=\"string\">'postcss-px2rem'</span>)(&#123; <span class=\"attr\">remUnit</span>: <span class=\"number\">50</span> &#125;)]))</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-antd-moblie-组件按需加载\"><a href=\"#✅-antd-moblie-组件按需加载\" class=\"headerlink\" title=\"✅ antd-moblie 组件按需加载\"></a><span id=\"antd\">✅ antd-moblie 组件按需加载</span></h4><p><a href=\"https://github.com/ant-design/babel-plugin-import\" target=\"_blank\" rel=\"noopener\">babel-plugin-import</a> 是一款 <code>babel</code> 插件，它会在编译过程中将 <code>import</code> 的写法自动转换为按需引入的方式。</p>\n<p>安装插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add babel-plugin-import</span><br></pre></td></tr></table></figure>\n<p><code>config-overrides.js</code>，使用<code>fixBabelImports</code>设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; override, fixBabelImports &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'customize-cra'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 引用 antd 后设置按需引入后，在打包的时候会生成很多 .map 文件</span></span><br><span class=\"line\">process.env.GENERATE_SOURCEMAP = <span class=\"string\">'false'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = override(</span><br><span class=\"line\">  <span class=\"comment\">/* 按需引入antd-mobile */</span></span><br><span class=\"line\">  fixBabelImports(<span class=\"string\">'import'</span>, &#123;</span><br><span class=\"line\">    libraryName: <span class=\"string\">'antd-mobile'</span>,</span><br><span class=\"line\">    style: <span class=\"string\">'css'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-配置-alias-别名\"><a href=\"#✅-配置-alias-别名\" class=\"headerlink\" title=\"✅ 配置 alias 别名\"></a><span id=\"alias\">✅ 配置 alias 别名</span></h4><p><code>config-overrides.js</code>，使用<code>addWebpackAlias</code>设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; override, addWebpackAlias &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'customize-cra'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"function\"><span class=\"params\">dir</span> =&gt;</span> path.join(__dirname, dir)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = override(</span><br><span class=\"line\">  addWebpackAlias(&#123;</span><br><span class=\"line\">    <span class=\"string\">'@/'</span>: resolve(<span class=\"string\">'src'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@/pages'</span>: resolve(<span class=\"string\">'./src/pages'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@/api'</span>: resolve(<span class=\"string\">'./src/api'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h5 id=\"tsconfig-json\"><a href=\"#tsconfig-json\" class=\"headerlink\" title=\"tsconfig.json\"></a>tsconfig.json</h5><p>根目录的 <code>tsconfig.json</code> 文件中也需要设置别名的支持，否则 ts 会提示无法识别别名</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"baseUrl\"</span>: <span class=\"string\">\"src\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"paths\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"@/*\"</span>: [<span class=\"string\">\"*\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Tips:</code> 推荐使用 <code>vscode</code> 开发，安装 <code>path-intellisense</code>插件, 并在 <code>setting.json</code> 中设置别名映射，就能在使用别名时提示文件路径</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"path-intellisense.mappings\": &#123;</span><br><span class=\"line\">  \"@\": \"\\$&#123;workspaceRoot&#125;/src\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-配置打包分析\"><a href=\"#✅-配置打包分析\" class=\"headerlink\" title=\"✅ 配置打包分析\"></a><span id=\"analyze\">✅ 配置打包分析</span></h4><p>webpack-bundle-analyzer 是一款分析代码大小的插件</p>\n<p>首先安装它：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>\n<p>在 <code>config-overrides.js</code> 中，使用 <code>addWebpackPlugin</code> 设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; BundleAnalyzerPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-bundle-analyzer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; override, addWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'customize-cra'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> analyze = process.env.REACT_APP_ENV === <span class=\"string\">'development'</span> <span class=\"comment\">//是否分析打包数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = override(</span><br><span class=\"line\">  analyze</span><br><span class=\"line\">    ? addWebpackPlugin(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class=\"line\">          analyzerMode: <span class=\"string\">'static'</span> <span class=\"comment\">//输出静态报告文件report.html，而不是启动一个web服务</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    : <span class=\"literal\">undefined</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>\n<h4 id=\"✅-配置多环境变量\"><a href=\"#✅-配置多环境变量\" class=\"headerlink\" title=\"✅ 配置多环境变量 \"></a><span id=\"env\">✅ 配置多环境变量 </span></h4><p><code>package.json</code> 里的 <code>scripts</code> 配置 <code>build:dev</code> <code>build:sta</code> <code>build:pro</code>来执行不同环境</p>\n<ul>\n<li><code>yarn start</code> 启动本地 , 默认执行 <code>development</code></li>\n<li><code>yarn build:dev</code> 打包测试环境 , 执行 <code>development</code></li>\n<li><code>yarn build:sta</code> 打包预发布环境 , 执行 <code>staging</code></li>\n<li><code>yarn build:pro</code> 打包正式环境 , 执行 <code>production</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"start\": \"react-app-rewired start\",</span><br><span class=\"line\">  \"build:dev\": \"dotenv -e .env.development react-app-rewired build\",</span><br><span class=\"line\">  \"build:sta\": \"dotenv -e .env.staging react-app-rewired build\",</span><br><span class=\"line\">  \"build:pro\": \"dotenv -e .env.production react-app-rewired build\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置详情\"><a href=\"#配置详情\" class=\"headerlink\" title=\"配置详情\"></a>配置详情</h5><p>在 <strong>根目录</strong> 下创建不同的环境变量文件，如 <code>.env.development</code> ，<code>.env.staging</code>， <code>.env.production</code>，就如你所看到的 <code>scripts</code> ，通过 <code>dotenv</code> 可以指定不同的环境变量文件。</p>\n<p>在代码中可以通过 <code>process.env.REACT_APP_ENV</code> 访问所在的环境变量。除了 <code>REACT_APP_*</code> 变量之外，在你的应用代码中始终可用的还有两个特殊的变量<code>NODE_ENV</code> 和<code>BASE_URL</code></p>\n<ul>\n<li><p><strong>.env.development</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 测试环境</span><br><span class=\"line\"># must start with REACT_APP_</span><br><span class=\"line\">REACT_APP_ENV = <span class=\"string\">'development'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>.env.staging</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 预发布环境</span><br><span class=\"line\"># must start with REACT_APP_</span><br><span class=\"line\">REACT_APP_ENV = <span class=\"string\">'staging'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>.env.production</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 正式环境</span><br><span class=\"line\"># must start with REACT_APP_</span><br><span class=\"line\">REACT_APP_ENV = <span class=\"string\">'production'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里我们并没有定义全部环境变量，只定义了基础的环境类型 REACT_APP_ENV <code>development</code>，<code>staging</code>， <code>production</code> 。变量我们统一在 <code>src/config/env.*.ts</code> 里进行管理</p>\n<p><code>question:</code> 为什么要在 <code>config</code> 中新建三个文件，而不是直接写在环境变量文件里呢？</p>\n<ul>\n<li><p><strong>修改变量方便，无需重新启动项目</strong></p>\n</li>\n<li><p><strong>引入方式更符合模块化标准</strong></p>\n</li>\n</ul>\n<p>config/index.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据build命令指定的环境，引入不同配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./env.'</span> + process.env.REACT_APP_ENV)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> config.default</span><br></pre></td></tr></table></figure>\n<p>每种环境单独去配置公共变量，以测试环境配置为例</p>\n<p><code>config/.env.development.ts</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试环境配置</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  ENV_TYPE: <span class=\"string\">'测试环境'</span>,</span><br><span class=\"line\">  BASE_URL: <span class=\"string\">'//test.xxx.com'</span> <span class=\"comment\">// api请求地址</span></span><br><span class=\"line\">  OTHER_GLOBAL_VAR: <span class=\"string\">'xxx'</span> <span class=\"comment\">// 可添加自定义的公共变量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据环境变量不同，<code>config</code> 配置就会不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'@/config'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.info(config)</span><br><span class=\"line\"><span class=\"comment\">// config</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ENV_TYPE: <span class=\"string\">'测试环境'</span>,</span><br><span class=\"line\">  BASE_URL: <span class=\"string\">'//test.xxx.com'</span></span><br><span class=\"line\">  OTHER_GLOBAL_VAR: <span class=\"string\">'xxx'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"#top\">▲  回顶部</a></p>"},{"title":"试着不使用if语句？","date":"2018-04-17T17:09:19.000Z","_content":"\n🍒 你有尝试过不用 `if` 语句写代码吗？\n\n\n<!-- more -->\n\n用if会存在什么问题吗？不会。相反，`if` 语句能十分高效的判断条件是否满足。\n那这篇文章还有必要看吗？别急。还有一个概念，叫做**代码即数据**。\n\n### 试着不使用if\n\n>**if**是我们平时编程最常用的语句之一。if语句的替代品还有**switch**语句、**三目运算**等语句。它们的实质都是判断条件为真时执行代码。那么当我们不使用这些语句去解决问题时的意义何在呢？\n\n如果写代码的时候不能使用if，我们就会去寻找其他的办法来解决，首先，这对于自己的思维转换有很大的提升，其次，当你用另外的方法解决之后，你又get到了新的技能。\n\n<!-- ### 不使用if应该怎么做 -->\n\n### 示例1：统计数组中偶数的数量\n>假设有一个数组，我们需要统计里面的偶数\n\n```javascript\nconst arr = [3, 5, 7, 2, 1, 8, 4, -6]\n```\n#### 使用if\n```javascript\nlet count = 0\narr.forEach((item) => {\n    if (Math.abs(item % 2) === 0) {\n        count += 1\n    }\n})\nconsole.log(count) // 4\n```\n#### 不使用if（方法一）\n```javascript\nlet newArr = arr.filter(item => Math.abs(item % 2) === 0 )\nconsole.log(newArr.length) // 4\n```\n>使用filter过滤满足条件的数据，返回新数组的长度即可。\n\n#### 不使用if（方法二）\n```javascript\nlet count = 0;\narr.forEach((item) => count += Math.abs(item % 2))\nconsole.log(arr.length - count) // 4\n```\n>利用了偶数算法的返回值始终为0或1，得到不是偶数的count，使用数组长度减去count即可。\n\n---------------------------------------------------------------------------------------------------------------------\n\n### 示例二：判断是否是夏季\n>指定一个月份（如：5），判断是否属于夏季（7，8，9月），是则返回'summer', 否则返回'other_season'\n\n#### 使用if\n```javascript\nconst summerOrOther = (month) => {\n    if (month <= 9 && month >= 7) return 'summer';\n    return 'other_season';\n}\nsummerOrOther(7); //summer\nsummerOrOther(10); //other_season\n```\n#### 不使用if\n```javascript\nconst condition = {\n    7: 'summer',\n    8: 'summer',\n    9: 'summer',\n    default: 'other_season'\n}\nconst summerOrOther = month => condition[month] || condition['default']\nsummerOrOther(9); //summer\nsummerOrOther(10); //other_season\n```\n>该方法并没有什么简单之处。但这样实现更能体现“代码即数据”的理念。一切操作都是对数据的处理，最后输出数据。\n\n---------------------------------------------------------------------------------------------------------------------\n\n### 总结\n>这两个简单示例只是说明if(switch, 三目运算符)语句可以用其他方式实现，仅供参考和学习。但if语句仍然是代码中高使用率的语句，建议根据实际需求来合理使用。\n","source":"_posts/not_if.md","raw":"---\ntitle: 试着不使用if语句？\ndate: 2018-04-17 17:09:19\ntags:\n    - JavaScript\n    - ES6\ncategories: JavaScript\n---\n\n🍒 你有尝试过不用 `if` 语句写代码吗？\n\n\n<!-- more -->\n\n用if会存在什么问题吗？不会。相反，`if` 语句能十分高效的判断条件是否满足。\n那这篇文章还有必要看吗？别急。还有一个概念，叫做**代码即数据**。\n\n### 试着不使用if\n\n>**if**是我们平时编程最常用的语句之一。if语句的替代品还有**switch**语句、**三目运算**等语句。它们的实质都是判断条件为真时执行代码。那么当我们不使用这些语句去解决问题时的意义何在呢？\n\n如果写代码的时候不能使用if，我们就会去寻找其他的办法来解决，首先，这对于自己的思维转换有很大的提升，其次，当你用另外的方法解决之后，你又get到了新的技能。\n\n<!-- ### 不使用if应该怎么做 -->\n\n### 示例1：统计数组中偶数的数量\n>假设有一个数组，我们需要统计里面的偶数\n\n```javascript\nconst arr = [3, 5, 7, 2, 1, 8, 4, -6]\n```\n#### 使用if\n```javascript\nlet count = 0\narr.forEach((item) => {\n    if (Math.abs(item % 2) === 0) {\n        count += 1\n    }\n})\nconsole.log(count) // 4\n```\n#### 不使用if（方法一）\n```javascript\nlet newArr = arr.filter(item => Math.abs(item % 2) === 0 )\nconsole.log(newArr.length) // 4\n```\n>使用filter过滤满足条件的数据，返回新数组的长度即可。\n\n#### 不使用if（方法二）\n```javascript\nlet count = 0;\narr.forEach((item) => count += Math.abs(item % 2))\nconsole.log(arr.length - count) // 4\n```\n>利用了偶数算法的返回值始终为0或1，得到不是偶数的count，使用数组长度减去count即可。\n\n---------------------------------------------------------------------------------------------------------------------\n\n### 示例二：判断是否是夏季\n>指定一个月份（如：5），判断是否属于夏季（7，8，9月），是则返回'summer', 否则返回'other_season'\n\n#### 使用if\n```javascript\nconst summerOrOther = (month) => {\n    if (month <= 9 && month >= 7) return 'summer';\n    return 'other_season';\n}\nsummerOrOther(7); //summer\nsummerOrOther(10); //other_season\n```\n#### 不使用if\n```javascript\nconst condition = {\n    7: 'summer',\n    8: 'summer',\n    9: 'summer',\n    default: 'other_season'\n}\nconst summerOrOther = month => condition[month] || condition['default']\nsummerOrOther(9); //summer\nsummerOrOther(10); //other_season\n```\n>该方法并没有什么简单之处。但这样实现更能体现“代码即数据”的理念。一切操作都是对数据的处理，最后输出数据。\n\n---------------------------------------------------------------------------------------------------------------------\n\n### 总结\n>这两个简单示例只是说明if(switch, 三目运算符)语句可以用其他方式实现，仅供参考和学习。但if语句仍然是代码中高使用率的语句，建议根据实际需求来合理使用。\n","slug":"not_if","published":1,"updated":"2020-07-15T02:12:52.778Z","_id":"ckclo9v8c00080wu51m1nf8ar","comments":1,"layout":"post","photos":[],"link":"","content":"<p>🍒 你有尝试过不用 <code>if</code> 语句写代码吗？</p>\n<a id=\"more\"></a>\n<p>用if会存在什么问题吗？不会。相反，<code>if</code> 语句能十分高效的判断条件是否满足。<br>那这篇文章还有必要看吗？别急。还有一个概念，叫做<strong>代码即数据</strong>。</p>\n<h3 id=\"试着不使用if\"><a href=\"#试着不使用if\" class=\"headerlink\" title=\"试着不使用if\"></a>试着不使用if</h3><blockquote>\n<p><strong>if</strong>是我们平时编程最常用的语句之一。if语句的替代品还有<strong>switch</strong>语句、<strong>三目运算</strong>等语句。它们的实质都是判断条件为真时执行代码。那么当我们不使用这些语句去解决问题时的意义何在呢？</p>\n</blockquote>\n<p>如果写代码的时候不能使用if，我们就会去寻找其他的办法来解决，首先，这对于自己的思维转换有很大的提升，其次，当你用另外的方法解决之后，你又get到了新的技能。</p>\n<!-- ### 不使用if应该怎么做 -->\n<h3 id=\"示例1：统计数组中偶数的数量\"><a href=\"#示例1：统计数组中偶数的数量\" class=\"headerlink\" title=\"示例1：统计数组中偶数的数量\"></a>示例1：统计数组中偶数的数量</h3><blockquote>\n<p>假设有一个数组，我们需要统计里面的偶数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">-6</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用if\"><a href=\"#使用if\" class=\"headerlink\" title=\"使用if\"></a>使用if</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(item % <span class=\"number\">2</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count) <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"不使用if（方法一）\"><a href=\"#不使用if（方法一）\" class=\"headerlink\" title=\"不使用if（方法一）\"></a>不使用if（方法一）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newArr = arr.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">Math</span>.abs(item % <span class=\"number\">2</span>) === <span class=\"number\">0</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr.length) <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用filter过滤满足条件的数据，返回新数组的长度即可。</p>\n</blockquote>\n<h4 id=\"不使用if（方法二）\"><a href=\"#不使用if（方法二）\" class=\"headerlink\" title=\"不使用if（方法二）\"></a>不使用if（方法二）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> count += <span class=\"built_in\">Math</span>.abs(item % <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.length - count) <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>利用了偶数算法的返回值始终为0或1，得到不是偶数的count，使用数组长度减去count即可。</p>\n</blockquote>\n<hr>\n<h3 id=\"示例二：判断是否是夏季\"><a href=\"#示例二：判断是否是夏季\" class=\"headerlink\" title=\"示例二：判断是否是夏季\"></a>示例二：判断是否是夏季</h3><blockquote>\n<p>指定一个月份（如：5），判断是否属于夏季（7，8，9月），是则返回’summer’, 否则返回’other_season’</p>\n</blockquote>\n<h4 id=\"使用if-1\"><a href=\"#使用if-1\" class=\"headerlink\" title=\"使用if\"></a>使用if</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> summerOrOther = <span class=\"function\">(<span class=\"params\">month</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (month &lt;= <span class=\"number\">9</span> &amp;&amp; month &gt;= <span class=\"number\">7</span>) <span class=\"keyword\">return</span> <span class=\"string\">'summer'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'other_season'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">summerOrOther(<span class=\"number\">7</span>); <span class=\"comment\">//summer</span></span><br><span class=\"line\">summerOrOther(<span class=\"number\">10</span>); <span class=\"comment\">//other_season</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"不使用if\"><a href=\"#不使用if\" class=\"headerlink\" title=\"不使用if\"></a>不使用if</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> condition = &#123;</span><br><span class=\"line\">    <span class=\"number\">7</span>: <span class=\"string\">'summer'</span>,</span><br><span class=\"line\">    <span class=\"number\">8</span>: <span class=\"string\">'summer'</span>,</span><br><span class=\"line\">    <span class=\"number\">9</span>: <span class=\"string\">'summer'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"string\">'other_season'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> summerOrOther = <span class=\"function\"><span class=\"params\">month</span> =&gt;</span> condition[month] || condition[<span class=\"string\">'default'</span>]</span><br><span class=\"line\">summerOrOther(<span class=\"number\">9</span>); <span class=\"comment\">//summer</span></span><br><span class=\"line\">summerOrOther(<span class=\"number\">10</span>); <span class=\"comment\">//other_season</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>该方法并没有什么简单之处。但这样实现更能体现“代码即数据”的理念。一切操作都是对数据的处理，最后输出数据。</p>\n</blockquote>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>这两个简单示例只是说明if(switch, 三目运算符)语句可以用其他方式实现，仅供参考和学习。但if语句仍然是代码中高使用率的语句，建议根据实际需求来合理使用。</p>\n</blockquote>\n","site":{"data":{"gallery":{"source":[{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/61933480.jpg","desc":"涂鸦"},{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/86403488.jpg","desc":"云南石林"}]}}},"excerpt":"<p>🍒 你有尝试过不用 <code>if</code> 语句写代码吗？</p>","more":"<p>用if会存在什么问题吗？不会。相反，<code>if</code> 语句能十分高效的判断条件是否满足。<br>那这篇文章还有必要看吗？别急。还有一个概念，叫做<strong>代码即数据</strong>。</p>\n<h3 id=\"试着不使用if\"><a href=\"#试着不使用if\" class=\"headerlink\" title=\"试着不使用if\"></a>试着不使用if</h3><blockquote>\n<p><strong>if</strong>是我们平时编程最常用的语句之一。if语句的替代品还有<strong>switch</strong>语句、<strong>三目运算</strong>等语句。它们的实质都是判断条件为真时执行代码。那么当我们不使用这些语句去解决问题时的意义何在呢？</p>\n</blockquote>\n<p>如果写代码的时候不能使用if，我们就会去寻找其他的办法来解决，首先，这对于自己的思维转换有很大的提升，其次，当你用另外的方法解决之后，你又get到了新的技能。</p>\n<!-- ### 不使用if应该怎么做 -->\n<h3 id=\"示例1：统计数组中偶数的数量\"><a href=\"#示例1：统计数组中偶数的数量\" class=\"headerlink\" title=\"示例1：统计数组中偶数的数量\"></a>示例1：统计数组中偶数的数量</h3><blockquote>\n<p>假设有一个数组，我们需要统计里面的偶数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">-6</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用if\"><a href=\"#使用if\" class=\"headerlink\" title=\"使用if\"></a>使用if</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(item % <span class=\"number\">2</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count) <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"不使用if（方法一）\"><a href=\"#不使用if（方法一）\" class=\"headerlink\" title=\"不使用if（方法一）\"></a>不使用if（方法一）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newArr = arr.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">Math</span>.abs(item % <span class=\"number\">2</span>) === <span class=\"number\">0</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr.length) <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用filter过滤满足条件的数据，返回新数组的长度即可。</p>\n</blockquote>\n<h4 id=\"不使用if（方法二）\"><a href=\"#不使用if（方法二）\" class=\"headerlink\" title=\"不使用if（方法二）\"></a>不使用if（方法二）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> count += <span class=\"built_in\">Math</span>.abs(item % <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.length - count) <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>利用了偶数算法的返回值始终为0或1，得到不是偶数的count，使用数组长度减去count即可。</p>\n</blockquote>\n<hr>\n<h3 id=\"示例二：判断是否是夏季\"><a href=\"#示例二：判断是否是夏季\" class=\"headerlink\" title=\"示例二：判断是否是夏季\"></a>示例二：判断是否是夏季</h3><blockquote>\n<p>指定一个月份（如：5），判断是否属于夏季（7，8，9月），是则返回’summer’, 否则返回’other_season’</p>\n</blockquote>\n<h4 id=\"使用if-1\"><a href=\"#使用if-1\" class=\"headerlink\" title=\"使用if\"></a>使用if</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> summerOrOther = <span class=\"function\">(<span class=\"params\">month</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (month &lt;= <span class=\"number\">9</span> &amp;&amp; month &gt;= <span class=\"number\">7</span>) <span class=\"keyword\">return</span> <span class=\"string\">'summer'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'other_season'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">summerOrOther(<span class=\"number\">7</span>); <span class=\"comment\">//summer</span></span><br><span class=\"line\">summerOrOther(<span class=\"number\">10</span>); <span class=\"comment\">//other_season</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"不使用if\"><a href=\"#不使用if\" class=\"headerlink\" title=\"不使用if\"></a>不使用if</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> condition = &#123;</span><br><span class=\"line\">    <span class=\"number\">7</span>: <span class=\"string\">'summer'</span>,</span><br><span class=\"line\">    <span class=\"number\">8</span>: <span class=\"string\">'summer'</span>,</span><br><span class=\"line\">    <span class=\"number\">9</span>: <span class=\"string\">'summer'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"string\">'other_season'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> summerOrOther = <span class=\"function\"><span class=\"params\">month</span> =&gt;</span> condition[month] || condition[<span class=\"string\">'default'</span>]</span><br><span class=\"line\">summerOrOther(<span class=\"number\">9</span>); <span class=\"comment\">//summer</span></span><br><span class=\"line\">summerOrOther(<span class=\"number\">10</span>); <span class=\"comment\">//other_season</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>该方法并没有什么简单之处。但这样实现更能体现“代码即数据”的理念。一切操作都是对数据的处理，最后输出数据。</p>\n</blockquote>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>这两个简单示例只是说明if(switch, 三目运算符)语句可以用其他方式实现，仅供参考和学习。但if语句仍然是代码中高使用率的语句，建议根据实际需求来合理使用。</p>\n</blockquote>"},{"title":"写一个简单的vue双向数据绑定","date":"2018-07-24T11:19:30.000Z","_content":"\n🌱 `vue` 双向数据绑定原理：`监听器`、`解析器`、`观察者`。\n\n<!-- more -->\n\n\n### MVVM双向数据绑定流程\n\n![MVVM双向数据绑定流程](https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/64201803.jpg)\n\n### html\n\n```html\n <div id=\"app\">\n    <form>\n        <button type=\"button\" v-click=\"decrease\"> - </button>\n        <input type=\"text\" v-model=\"number\">\n        <button type=\"button\" v-click=\"increment\"> + </button>\n    </form>\n    <h3 v-bind=\"number\"></h3>\n</div>\n```\n![html](https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/92465283.jpg)\n\n### 初始化mvvm\n\n```javascript\nfunction MyVue(options) {\n  this._init(options);\n}\n// 初始化, 继承所有options\nMyVue.prototype._init = (options) => {\n  console.log(options);\n  this.$options = options;\n  this.$el = document.querySelector(options.el);\n  this.$data = options.data;\n  this.$methods = options.methods;\n\n  this._binding = {}; // _binding保存着model与view的映射关系，也就是Watcher的实例。当model改变时，会触发其中的指令类更新，保证view也能实时更新\n\n  // 监听器\n  this._observe(this.$data);\n  // 解析器\n  this._compile(this.$el);\n};\n```\n\n### 实现监听器 Observe\n\n> Observer 遍历数据对象。\n> 如果对某个数据赋值，会触发setter，就能监听数据变化\n> 如果获取某个数据，会触发getter\n\n```javascript\nMyVue.prototype._observe = (data) => {\n  console.log(this);\n  let value;\n  for (let key in data) {\n    if (data.hasOwnProperty(key)) {\n      this._binding[key] = {\n          _directives: []\n      }\n      value = data[key];\n      if (typeof value === \"object\") {\n        this._observe(value);\n      }\n      let binding = this._binding[key];\n      Object.defineProperty(data, key, {\n        enumerable: true, // 可枚举\n        configurable: true, // 是否可以再定义\n        get: () => {\n          console.log(`获取${value}`);\n          return value;\n        },\n        set: newValue => {\n          console.log(`更新${newValue}`);\n          if (value !== newValue) {\n            value = newValue;\n            binding._directives.forEach(item => {\n                item.update();\n            });\n          }\n        }\n      });\n    }\n  }\n};\n```\n\n### 实现解析器 Compile\n> compile方法主要做以下事情：\n> 1. 解析模板指令\n> 2. 将模板中的变量替换成数据\n> 3. 初始化渲染视图并且给每个指令对应的dom绑定update函数\n> 4. 数据变化，通知视图更新\n\n```javascript\n// root为根元素\nMyVue.prototype._compile = (root) => {\n let _this = this;\n let nodes = root.children;\n for (let i = 0; i < nodes.length; ++i) {\n     let node = nodes[i];\n     if (node.children.length) {\n        _this._compile(node);\n     }\n     //解析模板指令&将模板中的变量替换成数据\n     if (node.hasAttribute('v-click')) {\n        node.onclick = (function() {\n            let attrVal = node.getAttribute('v-click');\n            console.log(attrVal);\n            return _this.$methods[attrVal].bind(_this.$data);\n        })();\n     }\n     // 绑定数据模型\n     if (node.hasAttribute('v-model') && (node.tagName === 'INPUT' || node.tagName === 'TEXTAREA')) {\n         node.addEventListener('input', ((key) => {\n            let attrVal = node.getAttribute('v-model');\n            _this._binding[attrVal]._directives.push(new Watcher(\n                'input',\n                node,\n                _this,\n                attrVal,\n                'value'\n            ))\n            return function() {\n                _this.$data[attrVal] = nodes[key].value;\n            }\n        })(i));\n     }\n     if (node.hasAttribute('v-bind')) {\n         let attrVal = node.getAttribute('v-bind');\n         _this._binding[attrVal]._directives.push(new Watcher(\n            'text',\n            node,\n            _this,\n            attrVal,\n            'innerHTML'\n         ))\n     }\n }\n}\n```\n\n### 实现观察者 Watcher\n> 每次数据发生变化 都会触发Watcher去更新视图\n\n```javascript\n/**\n * 实现Watcher监听\n * \n * @param {String} name 指令名称\n * @param {Element} el 指令对应的dom元素\n * @param {Instance} vm 指令所属的myVue实例\n * @param {any} exp 指令对应的值\n * @param {any} attr 绑定的属性值\n */\nfunction Watcher(name, el, vm, exp, attr) {\n    this.name = name;\n    this.el = el;\n    this.vm = vm;\n    this.exp = exp;\n    this.attr = attr;\n\n    this.update();\n}\n\n\nWatcher.prototype.update = () => {\n    this.el[this.attr] = this.vm.$data[this.exp]; // 当data对应的值(exp)改变时，修改当前元素的属性，以保证dom更新\n}\n```\n\n### 调用MyVue\n```javascript\n// 调用 MyVue\nwindow.onload = () => {\n  let app = new MyVue({\n    el: \"#app\",\n    data: {\n      number: 0\n    },\n    methods: {\n      increment: () => {\n          this.number++;\n      },\n      decrease: () => {\n          this.number--;\n      }\n    }\n  });\n};\n```\n\n### 最终效果\n![最终效果](https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/47264916.jpg)\n\n### 总结\n1. vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。\n2. Vue2.x版本双向数据绑定的核心是**Object.defineProperty**方法，劫持对象的访问器，在属性值发生变化时我们可以获取变化,从而进行进一步操作。\n3. 通过监听器和解析器的协作，触发Watcher更新视图\n\n\n> 在即将到来的Vue3.x中，将会使用ES6的[Proxy](http://es6.ruanyifeng.com/#docs/proxy)代替**Object.defineProperty**，它可以直接劫持整个对象，并返回一个新对象，不管是操作便利程度还是底层功能上都远强于Object.defineProperty。","source":"_posts/vue_data_binding.md","raw":"---\ntitle: 写一个简单的vue双向数据绑定\ndate: 2018-07-24 11:19:30\ntags: \n  - JavaScript\n  - Vue\ncategories: Vue\n---\n\n🌱 `vue` 双向数据绑定原理：`监听器`、`解析器`、`观察者`。\n\n<!-- more -->\n\n\n### MVVM双向数据绑定流程\n\n![MVVM双向数据绑定流程](https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/64201803.jpg)\n\n### html\n\n```html\n <div id=\"app\">\n    <form>\n        <button type=\"button\" v-click=\"decrease\"> - </button>\n        <input type=\"text\" v-model=\"number\">\n        <button type=\"button\" v-click=\"increment\"> + </button>\n    </form>\n    <h3 v-bind=\"number\"></h3>\n</div>\n```\n![html](https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/92465283.jpg)\n\n### 初始化mvvm\n\n```javascript\nfunction MyVue(options) {\n  this._init(options);\n}\n// 初始化, 继承所有options\nMyVue.prototype._init = (options) => {\n  console.log(options);\n  this.$options = options;\n  this.$el = document.querySelector(options.el);\n  this.$data = options.data;\n  this.$methods = options.methods;\n\n  this._binding = {}; // _binding保存着model与view的映射关系，也就是Watcher的实例。当model改变时，会触发其中的指令类更新，保证view也能实时更新\n\n  // 监听器\n  this._observe(this.$data);\n  // 解析器\n  this._compile(this.$el);\n};\n```\n\n### 实现监听器 Observe\n\n> Observer 遍历数据对象。\n> 如果对某个数据赋值，会触发setter，就能监听数据变化\n> 如果获取某个数据，会触发getter\n\n```javascript\nMyVue.prototype._observe = (data) => {\n  console.log(this);\n  let value;\n  for (let key in data) {\n    if (data.hasOwnProperty(key)) {\n      this._binding[key] = {\n          _directives: []\n      }\n      value = data[key];\n      if (typeof value === \"object\") {\n        this._observe(value);\n      }\n      let binding = this._binding[key];\n      Object.defineProperty(data, key, {\n        enumerable: true, // 可枚举\n        configurable: true, // 是否可以再定义\n        get: () => {\n          console.log(`获取${value}`);\n          return value;\n        },\n        set: newValue => {\n          console.log(`更新${newValue}`);\n          if (value !== newValue) {\n            value = newValue;\n            binding._directives.forEach(item => {\n                item.update();\n            });\n          }\n        }\n      });\n    }\n  }\n};\n```\n\n### 实现解析器 Compile\n> compile方法主要做以下事情：\n> 1. 解析模板指令\n> 2. 将模板中的变量替换成数据\n> 3. 初始化渲染视图并且给每个指令对应的dom绑定update函数\n> 4. 数据变化，通知视图更新\n\n```javascript\n// root为根元素\nMyVue.prototype._compile = (root) => {\n let _this = this;\n let nodes = root.children;\n for (let i = 0; i < nodes.length; ++i) {\n     let node = nodes[i];\n     if (node.children.length) {\n        _this._compile(node);\n     }\n     //解析模板指令&将模板中的变量替换成数据\n     if (node.hasAttribute('v-click')) {\n        node.onclick = (function() {\n            let attrVal = node.getAttribute('v-click');\n            console.log(attrVal);\n            return _this.$methods[attrVal].bind(_this.$data);\n        })();\n     }\n     // 绑定数据模型\n     if (node.hasAttribute('v-model') && (node.tagName === 'INPUT' || node.tagName === 'TEXTAREA')) {\n         node.addEventListener('input', ((key) => {\n            let attrVal = node.getAttribute('v-model');\n            _this._binding[attrVal]._directives.push(new Watcher(\n                'input',\n                node,\n                _this,\n                attrVal,\n                'value'\n            ))\n            return function() {\n                _this.$data[attrVal] = nodes[key].value;\n            }\n        })(i));\n     }\n     if (node.hasAttribute('v-bind')) {\n         let attrVal = node.getAttribute('v-bind');\n         _this._binding[attrVal]._directives.push(new Watcher(\n            'text',\n            node,\n            _this,\n            attrVal,\n            'innerHTML'\n         ))\n     }\n }\n}\n```\n\n### 实现观察者 Watcher\n> 每次数据发生变化 都会触发Watcher去更新视图\n\n```javascript\n/**\n * 实现Watcher监听\n * \n * @param {String} name 指令名称\n * @param {Element} el 指令对应的dom元素\n * @param {Instance} vm 指令所属的myVue实例\n * @param {any} exp 指令对应的值\n * @param {any} attr 绑定的属性值\n */\nfunction Watcher(name, el, vm, exp, attr) {\n    this.name = name;\n    this.el = el;\n    this.vm = vm;\n    this.exp = exp;\n    this.attr = attr;\n\n    this.update();\n}\n\n\nWatcher.prototype.update = () => {\n    this.el[this.attr] = this.vm.$data[this.exp]; // 当data对应的值(exp)改变时，修改当前元素的属性，以保证dom更新\n}\n```\n\n### 调用MyVue\n```javascript\n// 调用 MyVue\nwindow.onload = () => {\n  let app = new MyVue({\n    el: \"#app\",\n    data: {\n      number: 0\n    },\n    methods: {\n      increment: () => {\n          this.number++;\n      },\n      decrease: () => {\n          this.number--;\n      }\n    }\n  });\n};\n```\n\n### 最终效果\n![最终效果](https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/47264916.jpg)\n\n### 总结\n1. vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。\n2. Vue2.x版本双向数据绑定的核心是**Object.defineProperty**方法，劫持对象的访问器，在属性值发生变化时我们可以获取变化,从而进行进一步操作。\n3. 通过监听器和解析器的协作，触发Watcher更新视图\n\n\n> 在即将到来的Vue3.x中，将会使用ES6的[Proxy](http://es6.ruanyifeng.com/#docs/proxy)代替**Object.defineProperty**，它可以直接劫持整个对象，并返回一个新对象，不管是操作便利程度还是底层功能上都远强于Object.defineProperty。","slug":"vue_data_binding","published":1,"updated":"2020-07-15T02:10:51.294Z","_id":"ckclo9v8l000a0wu5uk4r98vx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>🌱 <code>vue</code> 双向数据绑定原理：<code>监听器</code>、<code>解析器</code>、<code>观察者</code>。</p>\n<a id=\"more\"></a>\n<h3 id=\"MVVM双向数据绑定流程\"><a href=\"#MVVM双向数据绑定流程\" class=\"headerlink\" title=\"MVVM双向数据绑定流程\"></a>MVVM双向数据绑定流程</h3><p><img src=\"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/64201803.jpg\" alt=\"MVVM双向数据绑定流程\"></p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">v-click</span>=<span class=\"string\">\"decrease\"</span>&gt;</span> - <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"number\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">v-click</span>=<span class=\"string\">\"increment\"</span>&gt;</span> + <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"number\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/92465283.jpg\" alt=\"html\"></p>\n<h3 id=\"初始化mvvm\"><a href=\"#初始化mvvm\" class=\"headerlink\" title=\"初始化mvvm\"></a>初始化mvvm</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyVue</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._init(options);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 初始化, 继承所有options</span></span><br><span class=\"line\">MyVue.prototype._init = <span class=\"function\">(<span class=\"params\">options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(options);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$options = options;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$el = <span class=\"built_in\">document</span>.querySelector(options.el);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$data = options.data;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$methods = options.methods;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._binding = &#123;&#125;; <span class=\"comment\">// _binding保存着model与view的映射关系，也就是Watcher的实例。当model改变时，会触发其中的指令类更新，保证view也能实时更新</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 监听器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._observe(<span class=\"keyword\">this</span>.$data);</span><br><span class=\"line\">  <span class=\"comment\">// 解析器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._compile(<span class=\"keyword\">this</span>.$el);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现监听器-Observe\"><a href=\"#实现监听器-Observe\" class=\"headerlink\" title=\"实现监听器 Observe\"></a>实现监听器 Observe</h3><blockquote>\n<p>Observer 遍历数据对象。<br>如果对某个数据赋值，会触发setter，就能监听数据变化<br>如果获取某个数据，会触发getter</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyVue.prototype._observe = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._binding[key] = &#123;</span><br><span class=\"line\">          _directives: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      value = data[key];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._observe(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> binding = <span class=\"keyword\">this</span>._binding[key];</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.defineProperty(data, key, &#123;</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span>, <span class=\"comment\">// 可枚举</span></span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否可以再定义</span></span><br><span class=\"line\">        get: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`获取<span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: <span class=\"function\"><span class=\"params\">newValue</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`更新<span class=\"subst\">$&#123;newValue&#125;</span>`</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (value !== newValue) &#123;</span><br><span class=\"line\">            value = newValue;</span><br><span class=\"line\">            binding._directives.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">                item.update();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现解析器-Compile\"><a href=\"#实现解析器-Compile\" class=\"headerlink\" title=\"实现解析器 Compile\"></a>实现解析器 Compile</h3><blockquote>\n<p>compile方法主要做以下事情：</p>\n<ol>\n<li>解析模板指令</li>\n<li>将模板中的变量替换成数据</li>\n<li>初始化渲染视图并且给每个指令对应的dom绑定update函数</li>\n<li>数据变化，通知视图更新</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// root为根元素</span></span><br><span class=\"line\">MyVue.prototype._compile = <span class=\"function\">(<span class=\"params\">root</span>) =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> nodes = root.children;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; ++i) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> node = nodes[i];</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (node.children.length) &#123;</span><br><span class=\"line\">        _this._compile(node);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//解析模板指令&amp;将模板中的变量替换成数据</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (node.hasAttribute(<span class=\"string\">'v-click'</span>)) &#123;</span><br><span class=\"line\">        node.onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-click'</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(attrVal);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _this.$methods[attrVal].bind(_this.$data);</span><br><span class=\"line\">        &#125;)();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 绑定数据模型</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (node.hasAttribute(<span class=\"string\">'v-model'</span>) &amp;&amp; (node.tagName === <span class=\"string\">'INPUT'</span> || node.tagName === <span class=\"string\">'TEXTAREA'</span>)) &#123;</span><br><span class=\"line\">         node.addEventListener(<span class=\"string\">'input'</span>, (<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-model'</span>);</span><br><span class=\"line\">            _this._binding[attrVal]._directives.push(<span class=\"keyword\">new</span> Watcher(</span><br><span class=\"line\">                <span class=\"string\">'input'</span>,</span><br><span class=\"line\">                node,</span><br><span class=\"line\">                _this,</span><br><span class=\"line\">                attrVal,</span><br><span class=\"line\">                <span class=\"string\">'value'</span></span><br><span class=\"line\">            ))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                _this.$data[attrVal] = nodes[key].value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)(i));</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (node.hasAttribute(<span class=\"string\">'v-bind'</span>)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-bind'</span>);</span><br><span class=\"line\">         _this._binding[attrVal]._directives.push(<span class=\"keyword\">new</span> Watcher(</span><br><span class=\"line\">            <span class=\"string\">'text'</span>,</span><br><span class=\"line\">            node,</span><br><span class=\"line\">            _this,</span><br><span class=\"line\">            attrVal,</span><br><span class=\"line\">            <span class=\"string\">'innerHTML'</span></span><br><span class=\"line\">         ))</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现观察者-Watcher\"><a href=\"#实现观察者-Watcher\" class=\"headerlink\" title=\"实现观察者 Watcher\"></a>实现观察者 Watcher</h3><blockquote>\n<p>每次数据发生变化 都会触发Watcher去更新视图</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Watcher监听</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; name 指令名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Element&#125; el 指令对应的dom元素</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Instance&#125; vm 指令所属的myVue实例</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;any&#125; exp 指令对应的值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;any&#125; attr 绑定的属性值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Watcher</span>(<span class=\"params\">name, el, vm, exp, attr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.el = el;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.exp = exp;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.attr = attr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.update();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Watcher.prototype.update = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.el[<span class=\"keyword\">this</span>.attr] = <span class=\"keyword\">this</span>.vm.$data[<span class=\"keyword\">this</span>.exp]; <span class=\"comment\">// 当data对应的值(exp)改变时，修改当前元素的属性，以保证dom更新</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用MyVue\"><a href=\"#调用MyVue\" class=\"headerlink\" title=\"调用MyVue\"></a>调用MyVue</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 MyVue</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> MyVue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      number: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      increment: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.number++;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      decrease: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.number--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p><img src=\"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/47264916.jpg\" alt=\"最终效果\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。</li>\n<li>Vue2.x版本双向数据绑定的核心是<strong>Object.defineProperty</strong>方法，劫持对象的访问器，在属性值发生变化时我们可以获取变化,从而进行进一步操作。</li>\n<li>通过监听器和解析器的协作，触发Watcher更新视图</li>\n</ol>\n<blockquote>\n<p>在即将到来的Vue3.x中，将会使用ES6的<a href=\"http://es6.ruanyifeng.com/#docs/proxy\" target=\"_blank\" rel=\"noopener\">Proxy</a>代替<strong>Object.defineProperty</strong>，它可以直接劫持整个对象，并返回一个新对象，不管是操作便利程度还是底层功能上都远强于Object.defineProperty。</p>\n</blockquote>\n","site":{"data":{"gallery":{"source":[{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/61933480.jpg","desc":"涂鸦"},{"link":"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-4-18/86403488.jpg","desc":"云南石林"}]}}},"excerpt":"<p>🌱 <code>vue</code> 双向数据绑定原理：<code>监听器</code>、<code>解析器</code>、<code>观察者</code>。</p>","more":"<h3 id=\"MVVM双向数据绑定流程\"><a href=\"#MVVM双向数据绑定流程\" class=\"headerlink\" title=\"MVVM双向数据绑定流程\"></a>MVVM双向数据绑定流程</h3><p><img src=\"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/64201803.jpg\" alt=\"MVVM双向数据绑定流程\"></p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">v-click</span>=<span class=\"string\">\"decrease\"</span>&gt;</span> - <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"number\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">v-click</span>=<span class=\"string\">\"increment\"</span>&gt;</span> + <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"number\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/92465283.jpg\" alt=\"html\"></p>\n<h3 id=\"初始化mvvm\"><a href=\"#初始化mvvm\" class=\"headerlink\" title=\"初始化mvvm\"></a>初始化mvvm</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyVue</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._init(options);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 初始化, 继承所有options</span></span><br><span class=\"line\">MyVue.prototype._init = <span class=\"function\">(<span class=\"params\">options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(options);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$options = options;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$el = <span class=\"built_in\">document</span>.querySelector(options.el);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$data = options.data;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$methods = options.methods;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._binding = &#123;&#125;; <span class=\"comment\">// _binding保存着model与view的映射关系，也就是Watcher的实例。当model改变时，会触发其中的指令类更新，保证view也能实时更新</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 监听器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._observe(<span class=\"keyword\">this</span>.$data);</span><br><span class=\"line\">  <span class=\"comment\">// 解析器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._compile(<span class=\"keyword\">this</span>.$el);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现监听器-Observe\"><a href=\"#实现监听器-Observe\" class=\"headerlink\" title=\"实现监听器 Observe\"></a>实现监听器 Observe</h3><blockquote>\n<p>Observer 遍历数据对象。<br>如果对某个数据赋值，会触发setter，就能监听数据变化<br>如果获取某个数据，会触发getter</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyVue.prototype._observe = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._binding[key] = &#123;</span><br><span class=\"line\">          _directives: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      value = data[key];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._observe(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> binding = <span class=\"keyword\">this</span>._binding[key];</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.defineProperty(data, key, &#123;</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span>, <span class=\"comment\">// 可枚举</span></span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否可以再定义</span></span><br><span class=\"line\">        get: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`获取<span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: <span class=\"function\"><span class=\"params\">newValue</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`更新<span class=\"subst\">$&#123;newValue&#125;</span>`</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (value !== newValue) &#123;</span><br><span class=\"line\">            value = newValue;</span><br><span class=\"line\">            binding._directives.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">                item.update();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现解析器-Compile\"><a href=\"#实现解析器-Compile\" class=\"headerlink\" title=\"实现解析器 Compile\"></a>实现解析器 Compile</h3><blockquote>\n<p>compile方法主要做以下事情：</p>\n<ol>\n<li>解析模板指令</li>\n<li>将模板中的变量替换成数据</li>\n<li>初始化渲染视图并且给每个指令对应的dom绑定update函数</li>\n<li>数据变化，通知视图更新</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// root为根元素</span></span><br><span class=\"line\">MyVue.prototype._compile = <span class=\"function\">(<span class=\"params\">root</span>) =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> nodes = root.children;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; ++i) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> node = nodes[i];</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (node.children.length) &#123;</span><br><span class=\"line\">        _this._compile(node);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//解析模板指令&amp;将模板中的变量替换成数据</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (node.hasAttribute(<span class=\"string\">'v-click'</span>)) &#123;</span><br><span class=\"line\">        node.onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-click'</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(attrVal);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _this.$methods[attrVal].bind(_this.$data);</span><br><span class=\"line\">        &#125;)();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 绑定数据模型</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (node.hasAttribute(<span class=\"string\">'v-model'</span>) &amp;&amp; (node.tagName === <span class=\"string\">'INPUT'</span> || node.tagName === <span class=\"string\">'TEXTAREA'</span>)) &#123;</span><br><span class=\"line\">         node.addEventListener(<span class=\"string\">'input'</span>, (<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-model'</span>);</span><br><span class=\"line\">            _this._binding[attrVal]._directives.push(<span class=\"keyword\">new</span> Watcher(</span><br><span class=\"line\">                <span class=\"string\">'input'</span>,</span><br><span class=\"line\">                node,</span><br><span class=\"line\">                _this,</span><br><span class=\"line\">                attrVal,</span><br><span class=\"line\">                <span class=\"string\">'value'</span></span><br><span class=\"line\">            ))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                _this.$data[attrVal] = nodes[key].value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)(i));</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (node.hasAttribute(<span class=\"string\">'v-bind'</span>)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-bind'</span>);</span><br><span class=\"line\">         _this._binding[attrVal]._directives.push(<span class=\"keyword\">new</span> Watcher(</span><br><span class=\"line\">            <span class=\"string\">'text'</span>,</span><br><span class=\"line\">            node,</span><br><span class=\"line\">            _this,</span><br><span class=\"line\">            attrVal,</span><br><span class=\"line\">            <span class=\"string\">'innerHTML'</span></span><br><span class=\"line\">         ))</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现观察者-Watcher\"><a href=\"#实现观察者-Watcher\" class=\"headerlink\" title=\"实现观察者 Watcher\"></a>实现观察者 Watcher</h3><blockquote>\n<p>每次数据发生变化 都会触发Watcher去更新视图</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Watcher监听</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; name 指令名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Element&#125; el 指令对应的dom元素</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Instance&#125; vm 指令所属的myVue实例</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;any&#125; exp 指令对应的值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;any&#125; attr 绑定的属性值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Watcher</span>(<span class=\"params\">name, el, vm, exp, attr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.el = el;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.exp = exp;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.attr = attr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.update();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Watcher.prototype.update = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.el[<span class=\"keyword\">this</span>.attr] = <span class=\"keyword\">this</span>.vm.$data[<span class=\"keyword\">this</span>.exp]; <span class=\"comment\">// 当data对应的值(exp)改变时，修改当前元素的属性，以保证dom更新</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用MyVue\"><a href=\"#调用MyVue\" class=\"headerlink\" title=\"调用MyVue\"></a>调用MyVue</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 MyVue</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> MyVue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      number: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      increment: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.number++;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      decrease: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.number--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p><img src=\"https://yechuanjie-image.oss-cn-beijing.aliyuncs.com/18-7-24/47264916.jpg\" alt=\"最终效果\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。</li>\n<li>Vue2.x版本双向数据绑定的核心是<strong>Object.defineProperty</strong>方法，劫持对象的访问器，在属性值发生变化时我们可以获取变化,从而进行进一步操作。</li>\n<li>通过监听器和解析器的协作，触发Watcher更新视图</li>\n</ol>\n<blockquote>\n<p>在即将到来的Vue3.x中，将会使用ES6的<a href=\"http://es6.ruanyifeng.com/#docs/proxy\" target=\"_blank\" rel=\"noopener\">Proxy</a>代替<strong>Object.defineProperty</strong>，它可以直接劫持整个对象，并返回一个新对象，不管是操作便利程度还是底层功能上都远强于Object.defineProperty。</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckclo9v5v00000wu55m607u34","category_id":"ckclo9v7i00040wu544an64um","_id":"ckclo9v96000e0wu506zkc7hf"},{"post_id":"ckclo9v6800020wu51669nf0s","category_id":"ckclo9v8o000b0wu5frp05oi4","_id":"ckclo9v9u000k0wu5wdnt3rmx"},{"post_id":"ckclo9v8c00080wu51m1nf8ar","category_id":"ckclo9v8o000b0wu5frp05oi4","_id":"ckclo9v9y000m0wu5jf23v7jl"},{"post_id":"ckclo9v8l000a0wu5uk4r98vx","category_id":"ckclo9v9r000j0wu52e0io10e","_id":"ckclo9vac000p0wu59ottdey7"}],"PostTag":[{"post_id":"ckclo9v5v00000wu55m607u34","tag_id":"ckclo9v7z00050wu5s6hklgcr","_id":"ckclo9v9f000h0wu5bdigm5ax"},{"post_id":"ckclo9v5v00000wu55m607u34","tag_id":"ckclo9v8q000c0wu5hbo9qy6h","_id":"ckclo9v9p000i0wu5jt6fgt6t"},{"post_id":"ckclo9v6800020wu51669nf0s","tag_id":"ckclo9v99000g0wu5580fjbta","_id":"ckclo9vaa000o0wu5pusz3srn"},{"post_id":"ckclo9v6800020wu51669nf0s","tag_id":"ckclo9v9w000l0wu5ruokip4z","_id":"ckclo9vae000q0wu5t8jr6voz"},{"post_id":"ckclo9v8c00080wu51m1nf8ar","tag_id":"ckclo9v99000g0wu5580fjbta","_id":"ckclo9vaj000t0wu5b8dlh1z1"},{"post_id":"ckclo9v8c00080wu51m1nf8ar","tag_id":"ckclo9vaf000r0wu5yh0xx66u","_id":"ckclo9vak000u0wu5nxxtht3r"},{"post_id":"ckclo9v8l000a0wu5uk4r98vx","tag_id":"ckclo9v99000g0wu5580fjbta","_id":"ckclo9vam000w0wu5i3tac7o9"},{"post_id":"ckclo9v8l000a0wu5uk4r98vx","tag_id":"ckclo9vak000v0wu5o4dlha0m","_id":"ckclo9van000x0wu5yb4pphy1"}],"Tag":[{"name":"Taro","_id":"ckclo9v7z00050wu5s6hklgcr"},{"name":"React","_id":"ckclo9v8q000c0wu5hbo9qy6h"},{"name":"JavaScript","_id":"ckclo9v99000g0wu5580fjbta"},{"name":"动画","_id":"ckclo9v9w000l0wu5ruokip4z"},{"name":"ES6","_id":"ckclo9vaf000r0wu5yh0xx66u"},{"name":"Vue","_id":"ckclo9vak000v0wu5o4dlha0m"}]}}